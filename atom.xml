<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-02T19:15:37.363Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>35. Search Insert Position(easy)</title>
    <link href="http://example.com/2022/10/02/35/"/>
    <id>http://example.com/2022/10/02/35/</id>
    <published>2022-10-02T19:06:08.000Z</published>
    <updated>2022-10-02T19:15:37.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-it-would-be-if-it-were-inserted-in-order"><a href="#Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-it-would-be-if-it-were-inserted-in-order" class="headerlink" title="Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."></a>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</h2><h2 id="You-must-write-an-algorithm-with-O-log-n-runtime-complexity"><a href="#You-must-write-an-algorithm-with-O-log-n-runtime-complexity" class="headerlink" title="You must write an algorithm with O(log n) runtime complexity."></a>You must write an algorithm with O(log n) runtime complexity.</h2><p>基础做法，遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> target&gt;nums[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> target&gt;nums[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i]&gt;=target:</span><br><span class="line">                res=i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = length</span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            mid = <span class="built_in">int</span>(left + (right - left) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid]&lt;target:</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right= mid</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>14. Longest Common Prefix(easy)</title>
    <link href="http://example.com/2022/10/02/14/"/>
    <id>http://example.com/2022/10/02/14/</id>
    <published>2022-10-02T18:51:47.000Z</published>
    <updated>2022-10-02T19:06:57.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-Longest-Common-Prefix-easy"><a href="#14-Longest-Common-Prefix-easy" class="headerlink" title="14. Longest Common Prefix(easy)"></a>14. Longest Common Prefix(easy)</h1><h2 id="Write-a-function-to-find-the-longest-common-prefix-string-amongst-an-array-of-strings"><a href="#Write-a-function-to-find-the-longest-common-prefix-string-amongst-an-array-of-strings" class="headerlink" title="Write a function to find the longest common prefix string amongst an array of strings."></a>Write a function to find the longest common prefix string amongst an array of strings.</h2><h2 id="If-there-is-no-common-prefix-return-an-empty-string-“”"><a href="#If-there-is-no-common-prefix-return-an-empty-string-“”" class="headerlink" title="If there is no common prefix, return an empty string “”."></a>If there is no common prefix, return an empty string “”.</h2><p><a href="https://leetcode.cn/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/">官方题解</a></p><p>纵向扫描<br>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。另一种方法是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        length, count = <span class="built_in">len</span>(strs[<span class="number">0</span>]), <span class="built_in">len</span>(strs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            c = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(i == <span class="built_in">len</span>(strs[j]) <span class="keyword">or</span> strs[j][i] != c <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, count)):</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;14-Longest-Common-Prefix-easy&quot;&gt;&lt;a href=&quot;#14-Longest-Common-Prefix-easy&quot; class=&quot;headerlink&quot; title=&quot;14. Longest Common Prefix(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="LCP" scheme="http://example.com/tags/LCP/"/>
    
  </entry>
  
  <entry>
    <title>1480. Running Sum of 1d Array(easy)</title>
    <link href="http://example.com/2022/10/02/1480/"/>
    <id>http://example.com/2022/10/02/1480/</id>
    <published>2022-10-02T18:25:28.000Z</published>
    <updated>2022-10-02T18:35:56.309Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).</p><p>Return the running sum of nums.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line">Output: [1,3,6,10]</span><br><span class="line">Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].</span><br></pre></td></tr></table></figure><p>其实这题就是前缀和数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def runningSum(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line">        res=[0]*len(nums)</span><br><span class="line">        res[0]=nums[0]</span><br><span class="line">        for i in range(1,len(nums)):</span><br><span class="line">            res[i]=nums[i]+res[i-1]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).&lt;/p&gt;
&lt;p&gt;Return the running sum of nums.&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>231. Power of Two(easy)</title>
    <link href="http://example.com/2022/10/01/231/"/>
    <id>http://example.com/2022/10/01/231/</id>
    <published>2022-10-02T03:45:11.000Z</published>
    <updated>2022-10-02T04:35:57.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="231-Power-of-Two-easy"><a href="#231-Power-of-Two-easy" class="headerlink" title="231. Power of Two(easy)"></a>231. Power of Two(easy)</h1><h2 id="Given-an-integer-n-return-true-if-it-is-a-power-of-two-Otherwise-return-false"><a href="#Given-an-integer-n-return-true-if-it-is-a-power-of-two-Otherwise-return-false" class="headerlink" title="Given an integer n, return true if it is a power of two. Otherwise, return false."></a>Given an integer n, return true if it is a power of two. Otherwise, return false.</h2><h2 id="An-integer-n-is-a-power-of-two-if-there-exists-an-integer-x-such-that-n-2-x"><a href="#An-integer-n-is-a-power-of-two-if-there-exists-an-integer-x-such-that-n-2-x" class="headerlink" title="An integer n is a power of two, if there exists an integer x such that n == 2^x."></a>An integer n is a power of two, if there exists an integer x such that n == 2^x.</h2><p>How to get / isolate the rightmost 1-bit : x &amp; (-x).</p><p>How to turn off (= set to 0) the rightmost 1-bit : x &amp; (x - 1).<br><a href="https://leetcode.com/problems/power-of-two/solutions/360718/power-of-two/">官方题解</a></p><p>Approach 1: Bitwise Operators : Get the Rightmost 1-bit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;231-Power-of-Two-easy&quot;&gt;&lt;a href=&quot;#231-Power-of-Two-easy&quot; class=&quot;headerlink&quot; title=&quot;231. Power of Two(easy)&quot;&gt;&lt;/a&gt;231. Power of Two(eas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>260. Single Number III(medium)</title>
    <link href="http://example.com/2022/10/01/260/"/>
    <id>http://example.com/2022/10/01/260/</id>
    <published>2022-10-02T03:33:57.000Z</published>
    <updated>2022-10-02T03:44:31.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="260-Single-Number-III-medium"><a href="#260-Single-Number-III-medium" class="headerlink" title="260. Single Number III(medium)"></a>260. Single Number III(medium)</h1><h2 id="Given-an-integer-array-nums-in-which-exactly-two-elements-appear-only-once-and-all-the-other-elements-appear-exactly-twice-Find-the-two-elements-that-appear-only-once-You-can-return-the-answer-in-any-order"><a href="#Given-an-integer-array-nums-in-which-exactly-two-elements-appear-only-once-and-all-the-other-elements-appear-exactly-twice-Find-the-two-elements-that-appear-only-once-You-can-return-the-answer-in-any-order" class="headerlink" title="Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order."></a>Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.</h2><h2 id="You-must-write-an-algorithm-that-runs-in-linear-runtime-complexity-and-uses-only-constant-extra-space"><a href="#You-must-write-an-algorithm-that-runs-in-linear-runtime-complexity-and-uses-only-constant-extra-space" class="headerlink" title="You must write an algorithm that runs in linear runtime complexity and uses only constant extra space."></a>You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,1,3,2,5]</span><br><span class="line">Output: [3,5]</span><br><span class="line">Explanation:  [5, 3] is also a valid answer.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/single-number-iii/solutions/366935/single-number-iii/">官方题解</a></p><p>Two bitmasks</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;260-Single-Number-III-medium&quot;&gt;&lt;a href=&quot;#260-Single-Number-III-medium&quot; class=&quot;headerlink&quot; title=&quot;260. Single Number III(medium)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>91. Decode Ways(medium)</title>
    <link href="http://example.com/2022/10/01/91/"/>
    <id>http://example.com/2022/10/01/91/</id>
    <published>2022-10-02T03:25:21.000Z</published>
    <updated>2022-10-02T03:27:07.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="91-Decode-Ways-medium"><a href="#91-Decode-Ways-medium" class="headerlink" title="91. Decode Ways(medium)"></a>91. Decode Ways(medium)</h1><h2 id="A-message-containing-letters-from-A-Z-can-be-encoded-into-numbers-using-the-following-mapping"><a href="#A-message-containing-letters-from-A-Z-can-be-encoded-into-numbers-using-the-following-mapping" class="headerlink" title="A message containing letters from A-Z can be encoded into numbers using the following mapping:"></a>A message containing letters from A-Z can be encoded into numbers using the following mapping:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;A&#x27; -&gt; &quot;1&quot;</span><br><span class="line">&#x27;B&#x27; -&gt; &quot;2&quot;</span><br><span class="line">...</span><br><span class="line">&#x27;Z&#x27; -&gt; &quot;26&quot;</span><br></pre></td></tr></table></figure><p>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, “11106” can be mapped into:</p><p>“AAJF” with the grouping (1 1 10 6)<br>“KJF” with the grouping (11 10 6)<br>Note that the grouping (1 11 06) is invalid because “06” cannot be mapped into ‘F’ since “6” is different from “06”.</p><p>Given a string s containing only digits, return the number of ways to decode it.</p><p>The test cases are generated so that the answer fits in a 32-bit integer.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6). </span><br></pre></td></tr></table></figure><h3 id="Leetcode-Solution"><a href="#Leetcode-Solution" class="headerlink" title="Leetcode Solution"></a><a href="https://leetcode.com/problems/decode-ways/solutions/525903/decode-ways/">Leetcode Solution</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        two_back = <span class="number">1</span></span><br><span class="line">        one_back = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            current = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> s[i] != <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                current = one_back</span><br><span class="line">            two_digit = <span class="built_in">int</span>(s[i - <span class="number">1</span>: i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> two_digit &gt;= <span class="number">10</span> <span class="keyword">and</span> two_digit &lt;= <span class="number">26</span>:</span><br><span class="line">                current += two_back</span><br><span class="line">            two_back = one_back</span><br><span class="line">            one_back = current</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> one_back</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;91-Decode-Ways-medium&quot;&gt;&lt;a href=&quot;#91-Decode-Ways-medium&quot; class=&quot;headerlink&quot; title=&quot;91. Decode Ways(medium)&quot;&gt;&lt;/a&gt;91. Decode Ways(mediu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>137. Single Number II(medium)</title>
    <link href="http://example.com/2022/10/01/137/"/>
    <id>http://example.com/2022/10/01/137/</id>
    <published>2022-10-01T20:51:38.000Z</published>
    <updated>2022-10-02T03:33:25.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="137-Single-Number-medium"><a href="#137-Single-Number-medium" class="headerlink" title="137. Single Number(medium)"></a>137. Single Number(medium)</h1><h2 id="Given-an-integer-array-nums-where-every-element-appears-three-times-except-for-one-which-appears-exactly-once-Find-the-single-element-and-return-it"><a href="#Given-an-integer-array-nums-where-every-element-appears-three-times-except-for-one-which-appears-exactly-once-Find-the-single-element-and-return-it" class="headerlink" title="Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it."></a>Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.</h2><h2 id="You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space"><a href="#You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space" class="headerlink" title="You must implement a solution with a linear runtime complexity and use only constant extra space."></a>You must implement a solution with a linear runtime complexity and use only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,2,3,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/single-number-ii/solutions/356460/single-number-ii/">官方题解</a></p><p>这里用到了异或<br>XOR</p><p>Let’s start from XOR operator which could be used to detect the bit which appears odd number of times: 1, 3, 5, etc.</p><p>XOR of zero and a bit results in that bit</p><p>0⊕x=x</p><p>XOR of two equal bits (even if they are zeros) results in a zero</p><p>x⊕x=0</p><p>and so on and so forth, i.e. one could see the bit in a bitmask only if it appears odd number of times.<br>That’s already great, so one could detect the bit which appears once, and the bit which appears three times. The problem is to distinguish between these two situations.</p><p>AND and NOT</p><p>To separate number that appears once from a number that appears three times let’s use two bitmasks instead of one: seen_once and seen_twice.</p><p>The idea is to</p><p>change seen_once only if seen_twice is unchanged</p><p>change seen_twice only if seen_once is unchanged</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        seen_once = seen_twice = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="comment"># first appearance: </span></span><br><span class="line">            <span class="comment"># add num to seen_once </span></span><br><span class="line">            <span class="comment"># don&#x27;t add to seen_twice because of presence in seen_once</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># second appearance: </span></span><br><span class="line">            <span class="comment"># remove num from seen_once </span></span><br><span class="line">            <span class="comment"># add num to seen_twice</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># third appearance: </span></span><br><span class="line">            <span class="comment"># don&#x27;t add to seen_once because of presence in seen_twice</span></span><br><span class="line">            <span class="comment"># remove num from seen_twice</span></span><br><span class="line">            seen_once = ~seen_twice &amp; (seen_once ^ num)</span><br><span class="line">            seen_twice = ~seen_once &amp; (seen_twice ^ num)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> seen_once</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;137-Single-Number-medium&quot;&gt;&lt;a href=&quot;#137-Single-Number-medium&quot; class=&quot;headerlink&quot; title=&quot;137. Single Number(medium)&quot;&gt;&lt;/a&gt;137. Single </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>136. Single Number(easy)</title>
    <link href="http://example.com/2022/09/30/136/"/>
    <id>http://example.com/2022/09/30/136/</id>
    <published>2022-09-30T15:28:13.000Z</published>
    <updated>2022-10-01T20:51:05.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="136-Single-Number-easy"><a href="#136-Single-Number-easy" class="headerlink" title="136. Single Number(easy)"></a>136. Single Number(easy)</h1><h2 id="Given-a-non-empty-array-of-integers-nums-every-element-appears-twice-except-for-one-Find-that-single-one"><a href="#Given-a-non-empty-array-of-integers-nums-every-element-appears-twice-except-for-one-Find-that-single-one" class="headerlink" title="Given a non-empty array of integers nums, every element appears twice except for one. Find that single one."></a>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</h2><h2 id="You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space"><a href="#You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space" class="headerlink" title="You must implement a solution with a linear runtime complexity and use only constant extra space."></a>You must implement a solution with a linear runtime complexity and use only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>这道题的关键在于异或运算，异或也叫半加运算，其运算法则相当于不带进位的二进制加法：二进制下用1表示真，0表示假，则异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0</p><p>假设数组中有 2m+1 个数，其中有 m 个数各出现两次，一个数出现一次。<br>a1⊕a1⊕a2⊕a2⊕a3⊕a3⊕a4⊕a4⊕a5⊕a5⋯⋯⋯⊕am⊕am⊕am+1<br>=0⊕0⊕0⊕0⊕0⊕0⊕0⊕0⊕am+1=am+1<br>​</p><p>因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x ^ y, nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python-reduce"><a href="#python-reduce" class="headerlink" title="python reduce"></a><a href="https://thepythonguru.com/python-builtin-functions/reduce/">python reduce</a></h3><p>The reduce() function accepts a function and a sequence and returns a single value calculated as follows:</p><p>Initially, the function is called with the first two items from the sequence and the result is returned.<br>The function is then called again with the result obtained in step 1 and the next value in the sequence. This process keeps repeating until there are items in the sequence.<br>The syntax of the reduce() function is as follows:</p><p>Syntax: reduce(function, sequence[, initial]) -&gt; value</p><p>When the initial value is provided, the function is called with the initial value and the first item from the sequence.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;136-Single-Number-easy&quot;&gt;&lt;a href=&quot;#136-Single-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;136. Single Number(easy)&quot;&gt;&lt;/a&gt;136. Single Number</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>191. Number of 1 Bits(easy)</title>
    <link href="http://example.com/2022/09/30/191/"/>
    <id>http://example.com/2022/09/30/191/</id>
    <published>2022-09-30T15:23:15.000Z</published>
    <updated>2022-09-30T15:27:41.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="191-Number-of-1-Bits-easy"><a href="#191-Number-of-1-Bits-easy" class="headerlink" title="191. Number of 1 Bits(easy)"></a>191. Number of 1 Bits(easy)</h1><h2 id="Write-a-function-that-takes-an-unsigned-integer-and-returns-the-number-of-‘1’-bits-it-has-also-known-as-the-Hamming-weight"><a href="#Write-a-function-that-takes-an-unsigned-integer-and-returns-the-number-of-‘1’-bits-it-has-also-known-as-the-Hamming-weight" class="headerlink" title="Write a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the Hamming weight)."></a>Write a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the Hamming weight).</h2><h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><h2 id="Note-that-in-some-languages-such-as-Java-there-is-no-unsigned-integer-type-In-this-case-the-input-will-be-given-as-a-signed-integer-type-It-should-not-affect-your-implementation-as-the-integer’s-internal-binary-representation-is-the-same-whether-it-is-signed-or-unsigned"><a href="#Note-that-in-some-languages-such-as-Java-there-is-no-unsigned-integer-type-In-this-case-the-input-will-be-given-as-a-signed-integer-type-It-should-not-affect-your-implementation-as-the-integer’s-internal-binary-representation-is-the-same-whether-it-is-signed-or-unsigned" class="headerlink" title="Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned."></a>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned.</h2><h2 id="In-Java-the-compiler-represents-the-signed-integers-using-2’s-complement-notation-Therefore-in-Example-3-the-input-represents-the-signed-integer-3"><a href="#In-Java-the-compiler-represents-the-signed-integers-using-2’s-complement-notation-Therefore-in-Example-3-the-input-represents-the-signed-integer-3" class="headerlink" title="In Java, the compiler represents the signed integers using 2’s complement notation. Therefore, in Example 3, the input represents the signed integer. -3."></a>In Java, the compiler represents the signed integers using 2’s complement notation. Therefore, in Example 3, the input represents the signed integer. -3.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            res += n &amp; <span class="number">1</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;191-Number-of-1-Bits-easy&quot;&gt;&lt;a href=&quot;#191-Number-of-1-Bits-easy&quot; class=&quot;headerlink&quot; title=&quot;191. Number of 1 Bits(easy)&quot;&gt;&lt;/a&gt;191. Numb</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill9-bitwise</title>
    <link href="http://example.com/2022/09/30/LeetCode-skill9-bitwise/"/>
    <id>http://example.com/2022/09/30/LeetCode-skill9-bitwise/</id>
    <published>2022-09-30T15:17:26.000Z</published>
    <updated>2022-10-02T03:23:28.077Z</updated>
    
    <content type="html"><![CDATA[<p>位运算   Bit Manipulation</p><p>n &amp; 1   使用 n &amp; 1 得到二进制末尾是否为 1；<br>n &gt;&gt;= 1 把 n 右移 1 位，直至结束。</p><h1 id="bit操作"><a href="#bit操作" class="headerlink" title="bit操作"></a>bit操作</h1><p>&amp; 符号，x &amp; y ，会将两个十进制数在二进制下进行与运算<br>| 符号，x | y ，会将两个十进制数在二进制下进行或运算<br>^ 符号，x ^ y ，会将两个十进制数在二进制下进行异或运算<br>&lt;&lt; 符号，x &lt;&lt; y 左移操作，最右边用 0 填充</p><blockquote><blockquote><p>符号，x &gt;&gt; y 右移操作，最左边用 0 填充<br>~ 符号，~x ，按位取反操作，将 x 在二进制下的每一位取反</p></blockquote></blockquote><h1 id="整数集合set位运算"><a href="#整数集合set位运算" class="headerlink" title="整数集合set位运算"></a>整数集合set位运算</h1><h1 id="整数集合做标志时，比如回溯时的visited标志数组"><a href="#整数集合做标志时，比如回溯时的visited标志数组" class="headerlink" title="整数集合做标志时，比如回溯时的visited标志数组"></a>整数集合做标志时，比如回溯时的visited标志数组</h1><p>vstd 访问 i ：vstd | (1 &lt;&lt; i)<br>vstd 离开 i ：vstd &amp; ~(1 &lt;&lt; i)<br>vstd 不包含 i : not vstd &amp; (1 &lt;&lt; i)</p><p>并集 ：A | B<br>交集 ：A &amp; B<br>全集 ：(1 &lt;&lt; n) - 1<br>补集 ：((1 &lt;&lt; n) - 1) ^ A<br>子集 ：(A &amp; B) == B<br>判断是否是 2 的幂 ：A &amp; (A - 1) == 0<br>最低位的 1 变为 0 ：n &amp;= (n - 1)<br>最低位的 1：A &amp; (-A)，最低位的 1 一般记为 lowbit(A)</p><ol start="191"><li>Number of 1 Bits</li></ol><p>计算数字的二进制中有多少个1。</p><ol start="136"><li><p>Single Number<br>找出数组中不重复的元素。其它元素出现两次。原题</p></li><li><p>Single Number II<br>找出数组中出现一次的元素，其它元素出现三次。原题</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;位运算   Bit Manipulation&lt;/p&gt;
&lt;p&gt;n &amp;amp; 1   使用 n &amp;amp; 1 得到二进制末尾是否为 1；&lt;br&gt;n &amp;gt;&amp;gt;= 1 把 n 右移 1 位，直至结束。&lt;/p&gt;
&lt;h1 id=&quot;bit操作&quot;&gt;&lt;a href=&quot;#bit操作</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>218. The Skyline Problem(hard)</title>
    <link href="http://example.com/2022/09/29/218/"/>
    <id>http://example.com/2022/09/29/218/</id>
    <published>2022-09-30T03:17:19.000Z</published>
    <updated>2022-09-30T03:19:51.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="218-The-Skyline-Problem-hard"><a href="#218-The-Skyline-Problem-hard" class="headerlink" title="218. The Skyline Problem(hard)"></a>218. The Skyline Problem(hard)</h1><h2 id="A-city’s-skyline-is-the-outer-contour-of-the-silhouette-formed-by-all-the-buildings-in-that-city-when-viewed-from-a-distance-Given-the-locations-and-heights-of-all-the-buildings-return-the-skyline-formed-by-these-buildings-collectively"><a href="#A-city’s-skyline-is-the-outer-contour-of-the-silhouette-formed-by-all-the-buildings-in-that-city-when-viewed-from-a-distance-Given-the-locations-and-heights-of-all-the-buildings-return-the-skyline-formed-by-these-buildings-collectively" class="headerlink" title="A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively."></a>A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.</h2><h2 id="The-geometric-information-of-each-building-is-given-in-the-array-buildings-where-buildings-i-lefti-righti-heighti"><a href="#The-geometric-information-of-each-building-is-given-in-the-array-buildings-where-buildings-i-lefti-righti-heighti" class="headerlink" title="The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:"></a>The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:</h2><p>lefti is the x coordinate of the left edge of the ith building.<br>righti is the x coordinate of the right edge of the ith building.<br>heighti is the height of the ith building.</p><h2 id="You-may-assume-all-buildings-are-perfect-rectangles-grounded-on-an-absolutely-flat-surface-at-height-0"><a href="#You-may-assume-all-buildings-are-perfect-rectangles-grounded-on-an-absolutely-flat-surface-at-height-0" class="headerlink" title="You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0."></a>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</h2><h2 id="The-skyline-should-be-represented-as-a-list-of-“key-points”-sorted-by-their-x-coordinate-in-the-form-x1-y1-x2-y2-…-Each-key-point-is-the-left-endpoint-of-some-horizontal-segment-in-the-skyline-except-the-last-point-in-the-list-which-always-has-a-y-coordinate-0-and-is-used-to-mark-the-skyline’s-termination-where-the-rightmost-building-ends-Any-ground-between-the-leftmost-and-rightmost-buildings-should-be-part-of-the-skyline’s-contour"><a href="#The-skyline-should-be-represented-as-a-list-of-“key-points”-sorted-by-their-x-coordinate-in-the-form-x1-y1-x2-y2-…-Each-key-point-is-the-left-endpoint-of-some-horizontal-segment-in-the-skyline-except-the-last-point-in-the-list-which-always-has-a-y-coordinate-0-and-is-used-to-mark-the-skyline’s-termination-where-the-rightmost-building-ends-Any-ground-between-the-leftmost-and-rightmost-buildings-should-be-part-of-the-skyline’s-contour" class="headerlink" title="The skyline should be represented as a list of “key points” sorted by their x-coordinate in the form [[x1,y1],[x2,y2],…]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline’s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline’s contour."></a>The skyline should be represented as a list of “key points” sorted by their x-coordinate in the form [[x1,y1],[x2,y2],…]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline’s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline’s contour.</h2><h2 id="Note-There-must-be-no-consecutive-horizontal-lines-of-equal-height-in-the-output-skyline-For-instance-…-2-3-4-5-7-5-11-5-12-7-…-is-not-acceptable-the-three-lines-of-height-5-should-be-merged-into-one-in-the-final-output-as-such-…-2-3-4-5-12-7-…"><a href="#Note-There-must-be-no-consecutive-horizontal-lines-of-equal-height-in-the-output-skyline-For-instance-…-2-3-4-5-7-5-11-5-12-7-…-is-not-acceptable-the-three-lines-of-height-5-should-be-merged-into-one-in-the-final-output-as-such-…-2-3-4-5-12-7-…" class="headerlink" title="Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, […,[2 3],[4 5],[7 5],[11 5],[12 7],…] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: […,[2 3],[4 5],[12 7],…]"></a>Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, […,[2 3],[4 5],[7 5],[11 5],[12 7],…] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: […,[2 3],[4 5],[12 7],…]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]</span><br><span class="line">Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]</span><br><span class="line">Explanation:</span><br><span class="line">Figure A shows the buildings of the input.</span><br><span class="line">Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSkyline</span>(<span class="params">self, buildings: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        <span class="comment"># Iterate over the left and right edges of all the buildings, </span></span><br><span class="line">        <span class="comment"># If its a left edge, add (left, height) to &#x27;edges&#x27;.</span></span><br><span class="line">        <span class="comment"># Otherwise, add (right, -height) to &#x27;edges&#x27;.</span></span><br><span class="line">        edges = []</span><br><span class="line">        <span class="keyword">for</span> left, right, height <span class="keyword">in</span> buildings:</span><br><span class="line">            edges.append([left, height])</span><br><span class="line">            edges.append([right, -height])</span><br><span class="line">        edges.sort()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Initailize two empty priority queues &#x27;live&#x27; and &#x27;past&#x27; </span></span><br><span class="line">        <span class="comment"># for the live buildings and the past buildings.</span></span><br><span class="line">        live, past = [], []</span><br><span class="line">        answer = []</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Iterate over all the sorted edges.</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(edges):</span><br><span class="line">            <span class="comment"># Since we might have multiple edges at same x,</span></span><br><span class="line">            <span class="comment"># Let the &#x27;curr_x&#x27; be the current position.</span></span><br><span class="line">            curr_x = edges[idx][<span class="number">0</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># While we are handling the edges at &#x27;curr_x&#x27;:</span></span><br><span class="line">            <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(edges) <span class="keyword">and</span> edges[idx][<span class="number">0</span>] == curr_x:</span><br><span class="line">                height = edges[idx][<span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># If &#x27;height&#x27; &gt; 0, meaning a building of height &#x27;height&#x27;</span></span><br><span class="line">                <span class="comment"># is live, push &#x27;height&#x27; to &#x27;live&#x27;. </span></span><br><span class="line">                <span class="comment"># Otherwise, a building of height &#x27;height&#x27; is passed, </span></span><br><span class="line">                <span class="comment"># push the height to &#x27;past&#x27;.</span></span><br><span class="line">                <span class="keyword">if</span> height &gt; <span class="number">0</span>:</span><br><span class="line">                    heapq.heappush(live, -height)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    heapq.heappush(past, height)</span><br><span class="line">                idx += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># While the top height from &#x27;live&#x27; equals to that from &#x27;past&#x27;,</span></span><br><span class="line">            <span class="comment"># Remove top height from both &#x27;live&#x27; and &#x27;past&#x27;.</span></span><br><span class="line">            <span class="keyword">while</span> past <span class="keyword">and</span> past[<span class="number">0</span>] == live[<span class="number">0</span>]:</span><br><span class="line">                heapq.heappop(live)</span><br><span class="line">                heapq.heappop(past)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Get the maximum height from &#x27;live&#x27;.</span></span><br><span class="line">            max_height = -live[<span class="number">0</span>] <span class="keyword">if</span> live <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># If the height changes at &#x27;curr_x&#x27;, we add this</span></span><br><span class="line">            <span class="comment"># skyline key point [curr_x, max_height] to &#x27;answer&#x27;.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> answer <span class="keyword">or</span> answer[-<span class="number">1</span>][<span class="number">1</span>] != max_height:</span><br><span class="line">                answer.append([curr_x, max_height])</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># Return &#x27;answer&#x27; as the skyline.</span></span><br><span class="line">        <span class="keyword">return</span> answer            </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;218-The-Skyline-Problem-hard&quot;&gt;&lt;a href=&quot;#218-The-Skyline-Problem-hard&quot; class=&quot;headerlink&quot; title=&quot;218. The Skyline Problem(hard)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Priority Queue" scheme="http://example.com/tags/Priority-Queue/"/>
    
    <category term="Sweep Line " scheme="http://example.com/tags/Sweep-Line/"/>
    
  </entry>
  
  <entry>
    <title>189. Rotate Array(medium)</title>
    <link href="http://example.com/2022/09/29/189/"/>
    <id>http://example.com/2022/09/29/189/</id>
    <published>2022-09-30T03:05:44.000Z</published>
    <updated>2022-09-30T03:17:39.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="189-Rotate-Array-medium"><a href="#189-Rotate-Array-medium" class="headerlink" title="189. Rotate Array(medium)"></a>189. Rotate Array(medium)</h1><h2 id="Given-an-array-rotate-the-array-to-the-right-by-k-steps-where-k-is-non-negative"><a href="#Given-an-array-rotate-the-array-to-the-right-by-k-steps-where-k-is-non-negative" class="headerlink" title="Given an array, rotate the array to the right by k steps, where k is non-negative."></a>Given an array, rotate the array to the right by k steps, where k is non-negative.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><p>这道题其实不像是rotate，意思是把最后一个数不断的移到第一位，就跟开火车似的。<br>把这个数组分成两部分，Part1[P1] 和 Part2[P2]<br>举个例子：<br>[P1] 是最后三位数字之前的数字，[1,2,3,4]<br>[P2] 是我们要翻转的数字 [5,6,7]<br>然后分别把P1 和P2前后调转<br>P1=[4321]<br>P2=[765]<br>这样整个数组就是[4321765]<br>将最后三位与前三位互换位置就是[5,6,7,1,2,3,4]<br>[P1] is defined as the array part just before the last 3 values. What I mean is something like [1,2,3,4]<br>[P2] is defined as the array part just after remaining values which we have to rotate [5,6,7]</p><p>但是这里根据K有不同的情况，比如说k = 101, 就是说K大于整个数组长度了，但我们不需要翻转数组101次，利用K对数组长度求余就行，因为转过7次以后就是 [1,2,3,4,5,6,7]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span> (<span class="params">self, nums, i, j</span>) :</span> </span><br><span class="line">        li = i</span><br><span class="line">        ri = j</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> li &lt; ri:</span><br><span class="line">            temp = nums[li]</span><br><span class="line">            nums[li] = nums[ri]</span><br><span class="line">            nums[ri] = temp</span><br><span class="line">            </span><br><span class="line">            li += <span class="number">1</span></span><br><span class="line">            ri -= <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        k = k % <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> k &lt; <span class="number">0</span> : </span><br><span class="line">            k += <span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line">        self.reverse(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - k - <span class="number">1</span>);</span><br><span class="line">        self.reverse(nums, <span class="built_in">len</span>(nums) - k, <span class="built_in">len</span>(nums) - <span class="number">1</span>);</span><br><span class="line">        self.reverse(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;189-Rotate-Array-medium&quot;&gt;&lt;a href=&quot;#189-Rotate-Array-medium&quot; class=&quot;headerlink&quot; title=&quot;189. Rotate Array(medium)&quot;&gt;&lt;/a&gt;189. Rotate Arr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>622. Design Circular Queue(medium)</title>
    <link href="http://example.com/2022/09/25/622/"/>
    <id>http://example.com/2022/09/25/622/</id>
    <published>2022-09-25T14:36:01.000Z</published>
    <updated>2022-09-25T20:24:50.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="622-Design-Circular-Queue-medium"><a href="#622-Design-Circular-Queue-medium" class="headerlink" title="622. Design Circular Queue(medium)"></a>622. Design Circular Queue(medium)</h1><h2 id="Design-your-implementation-of-the-circular-queue-The-circular-queue-is-a-linear-data-structure-in-which-the-operations-are-performed-based-on-FIFO-First-In-First-Out-principle-and-the-last-position-is-connected-back-to-the-first-position-to-make-a-circle-It-is-also-called-“Ring-Buffer”"><a href="#Design-your-implementation-of-the-circular-queue-The-circular-queue-is-a-linear-data-structure-in-which-the-operations-are-performed-based-on-FIFO-First-In-First-Out-principle-and-the-last-position-is-connected-back-to-the-first-position-to-make-a-circle-It-is-also-called-“Ring-Buffer”" class="headerlink" title="Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”."></a>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”.</h2><h2 id="One-of-the-benefits-of-the-circular-queue-is-that-we-can-make-use-of-the-spaces-in-front-of-the-queue-In-a-normal-queue-once-the-queue-becomes-full-we-cannot-insert-the-next-element-even-if-there-is-a-space-in-front-of-the-queue-But-using-the-circular-queue-we-can-use-the-space-to-store-new-values"><a href="#One-of-the-benefits-of-the-circular-queue-is-that-we-can-make-use-of-the-spaces-in-front-of-the-queue-In-a-normal-queue-once-the-queue-becomes-full-we-cannot-insert-the-next-element-even-if-there-is-a-space-in-front-of-the-queue-But-using-the-circular-queue-we-can-use-the-space-to-store-new-values" class="headerlink" title="One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values."></a>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</h2><h2 id="Implementation-the-MyCircularQueue-class"><a href="#Implementation-the-MyCircularQueue-class" class="headerlink" title="Implementation the MyCircularQueue class:"></a>Implementation the MyCircularQueue class:</h2><p>MyCircularQueue(k) Initializes the object with the size of the queue to be k.<br>int Front() Gets the front item from the queue. If the queue is empty, return -1.<br>int Rear() Gets the last item from the queue. If the queue is empty, return -1.<br>boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.<br>boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.<br>boolean isEmpty() Checks whether the circular queue is empty or not.<br>boolean isFull() Checks whether the circular queue is full or not.</p><h2 id="You-must-solve-the-problem-without-using-the-built-in-queue-data-structure-in-your-programming-language"><a href="#You-must-solve-the-problem-without-using-the-built-in-queue-data-structure-in-your-programming-language" class="headerlink" title="You must solve the problem without using the built-in queue data structure in your programming language."></a>You must solve the problem without using the built-in queue data structure in your programming language.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MyCircularQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;, &quot;isFull&quot;, &quot;deQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;]</span><br><span class="line">[[3], [1], [2], [3], [4], [], [], [], [4], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, true, true, false, 3, true, true, true, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyCircularQueue myCircularQueue = new MyCircularQueue(3);</span><br><span class="line">myCircularQueue.enQueue(1); // return True</span><br><span class="line">myCircularQueue.enQueue(2); // return True</span><br><span class="line">myCircularQueue.enQueue(3); // return True</span><br><span class="line">myCircularQueue.enQueue(4); // return False</span><br><span class="line">myCircularQueue.Rear();     // return 3</span><br><span class="line">myCircularQueue.isFull();   // return True</span><br><span class="line">myCircularQueue.deQueue();  // return True</span><br><span class="line">myCircularQueue.enQueue(4); // return True</span><br><span class="line">myCircularQueue.Rear();     // return 4</span><br></pre></td></tr></table></figure><p>循环队列就是将队列存储空间的最后一个位置绕到第一个位置，形成逻辑上的环状空间，供队列循环使用。在循环队列结构中，当存储空间的最后一个位置已被使用而再要进入队运算时，只需要存储空间的第一个位置空闲，便可将元素加入到第一个位置，即将存储空间的第一个位置作为队尾。循环队列可以更简单防止伪溢出的发生，但队列大小是固定的。</p><p>在循环队列中，当队列为空时，有front=rear，而当所有队列空间全占满时，也有front=rear。为了区别这两种情况，规定循环队列最多只能有MaxSize-1个队列元素，当循环队列中只剩下一个空存储单元时，队列就已经满了。因此，队列判空的条件是front=rear，而队列判满的条件是front=（rear+1)%MaxSize。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/design-circular-queue/solution/she-ji-xun-huan-dui-lie-by-leetcode-solu-1w0a/">Solution</a></h3><p>对于一个固定大小的数组，只要知道队尾 rear 与队首 front，即可计算出队列当前的长度：<br>front=（rear+1)%capacity</p><p>循环队列的属性如下:<br>elements：一个固定大小的数组，用于保存循环队列的元素。<br>capacity：循环队列的容量，即队列中最多可以容纳的元素数量。<br>front：队列首元素对应的数组的索引。<br>rear：队列尾元素对应的索引的下一个索引。<br>循环队列的接口方法如下：</p><p>MyCircularQueue(int k): 初始化队列，同时base 数组的空间初始化大小为 k + 1。front,rear 全部初始化为 0。<br>enQueue(int value)：在队列的尾部插入一个元素，并同时将队尾的索引 rear 更新为 (rear+1)%capacity。<br>deQueue()：从队首取出一个元素，并同时将队首的索引 front 更新为 (front+1)% capacity。<br>Front()：返回队首的元素，需要检测队列是否为空。<br>Rear()：返回队尾的元素，需要检测队列是否为空。<br>isEmpty()：检测队列是否为空，根据之前的定义只需判断 rear 是否等于 front。<br>isFull()：检测队列是否已满，根据之前的定义只需判断 front 是否等于 (rear+1)% capacity。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, k: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.front=self.rear=<span class="number">0</span></span><br><span class="line">        self.elements=[<span class="number">0</span>]*(k+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enQueue</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.elements[self.rear]=value</span><br><span class="line">        self.rear=(self.rear+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deQueue</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.front=(self.front+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Front</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> self.isEmpty() <span class="keyword">else</span> self.elements[self.front]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Rear</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> self.isEmpty() <span class="keyword">else</span> self.elements[(self.rear - <span class="number">1</span>) % <span class="built_in">len</span>(self.elements)]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.rear==self.front</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFull</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.rear+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)==self.front</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCircularQueue(k)</span></span><br><span class="line"><span class="comment"># param_1 = obj.enQueue(value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.deQueue()</span></span><br><span class="line"><span class="comment"># param_3 = obj.Front()</span></span><br><span class="line"><span class="comment"># param_4 = obj.Rear()</span></span><br><span class="line"><span class="comment"># param_5 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"># param_6 = obj.isFull()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;622-Design-Circular-Queue-medium&quot;&gt;&lt;a href=&quot;#622-Design-Circular-Queue-medium&quot; class=&quot;headerlink&quot; title=&quot;622. Design Circular Queue(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="Circular Queue" scheme="http://example.com/tags/Circular-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1002. Find Common Characters(easy)</title>
    <link href="http://example.com/2022/09/25/1002/"/>
    <id>http://example.com/2022/09/25/1002/</id>
    <published>2022-09-25T04:12:49.000Z</published>
    <updated>2022-09-25T04:15:30.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1002-Find-Common-Characters-easy"><a href="#1002-Find-Common-Characters-easy" class="headerlink" title="1002. Find Common Characters(easy)"></a>1002. Find Common Characters(easy)</h1><h2 id="Given-a-string-array-words-return-an-array-of-all-characters-that-show-up-in-all-strings-within-the-words-including-duplicates-You-may-return-the-answer-in-any-order"><a href="#Given-a-string-array-words-return-an-array-of-all-characters-that-show-up-in-all-strings-within-the-words-including-duplicates-You-may-return-the-answer-in-any-order" class="headerlink" title="Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order."></a>Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: words = [&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]</span><br><span class="line">Output: [&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]</span><br></pre></td></tr></table></figure><p>这个就是利用hashmap判断数量和是否存在，然后用&amp;=判断相同值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonChars</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        res = collections.Counter(words[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            res &amp;=collections.Counter(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(res.elements())    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1002-Find-Common-Characters-easy&quot;&gt;&lt;a href=&quot;#1002-Find-Common-Characters-easy&quot; class=&quot;headerlink&quot; title=&quot;1002. Find Common Characters</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>1081. Smallest Subsequence of Distinct Characters(medium)</title>
    <link href="http://example.com/2022/09/24/1081/"/>
    <id>http://example.com/2022/09/24/1081/</id>
    <published>2022-09-24T21:03:22.000Z</published>
    <updated>2022-09-24T22:28:54.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1081-Smallest-Subsequence-of-Distinct-Characters-medium"><a href="#1081-Smallest-Subsequence-of-Distinct-Characters-medium" class="headerlink" title="1081. Smallest Subsequence of Distinct Characters(medium)"></a>1081. Smallest Subsequence of Distinct Characters(medium)</h1><h2 id="Given-a-string-s-return-the-lexicographically-smallest-subsequence-of-s-that-contains-all-the-distinct-characters-of-s-exactly-once"><a href="#Given-a-string-s-return-the-lexicographically-smallest-subsequence-of-s-that-contains-all-the-distinct-characters-of-s-exactly-once" class="headerlink" title="Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once."></a>Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><p>这题和316一模一样，代码不需要更改</p><pre><code>class Solution:    def smallestSubsequence(self, s: str) -&gt; str:        stack=[]        remain_counter=collections.Counter(s)        for c in s:            if c not in stack:                while stack and c&lt;stack[-1] and remain_counter[stack[-1]]&gt;0:                    stack.pop()                stack.append(c)            remain_counter[c]-=1        return &#39;&#39;.join(stack)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1081-Smallest-Subsequence-of-Distinct-Characters-medium&quot;&gt;&lt;a href=&quot;#1081-Smallest-Subsequence-of-Distinct-Characters-medium&quot; class=&quot;h</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>321. Create Maximum Number(hard)</title>
    <link href="http://example.com/2022/09/24/321/"/>
    <id>http://example.com/2022/09/24/321/</id>
    <published>2022-09-24T21:02:41.000Z</published>
    <updated>2022-09-24T22:28:32.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="321-Create-Maximum-Number-hard"><a href="#321-Create-Maximum-Number-hard" class="headerlink" title="321. Create Maximum Number(hard)"></a>321. Create Maximum Number(hard)</h1><h2 id="You-are-given-two-integer-arrays-nums1-and-nums2-of-lengths-m-and-n-respectively-nums1-and-nums2-represent-the-digits-of-two-numbers-You-are-also-given-an-integer-k"><a href="#You-are-given-two-integer-arrays-nums1-and-nums2-of-lengths-m-and-n-respectively-nums1-and-nums2-represent-the-digits-of-two-numbers-You-are-also-given-an-integer-k" class="headerlink" title="You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k."></a>You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.</h2><h2 id="Create-the-maximum-number-of-length-k-lt-m-n-from-digits-of-the-two-numbers-The-relative-order-of-the-digits-from-the-same-array-must-be-preserved"><a href="#Create-the-maximum-number-of-length-k-lt-m-n-from-digits-of-the-two-numbers-The-relative-order-of-the-digits-from-the-same-array-must-be-preserved" class="headerlink" title="Create the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved."></a>Create the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.</h2><h2 id="Return-an-array-of-the-k-digits-representing-the-answer"><a href="#Return-an-array-of-the-k-digits-representing-the-answer" class="headerlink" title="Return an array of the k digits representing the answer."></a>Return an array of the k digits representing the answer.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5</span><br><span class="line">Output: [9,8,6,5,3]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ol><li>分治</li><li>数学<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3>和316. 去除重复字母 类似，只不不过这一次是两个数组，而不是一个，并且是求最大数。</li></ol><p>最大最小是无关紧要的，关键在于是两个数组，并且要求从两个数组选取的元素个数加起来一共是 k。</p><p>然而在一个数组中取 k 个数字，并保持其最小（或者最大），我们已经会了。但是如果问题扩展到两个，会有什么变化呢？</p><p>实际上，问题本质并没有发生变化。 假设我们从 nums1 中取了 k1 个，从 num2 中取了 k2 个，其中 k1 + k2 = k。而 k1 和 k2 这 两个子问题我们是会解决的。由于这两个子问题是相互独立的，因此我们只需要分别求解，然后将结果合并即可。</p><p>假如 k1 和 k2 个数字，已经取出来了。那么剩下要做的就是将这个长度分别为 k1 和 k2 的数字，合并成一个长度为 k 的数组合并成一个最大的数组。</p><p>以题目的 nums1 = [3, 4, 6, 5] nums2 = [9, 1, 2, 5, 8, 3] k = 5 为例。 假如我们从 num1 中取出 1 个数字，那么就要从 nums2 中取出 4 个数字。</p><p>运用第一题的方法，我们计算出应该取 nums1 的 [6]，并取 nums2 的 [9,5,8,3]。 如何将 [6] 和 [9,5,8,3]，使得数字尽可能大，并且保持相对位置不变呢？</p><p>实际上这个过程有点类似归并排序中的治，而上面我们分别计算 num1 和 num2 的最大数的过程类似归并排序中的分。</p><p>我们将从 num1 中挑选的 k1 个数组成的数组称之为 A，将从 num2 中挑选的 k2 个数组成的数组称之为 B，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> A <span class="keyword">or</span> B:</span><br><span class="line">        bigger = A <span class="keyword">if</span> A &gt; B <span class="keyword">else</span> B</span><br><span class="line">        ans.append(bigger[<span class="number">0</span>])</span><br><span class="line">        bigger.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>这里需要说明一下。 在很多编程语言中：如果 A 和 B 是两个数组，当前仅当 A 的首个元素字典序大于 B 的首个元素，A &gt; B 返回 true，否则返回 false。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = [1,2]</span><br><span class="line">B = [2]</span><br><span class="line">A &lt; B # True</span><br><span class="line"></span><br><span class="line">A = [1,2]</span><br><span class="line">B = [1,2,3]</span><br><span class="line">A &lt; B # False</span><br></pre></td></tr></table></figure><h3 id="具体算法："><a href="#具体算法：" class="headerlink" title="具体算法："></a>具体算法：</h3><p>从 nums1 中 取 min(i, len(nums1)) 个数形成新的数组 A（取的逻辑同第一题），其中 i 等于 0,1,2, … k。<br>从 nums2 中 对应取 min(j, len(nums2)) 个数形成新的数组 B（取的逻辑同第一题），其中 j 等于 k - i。<br>将 A 和 B 按照上面的 merge 方法合并<br>上面我们暴力了 k 种组合情况，我们只需要将 k 种情况取出最大值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span>(<span class="params">self, nums1, nums2, k</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">pick_max</span>(<span class="params">nums, k</span>):</span></span><br><span class="line">            stack = []</span><br><span class="line">            drop = <span class="built_in">len</span>(nums) - k</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">while</span> drop <span class="keyword">and</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt; num:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    drop -= <span class="number">1</span></span><br><span class="line">                stack.append(num)</span><br><span class="line">            <span class="keyword">return</span> stack[:k]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">A, B</span>):</span></span><br><span class="line">            ans = []</span><br><span class="line">            <span class="keyword">while</span> A <span class="keyword">or</span> B:</span><br><span class="line">                bigger = A <span class="keyword">if</span> A &gt; B <span class="keyword">else</span> B</span><br><span class="line">                ans.append(bigger[<span class="number">0</span>])</span><br><span class="line">                bigger.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(merge(pick_max(nums1, i), pick_max(nums2, k-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>) <span class="keyword">if</span> i &lt;= <span class="built_in">len</span>(nums1) <span class="keyword">and</span> k-i &lt;= <span class="built_in">len</span>(nums2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：pick_max 的时间复杂度为 O(M + N)O(M+N) ，其中 MM 为 nums1 的长度，NN 为 nums2 的长度。 merge 的时间复杂度为 O(k)O(k)，再加上外层遍历所有的 k 中可能性。因此总的时间复杂度为 O(k^2 * (M + N))O(k^2 ∗(M+N))。<br>空间复杂度：我们使用了额外的 stack 和 ans 数组，因此空间复杂度为 O(max(M, N, k))，其中 MM 为 nums1 的长度，NN 为 nums2 的长度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;321-Create-Maximum-Number-hard&quot;&gt;&lt;a href=&quot;#321-Create-Maximum-Number-hard&quot; class=&quot;headerlink&quot; title=&quot;321. Create Maximum Number(hard)</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>316. Remove Duplicate Letters</title>
    <link href="http://example.com/2022/09/24/316/"/>
    <id>http://example.com/2022/09/24/316/</id>
    <published>2022-09-24T19:58:55.000Z</published>
    <updated>2022-09-24T22:28:06.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="316-Remove-Duplicate-Letters-medium"><a href="#316-Remove-Duplicate-Letters-medium" class="headerlink" title="316. Remove Duplicate Letters(medium)"></a>316. Remove Duplicate Letters(medium)</h1><h2 id="Given-a-string-s-remove-duplicate-letters-so-that-every-letter-appears-once-and-only-once-You-must-make-sure-your-result-is-the-smallest-in-lexicographical-order-among-all-possible-results"><a href="#Given-a-string-s-remove-duplicate-letters-so-that-every-letter-appears-once-and-only-once-You-must-make-sure-your-result-is-the-smallest-in-lexicographical-order-among-all-possible-results" class="headerlink" title="Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results."></a>Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;bcabc&quot;</span><br><span class="line">Output: &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><p>这道题和402. 移掉 K 位数字(中等)差不多，也是利用栈的特性减少时间复杂度</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>哈希表在python中可以用collections.Counter计数来体现。<br>该方法用于统计某序列中每个元素出现的次数，以键值对的方式存在字典中。但类型其实是Counter。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">counts = collections.Counter(nums)</span><br><span class="line"><span class="built_in">print</span>(counts)</span><br><span class="line"><span class="comment">## Counter(&#123;1: 3, 2: 2, 3: 1&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>凭借这个结构，可以计算出某个序列中出现次数最多的某个元素。也即在得到了counts之后求max即可。但这个max需要给依据索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(counts)) <span class="comment"># 3，这里只是求得最大的键值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(counts.keys(), key=counts.get)) <span class="comment"># 1，这里是按照key方法求最大</span></span><br></pre></td></tr></table></figure><p>这里max是两个参数，前一个代表要max的是什么，也就是要返回最大键，后面的key代表要返回的最大的依据是什么，默认是本身，但这里给了key方法，count.get也就是求值，所以该方法就是说返回一个最大键，但这个最大的依据是值。如果某个键值对的值是最大的，那就返回其键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>(counts)</span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="number">1</span>)) <span class="comment"># 4 get在字典中就是传一个键，根据键求对应的值。</span></span><br></pre></td></tr></table></figure><p>前面是一种理解，但max的两个参数也可以理解为key后面的方法是要将前面的第一个参数作为参数，也就是counts.keys()要作为counts.get的参数，然后求max。即get键对应的值，然后返回最大的值对应的键（感觉python中存在很多这种情况，比如lambda表达式，后面也是传一个func来将前面的参数带入）</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>字典序<br>数学<br>思路<br>与上面题目不同，这道题没有一个全局的删除次数 k。而是对于每一个在字符串 s 中出现的字母 c 都有一个 k 值。这个 k 是 c 出现次数 - 1。</p><p>沿用上面的知识的话，我们首先要做的就是计算每一个字符的 k，可以用一个字典来描述这种关系，其中 key 为 字符 c，value 为其出现的次数。</p><h3 id="具体算法："><a href="#具体算法：" class="headerlink" title="具体算法："></a>具体算法：</h3><p>建立一个字典。其中 key 为 字符 c，value 为其出现的剩余次数。<br>从左往右遍历字符串，每次遍历到一个字符，其剩余出现次数 - 1.<br>对于每一个字符，如果其对应的剩余出现次数大于 1，我们可以选择丢弃（也可以选择不丢弃），否则不可以丢弃。<br>是否丢弃的标准和上面题目类似。如果栈中相邻的元素字典序更大，那么我们选择丢弃相邻的栈中的元素。<br>还记得上面题目的边界条件么？如果栈中剩下的元素大于 n - kn−k，我们选择截取前 n - kn−k 个数字。然而本题中的 k 是分散在各个字符中的，因此这种思路不可行的。</p><p>不过不必担心。由于题目是要求只出现一次。我们可以在遍历的时候简单地判断其是否在栈上即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span>(<span class="params">self, s</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        remain_counter = collections.Counter(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> c &lt; stack[-<span class="number">1</span>] <span class="keyword">and</span>  remain_counter[stack[-<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                stack.append(c)</span><br><span class="line">            remain_counter[c] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：由于判断当前字符是否在栈上存在需要 O(N)的时间，因此总的时间复杂度就是 O(N^2)，其中 N 为字符串长度。<br>空间复杂度：我们使用了额外的栈来存储数字，因此空间复杂度为 O(N)，其中 N 为字符串长度。</p><p>优化：<br>利用hashset空间换时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span>(<span class="params">self, s</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        seen = <span class="built_in">set</span>()</span><br><span class="line">        remain_counter = collections.Counter(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> c &lt; stack[-<span class="number">1</span>] <span class="keyword">and</span>  remain_counter[stack[-<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    seen.discard(stack.pop())</span><br><span class="line">                seen.add(c)</span><br><span class="line">                stack.append(c)</span><br><span class="line">            remain_counter[c] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(N)，其中 N 为字符串长度。<br>空间复杂度：我们使用了额外的栈和 hashset，因此空间复杂度为 O(N)，其中 N 为字符串长度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;316-Remove-Duplicate-Letters-medium&quot;&gt;&lt;a href=&quot;#316-Remove-Duplicate-Letters-medium&quot; class=&quot;headerlink&quot; title=&quot;316. Remove Duplicate </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>985. Sum of Even Numbers After Queries(medium)</title>
    <link href="http://example.com/2022/09/21/985/"/>
    <id>http://example.com/2022/09/21/985/</id>
    <published>2022-09-21T22:21:15.000Z</published>
    <updated>2022-09-22T03:35:33.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="985-Sum-of-Even-Numbers-After-Queries-medium"><a href="#985-Sum-of-Even-Numbers-After-Queries-medium" class="headerlink" title="985. Sum of Even Numbers After Queries(medium)"></a>985. Sum of Even Numbers After Queries(medium)</h1><h2 id="You-are-given-an-integer-array-nums-and-an-array-queries-where-queries-i-vali-indexi"><a href="#You-are-given-an-integer-array-nums-and-an-array-queries-where-queries-i-vali-indexi" class="headerlink" title="You are given an integer array nums and an array queries where queries[i] = [vali, indexi]."></a>You are given an integer array nums and an array queries where queries[i] = [vali, indexi].</h2><h2 id="For-each-query-i-first-apply-nums-indexi-nums-indexi-vali-then-print-the-sum-of-the-even-values-of-nums"><a href="#For-each-query-i-first-apply-nums-indexi-nums-indexi-vali-then-print-the-sum-of-the-even-values-of-nums" class="headerlink" title="For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums."></a>For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.</h2><h2 id="Return-an-integer-array-answer-where-answer-i-is-the-answer-to-the-ith-query"><a href="#Return-an-integer-array-answer-where-answer-i-is-the-answer-to-the-ith-query" class="headerlink" title="Return an integer array answer where answer[i] is the answer to the ith query."></a>Return an integer array answer where answer[i] is the answer to the ith query.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]</span><br><span class="line">Output: [8,6,2,4]</span><br><span class="line">Explanation: At the beginning, the array is [1,2,3,4].</span><br><span class="line">After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.</span><br><span class="line">After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.</span><br><span class="line">After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.</span><br><span class="line">After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.</span><br></pre></td></tr></table></figure><p>这道题的思路很有特点，维护一个数组，先把原数组的偶数和求出来，接下来根据queries不断调整 S，即每一步操作之后整个数组的偶数和。操作数组中的某一个元素 A[index] 的时候，数组 A 其他位置的元素都应保持不变。如果 A[index] 是偶数，我们就从 S 中减去它，然后计算 A[index] + val 对 S 的影响（如果是偶数则在 S 中加上它）。相当于再计算前先把这个value减去（如果是偶数），算上新加入的index再计算对整个和的影响（如果是偶数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumEvenAfterQueries</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        even_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum+=num</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> val,i <span class="keyword">in</span> queries:</span><br><span class="line">            <span class="keyword">if</span> nums[i]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum-=nums[i]</span><br><span class="line">            nums[i]+=val</span><br><span class="line">            <span class="keyword">if</span> nums[i]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum+=nums[i]</span><br><span class="line">            ans.append(even_sum)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;985-Sum-of-Even-Numbers-After-Queries-medium&quot;&gt;&lt;a href=&quot;#985-Sum-of-Even-Numbers-After-Queries-medium&quot; class=&quot;headerlink&quot; title=&quot;985.</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>402. Remove K Digits(medium)</title>
    <link href="http://example.com/2022/09/21/402/"/>
    <id>http://example.com/2022/09/21/402/</id>
    <published>2022-09-21T22:03:43.000Z</published>
    <updated>2022-09-24T21:02:24.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="402-Remove-K-Digits-medium"><a href="#402-Remove-K-Digits-medium" class="headerlink" title="402. Remove K Digits(medium)"></a>402. Remove K Digits(medium)</h1><h2 id="Given-string-num-representing-a-non-negative-integer-num-and-an-integer-k-return-the-smallest-possible-integer-after-removing-k-digits-from-num"><a href="#Given-string-num-representing-a-non-negative-integer-num-and-an-integer-k-return-the-smallest-possible-integer-after-removing-k-digits-from-num" class="headerlink" title="Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num."></a>Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><p>给定一个以字符串表示的非负整数  num，移除这个数中的 k 位数字，使得剩下的数字最小。</p><p>注意:<br>num 的长度小于 10002 且  ≥ k。<br>num 不会包含任何前导零。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;1432219&quot;, k = 3</span><br><span class="line">输出: &quot;1219&quot;</span><br><span class="line">解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。</span><br><span class="line">示例 2 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;10200&quot;, k = 1</span><br><span class="line">输出: &quot;200&quot;</span><br><span class="line">解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</span><br><span class="line">示例 3 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;10&quot;, k = 2</span><br><span class="line">输出: &quot;0&quot;</span><br><span class="line">解释: 从原数字移除所有的数字，剩余为空就是 0。</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. strip():- This method is used to delete all the leading and trailing characters mentioned in its argument.</span><br><span class="line">2. lstrip():- This method is used to delete all the leading characters mentioned in its argument.</span><br><span class="line">3. rstrip():- This method is used to delete all the trailing characters mentioned in its argument.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python code to demonstrate working of</span></span><br><span class="line"><span class="comment"># strip(), lstrip() and rstrip()</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;---geeksforgeeks---&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using strip() to delete all &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.strip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all &#x27;-&#x27; is : geeksforgeeks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using lstrip() to delete all trailing &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all leading &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.lstrip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all leading &#x27;-&#x27; is : geeksforgeeks---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using rstrip() to delete all leading &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all trailing &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.rstrip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all trailing &#x27;-&#x27; is : ---geeksforgeeks</span></span><br></pre></td></tr></table></figure><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。<br>str.join(sequence) sequence – 要连接的元素序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;-&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">seq = (<span class="string">&quot;r&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="built_in">print</span> (s1.join( seq )) <span class="comment">#r-u-n-o-o-b</span></span><br><span class="line"><span class="built_in">print</span> (s2.join( seq )) <span class="comment">#runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">类似于<span class="keyword">if</span> 判断</span><br><span class="line"><span class="keyword">if</span> variable_1:</span><br><span class="line">  x = variable_1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  x = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><p>因此我们的思路就是：</p><p>从左到右遍历<br>对于遍历到的元素，我们选择保留。<br>但是我们可以选择性丢弃前面相邻的元素。<br>丢弃与否的依据如上面的前置知识中阐述中的方法。</p><p>然而需要注意的是，如果给定的数字是一个单调递增的数字，那么我们的算法会永远选择不丢弃。这个题目中要求的，我们要永远确保丢弃 k 个矛盾。</p><p>一个简单的思路就是：</p><p>每次丢弃一次，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。<br>而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素。</p><p>我们需要把思路逆转过来。刚才我的关注点一直是丢弃，题目要求我们丢弃 k 个。反过来说，不就是让我们保留 n - kn−k 个元素么？其中 n 为数字长度。 那么我们只需要按照上面的方法遍历完成之后，再截取前n - k个元素即可。</p><p>按照上面的思路，我们来选择数据结构。由于我们需要保留和丢弃相邻的元素，因此使用栈这种在一端进行添加和删除的数据结构是再合适不过了，我们来看下代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeKdigits</span>(<span class="params">self, num: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        stack=[]</span><br><span class="line">        remain= <span class="built_in">len</span>(num)-k</span><br><span class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">while</span> k <span class="keyword">and</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>]&gt;digit:</span><br><span class="line">                stack.pop()</span><br><span class="line">                k-=<span class="number">1</span></span><br><span class="line">            stack.append(digit)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack[:remain]).lstrip(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;402-Remove-K-Digits-medium&quot;&gt;&lt;a href=&quot;#402-Remove-K-Digits-medium&quot; class=&quot;headerlink&quot; title=&quot;402. Remove K Digits(medium)&quot;&gt;&lt;/a&gt;402. R</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>718</title>
    <link href="http://example.com/2022/09/21/718/"/>
    <id>http://example.com/2022/09/21/718/</id>
    <published>2022-09-21T22:02:27.000Z</published>
    <updated>2022-09-22T03:38:36.968Z</updated>
    
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
</feed>
