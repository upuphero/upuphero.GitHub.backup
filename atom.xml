<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-27T20:05:35.621Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2486</title>
    <link href="http://example.com/2022/11/27/2486/"/>
    <id>http://example.com/2022/11/27/2486/</id>
    <published>2022-11-27T20:05:03.000Z</published>
    <updated>2022-11-27T20:05:35.621Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendCharacters</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        i=j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s) <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(t):</span><br><span class="line">            <span class="keyword">if</span> s[i]==t[j]:</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j+=<span class="number">0</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(t)-j</span><br><span class="line"></span><br><span class="line">              </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>2485. Find the Pivot Integer(easy)</title>
    <link href="http://example.com/2022/11/27/2485/"/>
    <id>http://example.com/2022/11/27/2485/</id>
    <published>2022-11-27T19:59:09.000Z</published>
    <updated>2022-11-27T20:00:32.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2485-Find-the-Pivot-Integer-easy"><a href="#2485-Find-the-Pivot-Integer-easy" class="headerlink" title="2485. Find the Pivot Integer(easy)"></a>2485. Find the Pivot Integer(easy)</h1><h2 id="Given-a-positive-integer-n-find-the-pivot-integer-x-such-that"><a href="#Given-a-positive-integer-n-find-the-pivot-integer-x-such-that" class="headerlink" title="Given a positive integer n, find the pivot integer x such that:"></a>Given a positive integer n, find the pivot integer x such that:</h2><h2 id="sum-of-all-elements-between-1-and-x-inclusively-equals-the-sum-of-all-elements-between-x-and-n-inclusively"><a href="#sum-of-all-elements-between-1-and-x-inclusively-equals-the-sum-of-all-elements-between-x-and-n-inclusively" class="headerlink" title="sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively."></a>sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.</h2><h2 id="Return-the-pivot-integer-x-If-no-such-integer-exists-return-1-It-is-guaranteed-that-there-will-be-at-most-one-pivot-index-for-the-given-input"><a href="#Return-the-pivot-integer-x-If-no-such-integer-exists-return-1-It-is-guaranteed-that-there-will-be-at-most-one-pivot-index-for-the-given-input" class="headerlink" title="Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input."></a>Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.</h2><p>这就是个数学题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pivotInteger</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        num=(<span class="built_in">pow</span>(n,<span class="number">2</span>)+n)/<span class="number">2</span></span><br><span class="line">        num1=sqrt(num)</span><br><span class="line">        <span class="keyword">if</span> num1%<span class="number">1</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(num1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2485-Find-the-Pivot-Integer-easy&quot;&gt;&lt;a href=&quot;#2485-Find-the-Pivot-Integer-easy&quot; class=&quot;headerlink&quot; title=&quot;2485. Find the Pivot Integer</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="maths" scheme="http://example.com/tags/maths/"/>
    
  </entry>
  
  <entry>
    <title>781. Rabbits in Forest(medium)</title>
    <link href="http://example.com/2022/11/25/781/"/>
    <id>http://example.com/2022/11/25/781/</id>
    <published>2022-11-26T03:19:00.000Z</published>
    <updated>2022-11-26T03:19:41.015Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numRabbits</span>(<span class="params">self, answers: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        hashmap=Counter(answers)</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> hashmap:</span><br><span class="line">           </span><br><span class="line">            res +=(x + hashmap[x]) // (x + <span class="number">1</span>) * (x + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>200. Number of Islands(medium)</title>
    <link href="http://example.com/2022/11/25/200/"/>
    <id>http://example.com/2022/11/25/200/</id>
    <published>2022-11-26T02:23:09.000Z</published>
    <updated>2022-11-26T02:39:06.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="200-Number-of-Islands-medium"><a href="#200-Number-of-Islands-medium" class="headerlink" title="200. Number of Islands(medium)"></a>200. Number of Islands(medium)</h1><h2 id="Given-an-m-x-n-2D-binary-grid-grid-which-represents-a-map-of-‘1’s-land-and-‘0’s-water-return-the-number-of-islands"><a href="#Given-an-m-x-n-2D-binary-grid-grid-which-represents-a-map-of-‘1’s-land-and-‘0’s-water-return-the-number-of-islands" class="headerlink" title="Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands."></a>Given an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands.</h2><h2 id="An-island-is-surrounded-by-water-and-is-formed-by-connecting-adjacent-lands-horizontally-or-vertically-You-may-assume-all-four-edges-of-the-grid-are-all-surrounded-by-water"><a href="#An-island-is-surrounded-by-water-and-is-formed-by-connecting-adjacent-lands-horizontally-or-vertically-You-may-assume-all-four-edges-of-the-grid-are-all-surrounded-by-water" class="headerlink" title="An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water."></a>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><h3 id="岛屿系列"><a href="#岛屿系列" class="headerlink" title="岛屿系列"></a><a href="https://labuladong.github.io/algo/4/31/107/">岛屿系列</a></h3><ol start="1020"><li>Number of Enclaves    1020. 飞地的数量    </li><li>Number of Closed Islands    1254. 统计封闭岛屿的数目    </li><li>Count Sub Islands    1905. 统计子岛屿    </li><li>Number of Islands    200. 岛屿数量    </li><li>Number of Distinct Islands🔒    694. 不同岛屿的数量🔒    </li><li>Max Area of Island    695. 岛屿的最大面积</li></ol><p>岛屿系列题目的核心考点就是用 DFS/BFS 算法遍历二维数组。</p><p>那么如何在二维矩阵中使用 DFS 搜索呢？如果把二维矩阵中的每一个位置看做一个节点，这个节点的上下左右四个位置就是相邻节点，那么整个矩阵就可以抽象成一幅网状的「图」结构。</p><p>根据 学习数据结构和算法的框架思维，完全可以根据二叉树的遍历框架改写出二维矩阵的 DFS 代码框架：<br>Java 版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树遍历框架</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维矩阵遍历框架</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= m || j &gt;= n) &#123;</span><br><span class="line">        <span class="comment">// 超出索引边界</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visited[i][j]) &#123;</span><br><span class="line">        <span class="comment">// 已遍历过 (i, j)</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进入节点 (i, j)</span></span><br><span class="line">    visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j, visited); <span class="comment">// 上</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j, visited); <span class="comment">// 下</span></span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>, visited); <span class="comment">// 左</span></span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>, visited); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">grid,i,j</span>):</span></span><br><span class="line">            m=<span class="built_in">len</span>(grid)</span><br><span class="line">            n=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=m <span class="keyword">or</span> j&gt;=n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> grid[i][j]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            grid[i][j]=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">            dfs(grid,i+<span class="number">1</span>,j)</span><br><span class="line">            dfs(grid,i,j+<span class="number">1</span>)</span><br><span class="line">            dfs(grid,i-<span class="number">1</span>,j)</span><br><span class="line">            dfs(grid,i,j-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># 从 (i, j) 开始，将与之相邻的陆地都变成海水</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">grid,i,j</span>):</span></span><br><span class="line">            m=<span class="built_in">len</span>(grid)</span><br><span class="line">            n=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=m <span class="keyword">or</span> j&gt;=n:</span><br><span class="line">                <span class="comment"># 超出索引边界</span></span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> grid[i][j]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="comment"># 已经是海水了</span></span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="comment"># 将 (i, j) 变成海水,这里的上下左右顺序不影响结果</span></span><br><span class="line">            grid[i][j]=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">            dfs(grid,i+<span class="number">1</span>,j)</span><br><span class="line">            dfs(grid,i,j+<span class="number">1</span>)</span><br><span class="line">            dfs(grid,i-<span class="number">1</span>,j)</span><br><span class="line">            dfs(grid,i,j-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        m=<span class="built_in">len</span>(grid)</span><br><span class="line">        n=<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 遍历 grid</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 每发现一个岛屿，岛屿数量加一</span></span><br><span class="line">                    res+=<span class="number">1</span></span><br><span class="line">                    <span class="comment"># 然后使用 DFS 将岛屿淹了</span></span><br><span class="line">                    dfs(grid,i,j)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;200-Number-of-Islands-medium&quot;&gt;&lt;a href=&quot;#200-Number-of-Islands-medium&quot; class=&quot;headerlink&quot; title=&quot;200. Number of Islands(medium)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>1190. Reverse Substrings Between Each Pair of Parentheses(medium)</title>
    <link href="http://example.com/2022/11/25/1190/"/>
    <id>http://example.com/2022/11/25/1190/</id>
    <published>2022-11-26T01:28:00.000Z</published>
    <updated>2022-11-26T01:46:09.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1190-Reverse-Substrings-Between-Each-Pair-of-Parentheses-medium"><a href="#1190-Reverse-Substrings-Between-Each-Pair-of-Parentheses-medium" class="headerlink" title="1190. Reverse Substrings Between Each Pair of Parentheses(medium)"></a>1190. Reverse Substrings Between Each Pair of Parentheses(medium)</h1><h2 id="You-are-given-a-string-s-that-consists-of-lower-case-English-letters-and-brackets"><a href="#You-are-given-a-string-s-that-consists-of-lower-case-English-letters-and-brackets" class="headerlink" title="You are given a string s that consists of lower case English letters and brackets."></a>You are given a string s that consists of lower case English letters and brackets.</h2><h2 id="Reverse-the-strings-in-each-pair-of-matching-parentheses-starting-from-the-innermost-one"><a href="#Reverse-the-strings-in-each-pair-of-matching-parentheses-starting-from-the-innermost-one" class="headerlink" title="Reverse the strings in each pair of matching parentheses, starting from the innermost one."></a>Reverse the strings in each pair of matching parentheses, starting from the innermost one.</h2><h2 id="Your-result-should-not-contain-any-brackets"><a href="#Your-result-should-not-contain-any-brackets" class="headerlink" title="Your result should not contain any brackets."></a>Your result should not contain any brackets.</h2><p>一道复杂版的栈题目，在遇到多括号的情况下，需要另外设置一个字符串res去存储当前括号反转后的字符串，再存回stack<br>然后再从stack pop出下一个括号的反转字符串，存储以后再赋给stack，最后，返回stack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseParentheses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        stack=[]</span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char !=<span class="string">&quot;)&quot;</span>:</span><br><span class="line">                stack.append(char)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result=<span class="string">&quot;&quot;</span></span><br><span class="line">                current=stack.pop()</span><br><span class="line">                <span class="keyword">while</span> current!=<span class="string">&quot;(&quot;</span>:</span><br><span class="line">                    result+=current</span><br><span class="line">                    current=stack.pop()</span><br><span class="line">                <span class="keyword">for</span> char <span class="keyword">in</span> result:</span><br><span class="line">                    stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(stack)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1190-Reverse-Substrings-Between-Each-Pair-of-Parentheses-medium&quot;&gt;&lt;a href=&quot;#1190-Reverse-Substrings-Between-Each-Pair-of-Parentheses-</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>1010. Pairs of Songs With Total Durations Divisible by 60(medium)</title>
    <link href="http://example.com/2022/11/23/1010/"/>
    <id>http://example.com/2022/11/23/1010/</id>
    <published>2022-11-24T00:03:06.000Z</published>
    <updated>2022-11-24T00:11:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>You are given a list of songs where the ith song has a duration of time[i] seconds.</p><p>Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i &lt; j with (time[i] + time[j]) % 60 == 0.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: time = [30,20,150,100,40]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three pairs have a total duration divisible by 60:</span><br><span class="line">(time[0] = 30, time[2] = 150): total duration 180</span><br><span class="line">(time[1] = 20, time[3] = 100): total duration 120</span><br><span class="line">(time[1] = 20, time[4] = 40): total duration 60</span><br></pre></td></tr></table></figure><p>其实就是2sum的升级版，要求在一组数中找到和是60的倍数的两个数<br>一开始用的2sum加hashmap的思路，但发现非常麻烦<br>后来看到<a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/solutions/">题解</a>发现了数学方法：</p><p>Intuition<br>Calculate the time % 60 then it will be exactly same as two sum problem.</p><p>Explanation<br>t % 60 gets the remainder from 0 to 59.<br>We count the occurrence of each remainders in a array/hashmap c.</p><p>we want to know that, for each t,<br>how many x satisfy (t + x) % 60 = 0.</p><p>The straight forward idea is to take x % 60 = 60 - t % 60,<br>which is valid for the most cases.<br>But if t % 60 = 0, x % 60 = 0 instead of 60.</p><p>One solution is to use x % 60 = (60 - t % 60) % 60,<br>the other idea is to use x % 60 = (600 - t) % 60.<br>Not sure which one is more straight forward.</p><h4 id="这个问题的关键公式："><a href="#这个问题的关键公式：" class="headerlink" title="这个问题的关键公式："></a>这个问题的关键公式：</h4><p>假设两个数x和y的和是60的倍数则有 (x+y)%60==0<br>所以</p><h4 id="x-60-y-60-60或者x-60-y-60-0"><a href="#x-60-y-60-60或者x-60-y-60-0" class="headerlink" title="x%60+y%60==60或者x%60+y%60==0"></a>x%60+y%60==60或者x%60+y%60==0</h4><p>不得不说我从来没有想过求余的公式的展开<br>可以转换成 x % 60 = (60 - t % 60) % 60</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numPairsDivisibleBy60</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        c = [<span class="number">0</span>] * <span class="number">60</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> time:</span><br><span class="line">            res += c[-t % <span class="number">60</span>]</span><br><span class="line">            c[t % <span class="number">60</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You are given a list of songs where the ith song has a duration of time[i] seconds.&lt;/p&gt;
&lt;p&gt;Return the number of pairs of songs for which </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>45. Jump Game II(medium)</title>
    <link href="http://example.com/2022/11/22/45/"/>
    <id>http://example.com/2022/11/22/45/</id>
    <published>2022-11-23T03:36:19.000Z</published>
    <updated>2022-11-23T03:38:38.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="45-Jump-Game-II-medium"><a href="#45-Jump-Game-II-medium" class="headerlink" title="45. Jump Game II(medium)"></a>45. Jump Game II(medium)</h1><h2 id="You-are-given-a-0-indexed-array-of-integers-nums-of-length-n-You-are-initially-positioned-at-nums-0"><a href="#You-are-given-a-0-indexed-array-of-integers-nums-of-length-n-You-are-initially-positioned-at-nums-0" class="headerlink" title="You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0]."></a>You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].</h2><h2 id="Each-element-nums-i-represents-the-maximum-length-of-a-forward-jump-from-index-i-In-other-words-if-you-are-at-nums-i-you-can-jump-to-any-nums-i-j-where"><a href="#Each-element-nums-i-represents-the-maximum-length-of-a-forward-jump-from-index-i-In-other-words-if-you-are-at-nums-i-you-can-jump-to-any-nums-i-j-where" class="headerlink" title="Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:"></a>Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= j &lt;= nums[i] and</span><br><span class="line">i + j &lt; n</span><br></pre></td></tr></table></figure><h2 id="Return-the-minimum-number-of-jumps-to-reach-nums-n-1-The-test-cases-are-generated-such-that-you-can-reach-nums-n-1"><a href="#Return-the-minimum-number-of-jumps-to-reach-nums-n-1-The-test-cases-are-generated-such-that-you-can-reach-nums-n-1" class="headerlink" title="Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1]."></a>Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].</h2><p>用贪心的思想来做这道题会更节省时间<br>[3,1,4,2……]<br>比如这个例子，我们站在索引 0 的位置，可以向前跳 1，2 或 3 步</p><p>最佳的选择显然应该跳 2 步调到索引 2，因为 nums[2] 的可跳跃区域涵盖了索引区间 [3..6]，比其他的都大。</p><p>这就是思路，我们用 i 和 end 标记了可以选择的跳跃步数，farthest 标记了所有选择 [i..end] 中能够跳到的最远距离，jumps 记录跳跃次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        jumps=<span class="number">0</span></span><br><span class="line">        farthest=<span class="number">0</span></span><br><span class="line">        end=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">            farthest=<span class="built_in">max</span>(nums[i]+i,farthest)</span><br><span class="line">            <span class="keyword">if</span> end==i:</span><br><span class="line">                jumps+=<span class="number">1</span></span><br><span class="line">                end=farthest</span><br><span class="line">        <span class="keyword">return</span> jumps</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;45-Jump-Game-II-medium&quot;&gt;&lt;a href=&quot;#45-Jump-Game-II-medium&quot; class=&quot;headerlink&quot; title=&quot;45. Jump Game II(medium)&quot;&gt;&lt;/a&gt;45. Jump Game II(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="Greedy" scheme="http://example.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>22. Generate Parentheses(medium)</title>
    <link href="http://example.com/2022/11/22/22/"/>
    <id>http://example.com/2022/11/22/22/</id>
    <published>2022-11-22T21:13:39.000Z</published>
    <updated>2022-11-22T21:14:43.673Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">S,left,right</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(S)==<span class="number">2</span>*n:</span><br><span class="line">                ans.append(<span class="string">&#x27;&#x27;</span>.join(S))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left&lt;n:</span><br><span class="line">                S.append(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                backtrack(S,left+<span class="number">1</span>,right)</span><br><span class="line">                S.pop()</span><br><span class="line">            <span class="keyword">if</span> right&lt;left:</span><br><span class="line">                S.append(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                backtrack(S,left,right+<span class="number">1</span>)</span><br><span class="line">                S.pop()</span><br><span class="line">        backtrack([],<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="backtracking" scheme="http://example.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>279. Perfect Squares(medium)</title>
    <link href="http://example.com/2022/11/22/279/"/>
    <id>http://example.com/2022/11/22/279/</id>
    <published>2022-11-22T20:49:44.000Z</published>
    <updated>2022-11-22T21:14:52.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="279-Perfect-Squares-medium"><a href="#279-Perfect-Squares-medium" class="headerlink" title="279. Perfect Squares(medium)"></a>279. Perfect Squares(medium)</h1><h2 id="Given-an-integer-n-return-the-least-number-of-perfect-square-numbers-that-sum-to-n"><a href="#Given-an-integer-n-return-the-least-number-of-perfect-square-numbers-that-sum-to-n" class="headerlink" title="Given an integer n, return the least number of perfect square numbers that sum to n."></a>Given an integer n, return the least number of perfect square numbers that sum to n.</h2><h2 id="A-perfect-square-is-an-integer-that-is-the-square-of-an-integer-in-other-words-it-is-the-product-of-some-integer-with-itself-For-example-1-4-9-and-16-are-perfect-squares-while-3-and-11-are-not"><a href="#A-perfect-square-is-an-integer-that-is-the-square-of-an-integer-in-other-words-it-is-the-product-of-some-integer-with-itself-For-example-1-4-9-and-16-are-perfect-squares-while-3-and-11-are-not" class="headerlink" title="A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not."></a>A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 12</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 12 = 4 + 4 + 4.</span><br></pre></td></tr></table></figure><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/perfect-squares/solution/dong-tai-gui-hua-bfs-zhu-xing-jie-shi-python3-by-2/">leetcode题解</a></h2><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        dp=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(i**(<span class="number">0.5</span>))+<span class="number">1</span>):</span><br><span class="line">                dp[i]=<span class="built_in">min</span>(dp[i],dp[i-j*j]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BFS方法"><a href="#BFS方法" class="headerlink" title="BFS方法"></a><a href="https://leetcode.cn/problems/perfect-squares/solution/python3zui-ji-chu-de-bfstao-lu-dai-ma-gua-he-ru-me/">BFS方法</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value,step=<span class="number">0</span></span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.step = step</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;value:&#123;&#125;, step:&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(self.value,self.step)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        queue = [node(n)]</span><br><span class="line">        visited = <span class="built_in">set</span>([node(n).value])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">            residuals = [vertex.value - n*n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(vertex.value**<span class="number">.5</span>)+<span class="number">1</span>)]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> residuals:</span><br><span class="line">                new_vertex = node(i, vertex.step+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span>:                   </span><br><span class="line">                    <span class="keyword">return</span> new_vertex.step</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">elif</span> i <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    queue.append(new_vertex)</span><br><span class="line">                    visited.add(i)</span><br><span class="line">                                        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;279-Perfect-Squares-medium&quot;&gt;&lt;a href=&quot;#279-Perfect-Squares-medium&quot; class=&quot;headerlink&quot; title=&quot;279. Perfect Squares(medium)&quot;&gt;&lt;/a&gt;279. P</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="BFS" scheme="http://example.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>541. Reverse String II(easy)</title>
    <link href="http://example.com/2022/11/21/541/"/>
    <id>http://example.com/2022/11/21/541/</id>
    <published>2022-11-21T21:53:36.000Z</published>
    <updated>2022-11-22T00:28:24.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="541-Reverse-String-II-easy"><a href="#541-Reverse-String-II-easy" class="headerlink" title="541. Reverse String II(easy)"></a>541. Reverse String II(easy)</h1><h2 id="Given-a-string-s-and-an-integer-k-reverse-the-first-k-characters-for-every-2k-characters-counting-from-the-start-of-the-string"><a href="#Given-a-string-s-and-an-integer-k-reverse-the-first-k-characters-for-every-2k-characters-counting-from-the-start-of-the-string" class="headerlink" title="Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string."></a>Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.</h2><h2 id="If-there-are-fewer-than-k-characters-left-reverse-all-of-them-If-there-are-less-than-2k-but-greater-than-or-equal-to-k-characters-then-reverse-the-first-k-characters-and-leave-the-other-as-original"><a href="#If-there-are-fewer-than-k-characters-left-reverse-all-of-them-If-there-are-less-than-2k-but-greater-than-or-equal-to-k-characters-then-reverse-the-first-k-characters-and-leave-the-other-as-original" class="headerlink" title="If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original."></a>If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">Output: &quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/reverse-string-ii/solution/fan-zhuan-zi-fu-chuan-ii-by-leetcode-sol-ua7s/">官方题解</a></h3><p>官方题解太简单了，思路非常简单，就是i到i+k的字母翻转就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseStr</span>(<span class="params">self, s: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        t = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(t), <span class="number">2</span> * k):</span><br><span class="line">            t[i: i + k] = <span class="built_in">reversed</span>(t[i: i + k])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(t)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;541-Reverse-String-II-easy&quot;&gt;&lt;a href=&quot;#541-Reverse-String-II-easy&quot; class=&quot;headerlink&quot; title=&quot;541. Reverse String II(easy)&quot;&gt;&lt;/a&gt;541. R</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="list" scheme="http://example.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>557. Reverse Words in a String III(easy)</title>
    <link href="http://example.com/2022/11/21/557/"/>
    <id>http://example.com/2022/11/21/557/</id>
    <published>2022-11-21T21:25:37.000Z</published>
    <updated>2022-11-21T21:27:38.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="557-Reverse-Words-in-a-String-III-easy"><a href="#557-Reverse-Words-in-a-String-III-easy" class="headerlink" title="557. Reverse Words in a String III(easy)"></a>557. Reverse Words in a String III(easy)</h1><h2 id="Given-a-string-s-reverse-the-order-of-characters-in-each-word-within-a-sentence-while-still-preserving-whitespace-and-initial-word-order"><a href="#Given-a-string-s-reverse-the-order-of-characters-in-each-word-within-a-sentence-while-still-preserving-whitespace-and-initial-word-order" class="headerlink" title="Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order."></a>Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;Let&#x27;s take LeetCode contest&quot;</span><br><span class="line">Output: &quot;s&#x27;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure><p>题目本身倒不难，就是输出的字符串形式相对麻烦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        s=<span class="built_in">list</span>(s.split())</span><br><span class="line">        res=[]</span><br><span class="line">        ans=[]</span><br><span class="line">        stack=[]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> c:</span><br><span class="line">                res.append(stack.pop())</span><br><span class="line">            ans.append(<span class="string">&quot;&quot;</span>.join(res))</span><br><span class="line">            stack=[]</span><br><span class="line">            res=[]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;557-Reverse-Words-in-a-String-III-easy&quot;&gt;&lt;a href=&quot;#557-Reverse-Words-in-a-String-III-easy&quot; class=&quot;headerlink&quot; title=&quot;557. Reverse Wor</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>696. Count Binary Substrings(easy)</title>
    <link href="http://example.com/2022/11/21/696/"/>
    <id>http://example.com/2022/11/21/696/</id>
    <published>2022-11-21T20:57:28.000Z</published>
    <updated>2022-11-21T21:28:58.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-a-binary-string-s-return-the-number-of-non-empty-substrings-that-have-the-same-number-of-0’s-and-1’s-and-all-the-0’s-and-all-the-1’s-in-these-substrings-are-grouped-consecutively"><a href="#Given-a-binary-string-s-return-the-number-of-non-empty-substrings-that-have-the-same-number-of-0’s-and-1’s-and-all-the-0’s-and-all-the-1’s-in-these-substrings-are-grouped-consecutively" class="headerlink" title="Given a binary string s, return the number of non-empty substrings that have the same number of 0’s and 1’s, and all the 0’s and all the 1’s in these substrings are grouped consecutively."></a>Given a binary string s, return the number of non-empty substrings that have the same number of 0’s and 1’s, and all the 0’s and all the 1’s in these substrings are grouped consecutively.</h2><h2 id="Substrings-that-occur-multiple-times-are-counted-the-number-of-times-they-occur"><a href="#Substrings-that-occur-multiple-times-are-counted-the-number-of-times-they-occur" class="headerlink" title="Substrings that occur multiple times are counted the number of times they occur."></a>Substrings that occur multiple times are counted the number of times they occur.</h2><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/count-binary-substrings/solution/ji-shu-er-jin-zhi-zi-chuan-by-leetcode-solution/">官方题解</a></h2><p>看到该题的第一反应是位运算，但是没有想好该怎么解。但其实根本没有那么复杂：<br>我们可以将字符串 s 按照 0 和 1 的连续段分组，存在 counts 数组中，例如 s = 00111011，可以得到这样的 counts 数组：counts={2,3,1,2}。</p><p>这里 counts 数组中两个相邻的数一定代表的是两种不同的字符。假设 counts 数组中两个相邻的数字为 u 或者 v，它们对应着 u 个 0 和 v 个 1，或者 u 个 1 和 v 个 0。它们能组成的满足条件的子串数目为 min{u,v}，即一对相邻的数字对答案的贡献。</p><p>我们只要遍历所有相邻的数对，求它们的贡献总和，即可得到答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBinarySubstrings</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        last=<span class="number">0</span></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;n:</span><br><span class="line">            c=s[i]</span><br><span class="line">            count=<span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i&lt;n <span class="keyword">and</span> s[i]==c:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">            ans +=<span class="built_in">min</span>(count,last)</span><br><span class="line">            last=count</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-a-binary-string-s-return-the-number-of-non-empty-substrings-that-have-the-same-number-of-0’s-and-1’s-and-all-the-0’s-and-all-t</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>599. Minimum Index Sum of Two Lists(easy)</title>
    <link href="http://example.com/2022/11/21/599/"/>
    <id>http://example.com/2022/11/21/599/</id>
    <published>2022-11-21T20:34:31.000Z</published>
    <updated>2022-11-21T20:38:43.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="599-Minimum-Index-Sum-of-Two-Lists-easy"><a href="#599-Minimum-Index-Sum-of-Two-Lists-easy" class="headerlink" title="599. Minimum Index Sum of Two Lists(easy)"></a>599. Minimum Index Sum of Two Lists(easy)</h1><h2 id="Given-two-arrays-of-strings-list1-and-list2-find-the-common-strings-with-the-least-index-sum"><a href="#Given-two-arrays-of-strings-list1-and-list2-find-the-common-strings-with-the-least-index-sum" class="headerlink" title="Given two arrays of strings list1 and list2, find the common strings with the least index sum."></a>Given two arrays of strings list1 and list2, find the common strings with the least index sum.</h2><h2 id="A-common-string-is-a-string-that-appeared-in-both-list1-and-list2"><a href="#A-common-string-is-a-string-that-appeared-in-both-list1-and-list2" class="headerlink" title="A common string is a string that appeared in both list1 and list2."></a>A common string is a string that appeared in both list1 and list2.</h2><h2 id="A-common-string-with-the-least-index-sum-is-a-common-string-such-that-if-it-appeared-at-list1-i-and-list2-j-then-i-j-should-be-the-minimum-value-among-all-the-other-common-strings"><a href="#A-common-string-with-the-least-index-sum-is-a-common-string-such-that-if-it-appeared-at-list1-i-and-list2-j-then-i-j-should-be-the-minimum-value-among-all-the-other-common-strings" class="headerlink" title="A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings."></a>A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.</h2><h2 id="Return-all-the-common-strings-with-the-least-index-sum-Return-the-answer-in-any-order"><a href="#Return-all-the-common-strings-with-the-least-index-sum-Return-the-answer-in-any-order" class="headerlink" title="Return all the common strings with the least index sum. Return the answer in any order."></a>Return all the common strings with the least index sum. Return the answer in any order.</h2><p>先找出两个list相同的字符，再记录下最小的数值，然后用hashmap找到对应的字符</p><pre><code class="python">class Solution:    def findRestaurant(self, list1: List[str], list2: List[str]) -&gt; List[str]:        ans=[]        d=&#123;&#125;        for i in range(len(list1)):            if list1[i] in list2:                d[list1[i]]=i+list2.index(list1[i])        min_index=min(d.values())        res=[]        for i in d:            if d[i]==min_index:                res.append(i)        return res        </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;599-Minimum-Index-Sum-of-Two-Lists-easy&quot;&gt;&lt;a href=&quot;#599-Minimum-Index-Sum-of-Two-Lists-easy&quot; class=&quot;headerlink&quot; title=&quot;599. Minimum I</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>917. Reverse Only Letters(easy)</title>
    <link href="http://example.com/2022/11/21/917/"/>
    <id>http://example.com/2022/11/21/917/</id>
    <published>2022-11-21T20:10:44.000Z</published>
    <updated>2022-11-21T21:13:30.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="917-Reverse-Only-Letters-easy"><a href="#917-Reverse-Only-Letters-easy" class="headerlink" title="917. Reverse Only Letters(easy)"></a>917. Reverse Only Letters(easy)</h1><h2 id="Given-a-string-s-reverse-the-string-according-to-the-following-rules"><a href="#Given-a-string-s-reverse-the-string-according-to-the-following-rules" class="headerlink" title="Given a string s, reverse the string according to the following rules:"></a>Given a string s, reverse the string according to the following rules:</h2><h2 id="All-the-characters-that-are-not-English-letters-remain-in-the-same-position"><a href="#All-the-characters-that-are-not-English-letters-remain-in-the-same-position" class="headerlink" title="All the characters that are not English letters remain in the same position."></a>All the characters that are not English letters remain in the same position.</h2><h2 id="All-the-English-letters-lowercase-or-uppercase-should-be-reversed"><a href="#All-the-English-letters-lowercase-or-uppercase-should-be-reversed" class="headerlink" title="All the English letters (lowercase or uppercase) should be reversed."></a>All the English letters (lowercase or uppercase) should be reversed.</h2><h2 id="Return-s-after-reversing-it"><a href="#Return-s-after-reversing-it" class="headerlink" title="Return s after reversing it."></a>Return s after reversing it.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;ab-cd&quot;</span><br><span class="line">Output: &quot;dc-ba&quot;</span><br></pre></td></tr></table></figure><p>stack用在这里正好，字母存进栈，等识别到符号就放符号，不是符号就pop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseOnlyLetters</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        letters=[c <span class="keyword">for</span> c <span class="keyword">in</span> s <span class="keyword">if</span> c.isalpha()]</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c.isalpha():</span><br><span class="line">                ans.append(letters.pop())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;917-Reverse-Only-Letters-easy&quot;&gt;&lt;a href=&quot;#917-Reverse-Only-Letters-easy&quot; class=&quot;headerlink&quot; title=&quot;917. Reverse Only Letters(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>598. Range Addition II(easy)</title>
    <link href="http://example.com/2022/11/21/598/"/>
    <id>http://example.com/2022/11/21/598/</id>
    <published>2022-11-21T16:44:20.000Z</published>
    <updated>2022-11-21T16:45:25.032Z</updated>
    
    <content type="html"><![CDATA[<p>You are given an m x n matrix M initialized with all 0’s and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 &lt;= x &lt; ai and 0 &lt;= y &lt; bi.</p><p>Count and return the number of maximum integers in the matrix after performing all the operations.</p><pre><code class="python">class Solution:    def maxCount(self, m: int, n: int, ops: List[List[int]]) -&gt; int:        mina, minb = m, n        for a, b in ops:            mina = min(mina, a)            minb = min(minb, b)        return mina * minb</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You are given an m x n matrix M initialized with all 0’s and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>709. To Lower Case(easy)</title>
    <link href="http://example.com/2022/11/21/709/"/>
    <id>http://example.com/2022/11/21/709/</id>
    <published>2022-11-21T16:21:16.000Z</published>
    <updated>2022-11-21T16:45:34.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="709-To-Lower-Case-easy"><a href="#709-To-Lower-Case-easy" class="headerlink" title="709. To Lower Case(easy)"></a>709. To Lower Case(easy)</h1><h2 id="Given-a-string-s-return-the-string-after-replacing-every-uppercase-letter-with-the-same-lowercase-letter"><a href="#Given-a-string-s-return-the-string-after-replacing-every-uppercase-letter-with-the-same-lowercase-letter" class="headerlink" title="Given a string s, return the string after replacing every uppercase letter with the same lowercase letter."></a>Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s.lower()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;709-To-Lower-Case-easy&quot;&gt;&lt;a href=&quot;#709-To-Lower-Case-easy&quot; class=&quot;headerlink&quot; title=&quot;709. To Lower Case(easy)&quot;&gt;&lt;/a&gt;709. To Lower Case</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>222. Count Complete Tree Nodes(medium)</title>
    <link href="http://example.com/2022/11/16/222/"/>
    <id>http://example.com/2022/11/16/222/</id>
    <published>2022-11-17T04:39:29.000Z</published>
    <updated>2022-11-18T03:48:00.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="222-Count-Complete-Tree-Nodes-medium"><a href="#222-Count-Complete-Tree-Nodes-medium" class="headerlink" title="222. Count Complete Tree Nodes(medium)"></a>222. Count Complete Tree Nodes(medium)</h1><h2 id="Given-the-root-of-a-complete-binary-tree-return-the-number-of-the-nodes-in-the-tree"><a href="#Given-the-root-of-a-complete-binary-tree-return-the-number-of-the-nodes-in-the-tree" class="headerlink" title="Given the root of a complete binary tree, return the number of the nodes in the tree."></a>Given the root of a complete binary tree, return the number of the nodes in the tree.</h2><h2 id="According-to-Wikipedia-every-level-except-possibly-the-last-is-completely-filled-in-a-complete-binary-tree-and-all-nodes-in-the-last-level-are-as-far-left-as-possible-It-can-have-between-1-and-2h-nodes-inclusive-at-the-last-level-h"><a href="#According-to-Wikipedia-every-level-except-possibly-the-last-is-completely-filled-in-a-complete-binary-tree-and-all-nodes-in-the-last-level-are-as-far-left-as-possible-It-can-have-between-1-and-2h-nodes-inclusive-at-the-last-level-h" class="headerlink" title="According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h."></a>According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</h2><h2 id="Design-an-algorithm-that-runs-in-less-than-O-n-time-complexity"><a href="#Design-an-algorithm-that-runs-in-less-than-O-n-time-complexity" class="headerlink" title="Design an algorithm that runs in less than O(n) time complexity."></a>Design an algorithm that runs in less than O(n) time complexity.</h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><h2 id="wiki"><a href="#wiki" class="headerlink" title="wiki:"></a>wiki:</h2><h4 id="完全二叉树-Complete-Binary-Tree-："><a href="#完全二叉树-Complete-Binary-Tree-：" class="headerlink" title="完全二叉树 (Complete Binary Tree)："></a>完全二叉树 (Complete Binary Tree)：</h4><p>A Complete Binary Tree （CBT) is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p><p>对于一颗二叉树，假设其深度为d（d&gt;1）。除了第d层外，其它各层的节点数目均已达最大值，且第d层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树；</p><p>换句话说，完全二叉树从根结点到倒数第二层满足完美二叉树，最后一层可以不完全填充，其叶子结点都靠左对齐。</p><h4 id="完美二叉树-Perfect-Binary-Tree-："><a href="#完美二叉树-Perfect-Binary-Tree-：" class="headerlink" title="完美二叉树 (Perfect Binary Tree)："></a>完美二叉树 (Perfect Binary Tree)：</h4><p>A Perfect Binary Tree(PBT) is a tree with all leaf nodes at the same depth. All internal nodes have degree 2.</p><p>二叉树的第i层至多拥有 2^{i-1} 个节点数；深度为k的二叉树至多总共有 {\displaystyle 2^{\begin{aligned}k+1\end{aligned}}-1} 个节点数，而总计拥有节点数匹配的，称为“满二叉树”；</p><h4 id="完满二叉树-Full-Binary-Tree"><a href="#完满二叉树-Full-Binary-Tree" class="headerlink" title="完满二叉树 (Full Binary Tree):"></a>完满二叉树 (Full Binary Tree):</h4><p>A Full Binary Tree (FBT) is a tree in which every node other than the leaves has two children.</p><p>换句话说，所有非叶子结点的度都是2。（只要你有孩子，你就必然是有两个孩子。）</p><p><a href="https://www.cnblogs.com/grandyang/p/4567827.html">思路</a><br>我们还是要来利用一下完全二叉树这个条件，不然感觉对出题者不太尊重。<br>通过上面对完全二叉树跟完美二叉树的定义比较，可以看出二者的关系是，完美二叉树一定是完全二叉树，而完全二叉树不一定是完美二叉树。<br>那么这道题给的完全二叉树就有可能是完美二叉树，若是完美二叉树，节点个数很好求，为2的h次方减1，h为该完美二叉树的高度。若不是的话，只能老老实实的一个一个数结点了。<br>思路是由 root 根结点往下，分别找最靠左边和最靠右边的路径长度，如果长度相等，则证明二叉树最后一层节点是满的，是满二叉树，直接返回节点个数，如果不相等，则节点个数为左子树的节点个数加上右子树的节点个数再加1(根节点)，其中左右子树节点个数的计算可以使用递归来计算，参见代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNodes</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        hLeft=<span class="number">0</span></span><br><span class="line">        hRight=<span class="number">0</span></span><br><span class="line">        pLeft=root</span><br><span class="line">        pRight=root</span><br><span class="line">        <span class="keyword">while</span> pLeft:</span><br><span class="line">            hLeft+=<span class="number">1</span></span><br><span class="line">            pLeft=pLeft.left</span><br><span class="line">        <span class="keyword">while</span> pRight:</span><br><span class="line">            hRight+=<span class="number">1</span></span><br><span class="line">            pRight=pRight.right</span><br><span class="line">        <span class="keyword">if</span> hLeft==hRight:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,hLeft)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.countNodes(root.left)+self.countNodes(root.right)+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;222-Count-Complete-Tree-Nodes-medium&quot;&gt;&lt;a href=&quot;#222-Count-Complete-Tree-Nodes-medium&quot; class=&quot;headerlink&quot; title=&quot;222. Count Complete </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="binary tree" scheme="http://example.com/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>354. Russian Doll Envelopes(hard)</title>
    <link href="http://example.com/2022/11/16/354/"/>
    <id>http://example.com/2022/11/16/354/</id>
    <published>2022-11-17T04:29:21.000Z</published>
    <updated>2022-11-18T03:48:09.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="354-Russian-Doll-Envelopes-hard"><a href="#354-Russian-Doll-Envelopes-hard" class="headerlink" title="354. Russian Doll Envelopes(hard)"></a>354. Russian Doll Envelopes(hard)</h1><p>You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.</p><p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope’s width and height.</p><p>Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).</p><p>Note: You cannot rotate an envelope.</p><p>这道题和300. Longest Increasing Subsequence(medium)属于类似问题，只不过该问题把维度升到二维了，先对宽度 w 进行升序排序，如果遇到 w 相同的情况，则按照高度 h 降序排序；之后把所有的 h 作为一个数组，在这个数组上计算 LIS 的长度就是答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxEnvelopes</span>(<span class="params">self, envelopes: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> envelopes:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(envelopes)</span><br><span class="line">        envelopes.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], -x[<span class="number">1</span>]))<span class="comment">#w升序排列，h降序排列</span></span><br><span class="line">        arr=[envelopes[<span class="number">0</span>][<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> envelopes[i][<span class="number">1</span>]&gt;arr[-<span class="number">1</span>]:</span><br><span class="line">                arr.append(envelopes[i][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> envelopes[i][<span class="number">1</span>]&lt;arr[-<span class="number">1</span>]:</span><br><span class="line">                left,right=<span class="number">0</span>,n-<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> left&lt;right:</span><br><span class="line">                    mid=left+(right-left)//<span class="number">2</span> <span class="comment">#这里用mid=(left+right)//2 会超范围</span></span><br><span class="line">                    <span class="keyword">if</span> arr[mid]&gt;=envelopes[i][<span class="number">1</span>]:</span><br><span class="line">                        right=mid</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        left=mid+<span class="number">1</span></span><br><span class="line">                arr[left]=envelopes[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;354-Russian-Doll-Envelopes-hard&quot;&gt;&lt;a href=&quot;#354-Russian-Doll-Envelopes-hard&quot; class=&quot;headerlink&quot; title=&quot;354. Russian Doll Envelopes(ha</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>521. Longest Uncommon Subsequence I(easy)</title>
    <link href="http://example.com/2022/11/16/521/"/>
    <id>http://example.com/2022/11/16/521/</id>
    <published>2022-11-16T21:43:24.000Z</published>
    <updated>2022-11-18T04:12:05.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="521-Longest-Uncommon-Subsequence-I-easy"><a href="#521-Longest-Uncommon-Subsequence-I-easy" class="headerlink" title="521. Longest Uncommon Subsequence I(easy)"></a>521. Longest Uncommon Subsequence I(easy)</h1><h2 id="Given-two-strings-a-and-b-return-the-length-of-the-longest-uncommon-subsequence-between-a-and-b-If-the-longest-uncommon-subsequence-does-not-exist-return-1"><a href="#Given-two-strings-a-and-b-return-the-length-of-the-longest-uncommon-subsequence-between-a-and-b-If-the-longest-uncommon-subsequence-does-not-exist-return-1" class="headerlink" title="Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1."></a>Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.</h2><h2 id="An-uncommon-subsequence-between-two-strings-is-a-string-that-is-a-subsequence-of-one-but-not-the-other"><a href="#An-uncommon-subsequence-between-two-strings-is-a-string-that-is-a-subsequence-of-one-but-not-the-other" class="headerlink" title="An uncommon subsequence between two strings is a string that is a subsequence of one but not the other."></a>An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.</h2><h2 id="A-subsequence-of-a-string-s-is-a-string-that-can-be-obtained-after-deleting-any-number-of-characters-from-s"><a href="#A-subsequence-of-a-string-s-is-a-string-that-can-be-obtained-after-deleting-any-number-of-characters-from-s" class="headerlink" title="A subsequence of a string s is a string that can be obtained after deleting any number of characters from s."></a>A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.</h2><h2 id="For-example-“abc”-is-a-subsequence-of-“aebdc”-because-you-can-delete-the-underlined-characters-in-“aebdc”-to-get-“abc”-Other-subsequences-of-“aebdc”-include-“aebdc”-“aeb”-and-“”-empty-string"><a href="#For-example-“abc”-is-a-subsequence-of-“aebdc”-because-you-can-delete-the-underlined-characters-in-“aebdc”-to-get-“abc”-Other-subsequences-of-“aebdc”-include-“aebdc”-“aeb”-and-“”-empty-string" class="headerlink" title="For example, “abc” is a subsequence of “aebdc” because you can delete the underlined characters in “aebdc” to get “abc”. Other subsequences of “aebdc” include “aebdc”, “aeb”, and “” (empty string)."></a>For example, “abc” is a subsequence of “aebdc” because you can delete the underlined characters in “aebdc” to get “abc”. Other subsequences of “aebdc” include “aebdc”, “aeb”, and “” (empty string).</h2><p>这道题很唬人啊，我一开始以为是双指针两个字符串不断比较，后来发现，只需要判断一点即可，如果字符串a和b相同，那么返回-1<br>如果不相同，最大的不同子字符串就是最长的那个字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLUSlength</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> a==b:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">len</span>(a),<span class="built_in">len</span>(b))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;521-Longest-Uncommon-Subsequence-I-easy&quot;&gt;&lt;a href=&quot;#521-Longest-Uncommon-Subsequence-I-easy&quot; class=&quot;headerlink&quot; title=&quot;521. Longest U</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>520. Detect Capital(easy)</title>
    <link href="http://example.com/2022/11/16/520/"/>
    <id>http://example.com/2022/11/16/520/</id>
    <published>2022-11-16T21:29:16.000Z</published>
    <updated>2022-11-18T04:12:02.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="520-Detect-Capital-easy"><a href="#520-Detect-Capital-easy" class="headerlink" title="520. Detect Capital(easy)"></a>520. Detect Capital(easy)</h1><p>We define the usage of capitals in a word to be right when one of the following cases holds:</p><p>All letters in this word are capitals, like “USA”.<br>All letters in this word are not capitals, like “leetcode”.<br>Only the first letter in this word is capital, like “Google”.<br>Given a string word, return true if the usage of capitals in it is right.</p><p>分几种情况讨论，然后用到了isupper()和islower()两个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCapitalUse</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(word)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> word.isupper():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> word.islower():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> word[<span class="number">0</span>].isupper():</span><br><span class="line">            <span class="keyword">if</span> word[<span class="number">1</span>:].islower():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;520-Detect-Capital-easy&quot;&gt;&lt;a href=&quot;#520-Detect-Capital-easy&quot; class=&quot;headerlink&quot; title=&quot;520. Detect Capital(easy)&quot;&gt;&lt;/a&gt;520. Detect Cap</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
</feed>
