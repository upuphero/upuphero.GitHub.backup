<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-07T22:35:29.536Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>938. Range Sum of BST(easy)</title>
    <link href="http://example.com/2022/12/07/938/"/>
    <id>http://example.com/2022/12/07/938/</id>
    <published>2022-12-07T22:33:08.000Z</published>
    <updated>2022-12-07T22:35:29.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="938-Range-Sum-of-BST-easy"><a href="#938-Range-Sum-of-BST-easy" class="headerlink" title="938. Range Sum of BST(easy)"></a>938. Range Sum of BST(easy)</h1><p>Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].</p><h3 id="leetcode官方题解"><a href="#leetcode官方题解" class="headerlink" title="leetcode官方题解"></a><a href="https://leetcode.com/problems/range-sum-of-bst/solutions/192077/range-sum-of-bst/">leetcode官方题解</a></h3><p>我们使用深度优先搜索遍历树。如果超出范围，（例如），那么我们知道只有正确的分支才能有内部有值的节点</p><p>For the recursive and iterative implementations, we are performing a DFS (Depth-First Search) traversal. The recursive solution requries additional space to maintain the function call stack while the iterative solution requires additional space to maintain the stack. In both implementations, the worst-case scenario occurs when the tree is is of chain shape, and we will reach all the way down to the leaf node. In this case, the space required for the stack is O(N)O(N)O(N).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rangeSumBST</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode], low: <span class="hljs-built_in">int</span>, high: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">node</span>):</span><br>            <span class="hljs-keyword">nonlocal</span> ans<br>            <span class="hljs-keyword">if</span> node:<br>                <span class="hljs-keyword">if</span> low &lt;= node.val &lt;= high:<br>                    ans += node.val<br>                <span class="hljs-keyword">if</span> low &lt; node.val:<br>                    dfs(node.left)<br>                <span class="hljs-keyword">if</span> node.val &lt; high:<br>                    dfs(node.right)<br><br>        ans = <span class="hljs-number">0</span><br>        dfs(root)<br>        <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;938-Range-Sum-of-BST-easy&quot;&gt;&lt;a href=&quot;#938-Range-Sum-of-BST-easy&quot; class=&quot;headerlink&quot; title=&quot;938. Range Sum of BST(easy)&quot;&gt;&lt;/a&gt;938. Rang</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="DFS" scheme="http://example.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>1154. Day of the Year</title>
    <link href="http://example.com/2022/12/06/1154/"/>
    <id>http://example.com/2022/12/06/1154/</id>
    <published>2022-12-06T16:43:01.000Z</published>
    <updated>2022-12-08T01:32:32.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1154-Day-of-the-Year"><a href="#1154-Day-of-the-Year" class="headerlink" title="1154. Day of the Year"></a>1154. Day of the Year</h1><p>Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.</p><p>计算日期月份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> calendar <span class="hljs-keyword">import</span> monthrange<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dayOfYear</span>(<span class="hljs-params">self, date</span>):</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numberDaysInMonth</span>(<span class="hljs-params">Y, M</span>):</span><br>            <span class="hljs-keyword">return</span> monthrange(Y, M)[<span class="hljs-number">1</span>]<br><br>        year, month, day = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, date.split(<span class="hljs-string">&quot;-&quot;</span>))<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, month):<br>            res += numberDaysInMonth(year, i)<br>        <span class="hljs-keyword">return</span> res + day<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1154-Day-of-the-Year&quot;&gt;&lt;a href=&quot;#1154-Day-of-the-Year&quot; class=&quot;headerlink&quot; title=&quot;1154. Day of the Year&quot;&gt;&lt;/a&gt;1154. Day of the Year&lt;/h1</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="date" scheme="http://example.com/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>2303. Calculate Amount Paid in Taxes(easy)</title>
    <link href="http://example.com/2022/12/06/2303/"/>
    <id>http://example.com/2022/12/06/2303/</id>
    <published>2022-12-06T16:41:02.000Z</published>
    <updated>2022-12-06T16:41:49.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2303-Calculate-Amount-Paid-in-Taxes-easy"><a href="#2303-Calculate-Amount-Paid-in-Taxes-easy" class="headerlink" title="2303. Calculate Amount Paid in Taxes(easy)"></a>2303. Calculate Amount Paid in Taxes(easy)</h1><p>You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 &lt; upperi for 0 &lt; i &lt; brackets.length).</p><p>Tax is calculated as follows:</p><p>The first upper0 dollars earned are taxed at a rate of percent0.<br>The next upper1 - upper0 dollars earned are taxed at a rate of percent1.<br>The next upper2 - upper1 dollars earned are taxed at a rate of percent2.<br>And so on.<br>You are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calculateTax</span>(<span class="hljs-params">self, brackets: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], income: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">float</span>:</span><br>        brackets.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        res = <span class="hljs-number">0</span> <span class="hljs-comment"># Total Tax </span><br>        prev = <span class="hljs-number">0</span> <span class="hljs-comment"># Prev Bracket Upperbound</span><br>        <span class="hljs-keyword">for</span> u, p <span class="hljs-keyword">in</span> brackets:<br>            <span class="hljs-keyword">if</span> income &gt;= u: <span class="hljs-comment"># </span><br>                res += ((u-prev) * p) / <span class="hljs-number">100</span><br>                prev = u<br>            <span class="hljs-keyword">else</span>:<br>                res += ((income-prev) * p) / <span class="hljs-number">100</span><br>                <span class="hljs-keyword">break</span> <span class="hljs-comment"># As total income has been taxed at this point.</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2303-Calculate-Amount-Paid-in-Taxes-easy&quot;&gt;&lt;a href=&quot;#2303-Calculate-Amount-Paid-in-Taxes-easy&quot; class=&quot;headerlink&quot; title=&quot;2303. Calcul</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>530. Minimum Absolute Difference in BST(easy)</title>
    <link href="http://example.com/2022/12/06/530/"/>
    <id>http://example.com/2022/12/06/530/</id>
    <published>2022-12-06T16:38:41.000Z</published>
    <updated>2022-12-06T16:39:22.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="530-Minimum-Absolute-Difference-in-BST-easy"><a href="#530-Minimum-Absolute-Difference-in-BST-easy" class="headerlink" title="530. Minimum Absolute Difference in BST(easy)"></a>530. Minimum Absolute Difference in BST(easy)</h1><p>Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.left = left</span><br><span class="hljs-comment">#         self.right = right</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMinimumDifference</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        res = []<br>        self.inorder(root, res)<br>        slow = <span class="hljs-number">0</span><br>        fast = <span class="hljs-number">1</span><br>        min_diff = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>        <span class="hljs-keyword">while</span> fast &lt; <span class="hljs-built_in">len</span>(res):<br>            min_diff = <span class="hljs-built_in">min</span>(min_diff, res[fast]-res[slow])<br>            slow += <span class="hljs-number">1</span><br>            fast += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> min_diff<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inorder</span>(<span class="hljs-params">self, root, res</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br>        self.inorder(root.left, res)<br>        res.append(root.val)<br>        self.inorder(root.right, res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;530-Minimum-Absolute-Difference-in-BST-easy&quot;&gt;&lt;a href=&quot;#530-Minimum-Absolute-Difference-in-BST-easy&quot; class=&quot;headerlink&quot; title=&quot;530. M</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Tree" scheme="http://example.com/tags/Tree/"/>
    
    <category term="BST" scheme="http://example.com/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>561. Array Partition(easy)</title>
    <link href="http://example.com/2022/12/06/561/"/>
    <id>http://example.com/2022/12/06/561/</id>
    <published>2022-12-06T16:11:22.000Z</published>
    <updated>2022-12-06T16:13:26.634Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), …, (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.</p><p>一道找规律的题，找两两分组以后的最小值的最大和，那么直接先对数组排序，最小的值排在一起，大的排在一起，最后求和的时候只取第0个第2个第4个……最后输出最大和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">arrayPairSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        nums.sort()<br>        count=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums),<span class="hljs-number">2</span>):<br>            count+=nums[i]<br>        <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), …, (an, bn) such that the sum of min(ai</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>551. Student Attendance Record I(easy)</title>
    <link href="http://example.com/2022/12/06/551/"/>
    <id>http://example.com/2022/12/06/551/</id>
    <published>2022-12-06T16:02:58.000Z</published>
    <updated>2022-12-06T16:06:12.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="551-Student-Attendance-Record-I-easy"><a href="#551-Student-Attendance-Record-I-easy" class="headerlink" title="551. Student Attendance Record I(easy)"></a>551. Student Attendance Record I(easy)</h1><p>You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p><p>‘A’: Absent.<br>‘L’: Late.<br>‘P’: Present.<br>The student is eligible for an attendance award if they meet both of the following criteria:</p><p>The student was absent (‘A’) for strictly fewer than 2 days total.<br>The student was never late (‘L’) for 3 or more consecutive days.<br>Return true if the student is eligible for an attendance award, or false otherwise.</p><p>就是循环以后加判断，连续三天迟到就是如果下一个不是迟到，将计数器清零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkRecord</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        countA=<span class="hljs-number">0</span><br>        countL=<span class="hljs-number">0</span><br>        countP=<span class="hljs-number">0</span><br>        left=<span class="hljs-number">0</span><br>        right=left+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[i]==<span class="hljs-string">&#x27;A&#x27;</span>:<br>                countA+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> countA&gt;<span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> s[i]==<span class="hljs-string">&#x27;L&#x27;</span>:<br>                countL+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> countL&gt;=<span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                countL=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>       <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;551-Student-Attendance-Record-I-easy&quot;&gt;&lt;a href=&quot;#551-Student-Attendance-Record-I-easy&quot; class=&quot;headerlink&quot; title=&quot;551. Student Attenda</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>46. Permutations(medium)</title>
    <link href="http://example.com/2022/12/05/46/"/>
    <id>http://example.com/2022/12/05/46/</id>
    <published>2022-12-05T23:07:54.000Z</published>
    <updated>2022-12-05T23:51:48.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="46-Permutations-medium"><a href="#46-Permutations-medium" class="headerlink" title="46. Permutations(medium)"></a>46. Permutations(medium)</h1><h2 id="Given-an-array-nums-of-distinct-integers-return-all-the-possible-permutations-You-can-return-the-answer-in-any-order"><a href="#Given-an-array-nums-of-distinct-integers-return-all-the-possible-permutations-You-can-return-the-answer-in-any-order" class="headerlink" title="Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order."></a>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.</h2><p>全排列，利用了回溯的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permute</span>(<span class="hljs-params">self, nums</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: List[List[int]]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span>(<span class="hljs-params">first = <span class="hljs-number">0</span></span>):</span><br>            <span class="hljs-comment"># 所有数都填完了</span><br>            <span class="hljs-keyword">if</span> first == n:  <br>                res.append(nums[:])<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(first, n):<br>                <span class="hljs-comment"># 动态维护数组</span><br>                nums[first], nums[i] = nums[i], nums[first]<br>                <span class="hljs-comment"># 继续递归填下一个数</span><br>                backtrack(first + <span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># 撤销操作</span><br>                nums[first], nums[i] = nums[i], nums[first]<br>        <br>        n = <span class="hljs-built_in">len</span>(nums)<br>        res = []<br>        backtrack()<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;46-Permutations-medium&quot;&gt;&lt;a href=&quot;#46-Permutations-medium&quot; class=&quot;headerlink&quot; title=&quot;46. Permutations(medium)&quot;&gt;&lt;/a&gt;46. Permutations(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="backtracking" scheme="http://example.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>256. Paint House(medium)</title>
    <link href="http://example.com/2022/12/05/256/"/>
    <id>http://example.com/2022/12/05/256/</id>
    <published>2022-12-05T15:32:49.000Z</published>
    <updated>2022-12-05T16:24:16.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="256-Paint-House-medium"><a href="#256-Paint-House-medium" class="headerlink" title="256. Paint House(medium)"></a>256. Paint House(medium)</h1><h2 id="There-is-a-row-of-n-houses-where-each-house-can-be-painted-one-of-three-colors-red-blue-or-green-The-cost-of-painting-each-house-with-a-certain-color-is-different-You-have-to-paint-all-the-houses-such-that-no-two-adjacent-houses-have-the-same-color"><a href="#There-is-a-row-of-n-houses-where-each-house-can-be-painted-one-of-three-colors-red-blue-or-green-The-cost-of-painting-each-house-with-a-certain-color-is-different-You-have-to-paint-all-the-houses-such-that-no-two-adjacent-houses-have-the-same-color" class="headerlink" title="There is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color."></a>There is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</h2><h2 id="The-cost-of-painting-each-house-with-a-certain-color-is-represented-by-an-n-x-3-cost-matrix-costs"><a href="#The-cost-of-painting-each-house-with-a-certain-color-is-represented-by-an-n-x-3-cost-matrix-costs" class="headerlink" title="The cost of painting each house with a certain color is represented by an n x 3 cost matrix costs."></a>The cost of painting each house with a certain color is represented by an n x 3 cost matrix costs.</h2><h2 id="example-costs-0-0-is-the-cost-of-painting-house-0-with-the-color-red-costs-1-2-is-the-cost-of-painting-house-1-with-color-green-and-so-on…"><a href="#example-costs-0-0-is-the-cost-of-painting-house-0-with-the-color-red-costs-1-2-is-the-cost-of-painting-house-1-with-color-green-and-so-on…" class="headerlink" title="example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on…"></a>example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on…</h2><h2 id="Return-the-minimum-cost-to-paint-all-houses"><a href="#Return-the-minimum-cost-to-paint-all-houses" class="headerlink" title="Return the minimum cost to paint all houses."></a>Return the minimum cost to paint all houses.</h2><h2 id="假如有一排房子，共-n-个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。"><a href="#假如有一排房子，共-n-个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。" class="headerlink" title="假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。"></a>假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</h2><h2 id="当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个-n-x-3-的正整数矩阵-costs-来表示的。"><a href="#当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个-n-x-3-的正整数矩阵-costs-来表示的。" class="headerlink" title="当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。"></a>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。</h2><h2 id="例如，costs-0-0-表示第-0-号房子粉刷成红色的成本花费；costs-1-2-表示第-1-号房子粉刷成绿色的花费，以此类推。"><a href="#例如，costs-0-0-表示第-0-号房子粉刷成红色的成本花费；costs-1-2-表示第-1-号房子粉刷成绿色的花费，以此类推。" class="headerlink" title="例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。"></a>例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。</h2><h2 id="请计算出粉刷完所有房子最少的花费成本。"><a href="#请计算出粉刷完所有房子最少的花费成本。" class="headerlink" title="请计算出粉刷完所有房子最少的花费成本。"></a>请计算出粉刷完所有房子最少的花费成本。</h2><p> </p><p>华子的机考题，改了一下数字，变成四种颜色了，但过程是一样的</p><h3 id="美区的官方题解"><a href="#美区的官方题解" class="headerlink" title="美区的官方题解"></a><a href="https://leetcode.com/problems/paint-house/solutions/490412/paint-house/">美区的官方题解</a></h3><p>就在costs这个矩阵上处理，从下往上，也就是从最后一行开始处理，上一行加上下一行的costs，就是找每行最小的成本然后不断的加到第一行，输出第一行里最小的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCost</span>(<span class="params">self, costs: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(costs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(n-<span class="number">1</span>)):</span><br><span class="line">            costs[i][<span class="number">0</span>]+=<span class="built_in">min</span>(costs[i+<span class="number">1</span>][<span class="number">1</span>],costs[i+<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">            costs[i][<span class="number">1</span>]+=<span class="built_in">min</span>(costs[i+<span class="number">1</span>][<span class="number">0</span>],costs[i+<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">            costs[i][<span class="number">2</span>]+=<span class="built_in">min</span>(costs[i+<span class="number">1</span>][<span class="number">1</span>],costs[i+<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(costs)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(costs[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;256-Paint-House-medium&quot;&gt;&lt;a href=&quot;#256-Paint-House-medium&quot; class=&quot;headerlink&quot; title=&quot;256. Paint House(medium)&quot;&gt;&lt;/a&gt;256. Paint House(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="matrix" scheme="http://example.com/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>523. Continuous Subarray Sum(medium)</title>
    <link href="http://example.com/2022/12/04/523/"/>
    <id>http://example.com/2022/12/04/523/</id>
    <published>2022-12-05T04:13:20.000Z</published>
    <updated>2022-12-05T20:14:27.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="523-Continuous-Subarray-Sum-medium"><a href="#523-Continuous-Subarray-Sum-medium" class="headerlink" title="523. Continuous Subarray Sum(medium)"></a>523. Continuous Subarray Sum(medium)</h1><h2 id="Given-an-integer-array-nums-and-an-integer-k-return-true-if-nums-has-a-good-subarray-or-false-otherwise"><a href="#Given-an-integer-array-nums-and-an-integer-k-return-true-if-nums-has-a-good-subarray-or-false-otherwise" class="headerlink" title="Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise."></a>Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.</h2><h2 id="A-good-subarray-is-a-subarray-where"><a href="#A-good-subarray-is-a-subarray-where" class="headerlink" title="A good subarray is a subarray where:"></a>A good subarray is a subarray where:</h2><p>its length is at least two, and<br>the sum of the elements of the subarray is a multiple of k.<br>Note that:</p><h2 id="A-subarray-is-a-contiguous-part-of-the-array"><a href="#A-subarray-is-a-contiguous-part-of-the-array" class="headerlink" title="A subarray is a contiguous part of the array."></a>A subarray is a contiguous part of the array.</h2><h2 id="An-integer-x-is-a-multiple-of-k-if-there-exists-an-integer-n-such-that-x-n-k-0-is-always-a-multiple-of-k"><a href="#An-integer-x-is-a-multiple-of-k-if-there-exists-an-integer-n-such-that-x-n-k-0-is-always-a-multiple-of-k" class="headerlink" title="An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k."></a>An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.</h2><p>这道题最重要的就是同余定理，两个整数a、b，若它们除以整数m所得的余数相等，则称a与b对于模m同余或a同余于b模m。<br>举个例子就是，a%c=k,b%c=k 所以(a-b)%c=0</p><p>所以就是将不断求和的数组对K求余，得到的值看hashmap里有没有，没有就加进去，有的话就输出出来<br>这里子数组的最小长度是2，所以是不能直接这样从hashmap里只比较key，还需要利用i来设置value的值进行比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSubarraySum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        hashmap=collections.defaultdict(<span class="hljs-built_in">int</span>)<br>        sum1=<span class="hljs-number">0</span><br>        count=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums)&lt;<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        hashmap[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>        remainder = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            sum1+=nums[i]<br>            <span class="hljs-keyword">if</span> sum1%k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                hashmap[sum1 % k] = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> hashmap[sum1%k]&lt;i:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;523-Continuous-Subarray-Sum-medium&quot;&gt;&lt;a href=&quot;#523-Continuous-Subarray-Sum-medium&quot; class=&quot;headerlink&quot; title=&quot;523. Continuous Subarray</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="matrix" scheme="http://example.com/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>84. Largest Rectangle in Histogram(hard)</title>
    <link href="http://example.com/2022/12/03/84/"/>
    <id>http://example.com/2022/12/03/84/</id>
    <published>2022-12-04T00:12:05.000Z</published>
    <updated>2022-12-04T01:03:18.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="84-Largest-Rectangle-in-Histogram-hard"><a href="#84-Largest-Rectangle-in-Histogram-hard" class="headerlink" title="84. Largest Rectangle in Histogram(hard)"></a>84. Largest Rectangle in Histogram(hard)</h1><h2 id="Given-an-array-of-integers-heights-representing-the-histogram’s-bar-height-where-the-width-of-each-bar-is-1-return-the-area-of-the-largest-rectangle-in-the-histogram"><a href="#Given-an-array-of-integers-heights-representing-the-histogram’s-bar-height-where-the-width-of-each-bar-is-1-return-the-area-of-the-largest-rectangle-in-the-histogram" class="headerlink" title="Given an array of integers heights representing the histogram’s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram."></a>Given an array of integers heights representing the histogram’s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</h2><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/solution/bao-li-jie-fa-zhan-by-liweiwei1419/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span>(<span class="params">self, heights: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(heights)</span><br><span class="line">        left, right = [<span class="number">0</span>] * n, [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">        mono_stack = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> mono_stack <span class="keyword">and</span> heights[mono_stack[-<span class="number">1</span>]] &gt;= heights[i]:</span><br><span class="line">                mono_stack.pop()</span><br><span class="line">            left[i] = mono_stack[-<span class="number">1</span>] <span class="keyword">if</span> mono_stack <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">            mono_stack.append(i)</span><br><span class="line">        </span><br><span class="line">        mono_stack = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">while</span> mono_stack <span class="keyword">and</span> heights[mono_stack[-<span class="number">1</span>]] &gt;= heights[i]:</span><br><span class="line">                mono_stack.pop()</span><br><span class="line">            right[i] = mono_stack[-<span class="number">1</span>] <span class="keyword">if</span> mono_stack <span class="keyword">else</span> n</span><br><span class="line">            mono_stack.append(i)</span><br><span class="line">        </span><br><span class="line">        ans = <span class="built_in">max</span>((right[i] - left[i] - <span class="number">1</span>) * heights[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)) <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;84-Largest-Rectangle-in-Histogram-hard&quot;&gt;&lt;a href=&quot;#84-Largest-Rectangle-in-Histogram-hard&quot; class=&quot;headerlink&quot; title=&quot;84. Largest Rect</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>400. Nth Digit(medium)</title>
    <link href="http://example.com/2022/12/03/400/"/>
    <id>http://example.com/2022/12/03/400/</id>
    <published>2022-12-03T22:51:32.000Z</published>
    <updated>2022-12-03T22:56:32.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="400-Nth-Digit-medium"><a href="#400-Nth-Digit-medium" class="headerlink" title="400. Nth Digit(medium)"></a>400. Nth Digit(medium)</h1><h2 id="Given-an-integer-n-return-the-nth-digit-of-the-infinite-integer-sequence-1-2-3-4-5-6-7-8-9-10-11-…"><a href="#Given-an-integer-n-return-the-nth-digit-of-the-infinite-integer-sequence-1-2-3-4-5-6-7-8-9-10-11-…" class="headerlink" title="Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …]."></a>Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …].</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNthDigit</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        d,count=<span class="number">1</span>,<span class="number">9</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;d*count:</span><br><span class="line">            n-=d*count</span><br><span class="line">            d+=<span class="number">1</span></span><br><span class="line">            count*=<span class="number">10</span></span><br><span class="line">        index=n-<span class="number">1</span></span><br><span class="line">        start=<span class="number">10</span>**(d-<span class="number">1</span>)</span><br><span class="line">        num=start+index//d</span><br><span class="line">        digitIndex=index%d</span><br><span class="line">        <span class="keyword">return</span> num//<span class="number">10</span>**(d-digitIndex-<span class="number">1</span>)%<span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;400-Nth-Digit-medium&quot;&gt;&lt;a href=&quot;#400-Nth-Digit-medium&quot; class=&quot;headerlink&quot; title=&quot;400. Nth Digit(medium)&quot;&gt;&lt;/a&gt;400. Nth Digit(medium)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>554. Brick Wall(medium)</title>
    <link href="http://example.com/2022/12/03/554/"/>
    <id>http://example.com/2022/12/03/554/</id>
    <published>2022-12-03T21:51:34.000Z</published>
    <updated>2022-12-03T22:53:37.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="554-Brick-Wall-medium"><a href="#554-Brick-Wall-medium" class="headerlink" title="554. Brick Wall(medium)"></a>554. Brick Wall(medium)</h1><h2 id="There-is-a-rectangular-brick-wall-in-front-of-you-with-n-rows-of-bricks-The-ith-row-has-some-number-of-bricks-each-of-the-same-height-i-e-one-unit-but-they-can-be-of-different-widths-The-total-width-of-each-row-is-the-same"><a href="#There-is-a-rectangular-brick-wall-in-front-of-you-with-n-rows-of-bricks-The-ith-row-has-some-number-of-bricks-each-of-the-same-height-i-e-one-unit-but-they-can-be-of-different-widths-The-total-width-of-each-row-is-the-same" class="headerlink" title="There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same."></a>There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.</h2><h2 id="Draw-a-vertical-line-from-the-top-to-the-bottom-and-cross-the-least-bricks-If-your-line-goes-through-the-edge-of-a-brick-then-the-brick-is-not-considered-as-crossed-You-cannot-draw-a-line-just-along-one-of-the-two-vertical-edges-of-the-wall-in-which-case-the-line-will-obviously-cross-no-bricks"><a href="#Draw-a-vertical-line-from-the-top-to-the-bottom-and-cross-the-least-bricks-If-your-line-goes-through-the-edge-of-a-brick-then-the-brick-is-not-considered-as-crossed-You-cannot-draw-a-line-just-along-one-of-the-two-vertical-edges-of-the-wall-in-which-case-the-line-will-obviously-cross-no-bricks" class="headerlink" title="Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks."></a>Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</h2><h2 id="Given-the-2D-array-wall-that-contains-the-information-about-the-wall-return-the-minimum-number-of-crossed-bricks-after-drawing-such-a-vertical-line"><a href="#Given-the-2D-array-wall-that-contains-the-information-about-the-wall-return-the-minimum-number-of-crossed-bricks-after-drawing-such-a-vertical-line" class="headerlink" title="Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line."></a>Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/brick-wall/solution/gua-he-xin-shou-peng-you-men-de-shi-pin-miswe/">leetcode题解</a></p><p>其实主要思路就是从数组中怎么得到缝隙的位置。<br>如果缝隙的位置是根据缝隙离最左边多远来决定，那么缝隙的位置可由数组累加得到。<br>有了缝隙的位置很自然的会想到，可以统计每个位置有多少缝隙。<br>因为返回最少的砖头数量 = 墙高 - 最多缝隙</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leastBricks</span>(<span class="params">self, wall: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m=<span class="built_in">len</span>(wall)</span><br><span class="line">        count=collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> wallline <span class="keyword">in</span> wall:</span><br><span class="line">            dis=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(wallline)-<span class="number">1</span>):</span><br><span class="line">                dis+=wallline[i]</span><br><span class="line">                count[dis]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(count.values())==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(wall)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(wall)-<span class="built_in">max</span>(count.values())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;554-Brick-Wall-medium&quot;&gt;&lt;a href=&quot;#554-Brick-Wall-medium&quot; class=&quot;headerlink&quot; title=&quot;554. Brick Wall(medium)&quot;&gt;&lt;/a&gt;554. Brick Wall(mediu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>994. Rotting Oranges(medium)</title>
    <link href="http://example.com/2022/12/02/994/"/>
    <id>http://example.com/2022/12/02/994/</id>
    <published>2022-12-03T03:27:21.000Z</published>
    <updated>2022-12-05T20:18:53.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="994-Rotting-Oranges-medium"><a href="#994-Rotting-Oranges-medium" class="headerlink" title="994. Rotting Oranges(medium)"></a>994. Rotting Oranges(medium)</h1><h2 id="You-are-given-an-m-x-n-grid-where-each-cell-can-have-one-of-three-values"><a href="#You-are-given-an-m-x-n-grid-where-each-cell-can-have-one-of-three-values" class="headerlink" title="You are given an m x n grid where each cell can have one of three values:"></a>You are given an m x n grid where each cell can have one of three values:</h2><p>0 representing an empty cell,<br>1 representing a fresh orange, or<br>2 representing a rotten orange.<br>Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.</p><p>Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.</p><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/rotting-oranges/solution/li-qing-si-lu-wei-shi-yao-yong-bfsyi-ji-ru-he-xie-/">leetcode题解</a></h2><h2 id="有了计算最短路径的层序-BFS-代码框架，写这道题就很简单了。这道题的主要思路是："><a href="#有了计算最短路径的层序-BFS-代码框架，写这道题就很简单了。这道题的主要思路是：" class="headerlink" title="有了计算最短路径的层序 BFS 代码框架，写这道题就很简单了。这道题的主要思路是："></a>有了计算最短路径的层序 BFS 代码框架，写这道题就很简单了。这道题的主要思路是：</h2><h2 id="一开始，我们找出所有腐烂的橘子，将它们放入队列，作为第-0-层的结点。"><a href="#一开始，我们找出所有腐烂的橘子，将它们放入队列，作为第-0-层的结点。" class="headerlink" title="一开始，我们找出所有腐烂的橘子，将它们放入队列，作为第 0 层的结点。"></a>一开始，我们找出所有腐烂的橘子，将它们放入队列，作为第 0 层的结点。</h2><h2 id="然后进行-BFS-遍历，每个结点的相邻结点可能是上、下、左、右四个方向的结点，注意判断结点位于网格边界的特殊情况。"><a href="#然后进行-BFS-遍历，每个结点的相邻结点可能是上、下、左、右四个方向的结点，注意判断结点位于网格边界的特殊情况。" class="headerlink" title="然后进行 BFS 遍历，每个结点的相邻结点可能是上、下、左、右四个方向的结点，注意判断结点位于网格边界的特殊情况。"></a>然后进行 BFS 遍历，每个结点的相邻结点可能是上、下、左、右四个方向的结点，注意判断结点位于网格边界的特殊情况。</h2><h2 id="由于可能存在无法被污染的橘子，我们需要记录新鲜橘子的数量。在-BFS-中，每遍历到一个橘子（污染了一个橘子），就将新鲜橘子的数量减一。如果-BFS-结束后这个数量仍未减为零，说明存在无法被污染的橘子。"><a href="#由于可能存在无法被污染的橘子，我们需要记录新鲜橘子的数量。在-BFS-中，每遍历到一个橘子（污染了一个橘子），就将新鲜橘子的数量减一。如果-BFS-结束后这个数量仍未减为零，说明存在无法被污染的橘子。" class="headerlink" title="由于可能存在无法被污染的橘子，我们需要记录新鲜橘子的数量。在 BFS 中，每遍历到一个橘子（污染了一个橘子），就将新鲜橘子的数量减一。如果 BFS 结束后这个数量仍未减为零，说明存在无法被污染的橘子。"></a>由于可能存在无法被污染的橘子，我们需要记录新鲜橘子的数量。在 BFS 中，每遍历到一个橘子（污染了一个橘子），就将新鲜橘子的数量减一。如果 BFS 结束后这个数量仍未减为零，说明存在无法被污染的橘子。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">orangesRotting</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>)-&gt; <span class="hljs-built_in">int</span>:</span><br>        M = <span class="hljs-built_in">len</span>(grid)<br>        N = <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br>        queue = []<br><br>        count = <span class="hljs-number">0</span>  <span class="hljs-comment"># count 表示新鲜橘子的数量</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>                <span class="hljs-keyword">if</span> grid[r][c] == <span class="hljs-number">1</span>:<br>                    count += <span class="hljs-number">1</span> <span class="hljs-comment">#计数好橘子</span><br>                <span class="hljs-keyword">elif</span> grid[r][c] == <span class="hljs-number">2</span>:<br>                    queue.append((r, c))<br><br>        <span class="hljs-built_in">round</span> = <span class="hljs-number">0</span>  <span class="hljs-comment"># round 表示腐烂的轮数，或者分钟数</span><br>        <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 还有好橘子且队列还有坏橘子</span><br>            <span class="hljs-built_in">round</span> += <span class="hljs-number">1</span>  <span class="hljs-comment"># 层数+1</span><br>            n = <span class="hljs-built_in">len</span>(queue)  <span class="hljs-comment"># 记录这一层的坏橘子数</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment"># 遍历完这一层的坏橘子</span><br>                r, c = queue.pop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 取出队列开头的坏橘子坐标</span><br>                <span class="hljs-keyword">if</span> r-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[r-<span class="hljs-number">1</span>][c] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 上邻有好橘子</span><br>                    grid[r-<span class="hljs-number">1</span>][c] = <span class="hljs-number">2</span>  <span class="hljs-comment"># 好橘子变坏</span><br>                    count -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 好橘子数-1</span><br>                    queue.append((r-<span class="hljs-number">1</span>, c))  <span class="hljs-comment"># 新变坏的这只橘子进入坏橘子队列</span><br>                <span class="hljs-keyword">if</span> r+<span class="hljs-number">1</span> &lt; M <span class="hljs-keyword">and</span> grid[r+<span class="hljs-number">1</span>][c] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 下邻有好橘子</span><br>                    grid[r+<span class="hljs-number">1</span>][c] = <span class="hljs-number">2</span><br>                    count -= <span class="hljs-number">1</span><br>                    queue.append((r+<span class="hljs-number">1</span>, c))<br>                <span class="hljs-keyword">if</span> c-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> grid[r][c-<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 左邻有好橘子</span><br>                    grid[r][c-<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>                    count -= <span class="hljs-number">1</span><br>                    queue.append((r, c-<span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">if</span> c+<span class="hljs-number">1</span> &lt; N <span class="hljs-keyword">and</span> grid[r][c+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 右邻有好橘子</span><br>                    grid[r][c+<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>                    count -= <span class="hljs-number">1</span><br>                    queue.append((r, c+<span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 还有好橘子</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 没有好橘子了</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;994-Rotting-Oranges-medium&quot;&gt;&lt;a href=&quot;#994-Rotting-Oranges-medium&quot; class=&quot;headerlink&quot; title=&quot;994. Rotting Oranges(medium)&quot;&gt;&lt;/a&gt;994. R</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="matrix" scheme="http://example.com/tags/matrix/"/>
    
    <category term="BFS" scheme="http://example.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>921</title>
    <link href="http://example.com/2022/11/30/921/"/>
    <id>http://example.com/2022/11/30/921/</id>
    <published>2022-12-01T04:56:15.000Z</published>
    <updated>2022-12-01T04:56:15.788Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>1704. Determine if String Halves Are Alike(easy)</title>
    <link href="http://example.com/2022/11/30/1704/"/>
    <id>http://example.com/2022/11/30/1704/</id>
    <published>2022-12-01T03:29:06.000Z</published>
    <updated>2022-12-01T03:33:24.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1704-Determine-if-String-Halves-Are-Alike-easy"><a href="#1704-Determine-if-String-Halves-Are-Alike-easy" class="headerlink" title="1704. Determine if String Halves Are Alike(easy)"></a>1704. Determine if String Halves Are Alike(easy)</h1><p>You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.</p><p>Two strings are alike if they have the same number of vowels (‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’, ‘U’). Notice that s contains uppercase and lowercase letters.</p><p>Return true if a and b are alike. Otherwise, return false.</p><p>这道题是把一个字符串劈成两半，左边为a右边为b，然后判断a和b里面的元音数是否相同。<br>这里面有一点简便计算的是，他不是考虑元音各自的个数，所以只要设一个常量往上加就可以了<br>如果考虑元音各自的个数，那就另外设两个hashmap，最后比较两个hashmap是否相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">halvesAreAlike</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        a=s[:n//<span class="number">2</span>]</span><br><span class="line">        b=s[n//<span class="number">2</span>:]</span><br><span class="line">        count_a=<span class="number">0</span></span><br><span class="line">        count_b=<span class="number">0</span></span><br><span class="line">        vowels=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;i&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;u&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;E&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;O&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;U&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> vowels:</span><br><span class="line">                count_a+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> b:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> vowels:</span><br><span class="line">                count_b+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count_a==count_b</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1704-Determine-if-String-Halves-Are-Alike-easy&quot;&gt;&lt;a href=&quot;#1704-Determine-if-String-Halves-Are-Alike-easy&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>43</title>
    <link href="http://example.com/2022/11/30/43/"/>
    <id>http://example.com/2022/11/30/43/</id>
    <published>2022-11-30T19:20:48.000Z</published>
    <updated>2022-11-30T19:20:48.656Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>1277. Count Square Submatrices with All Ones(medium)</title>
    <link href="http://example.com/2022/11/29/1277/"/>
    <id>http://example.com/2022/11/29/1277/</id>
    <published>2022-11-29T23:01:44.000Z</published>
    <updated>2022-11-29T23:09:35.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1277-Count-Square-Submatrices-with-All-Ones-medium"><a href="#1277-Count-Square-Submatrices-with-All-Ones-medium" class="headerlink" title="1277. Count Square Submatrices with All Ones(medium)"></a>1277. Count Square Submatrices with All Ones(medium)</h1><h2 id="Given-a-m-n-matrix-of-ones-and-zeros-return-how-many-square-submatrices-have-all-ones"><a href="#Given-a-m-n-matrix-of-ones-and-zeros-return-how-many-square-submatrices-have-all-ones" class="headerlink" title="Given a m * n matrix of ones and zeros, return how many square submatrices have all ones."></a>Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.</h2><p>这道题和221. Maximal Square(medium)同属一类题</p><p>和221 用同样的方法，最后的输出结果是dp矩阵每个数的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSquares</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m=<span class="built_in">len</span>(matrix)</span><br><span class="line">        n=<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> m==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j]==<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> j==<span class="number">0</span>:</span><br><span class="line">                        dp[i][j]=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dp[i][j]=<span class="built_in">min</span>(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j])+<span class="number">1</span></span><br><span class="line">                count+=dp[i][j]</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1277-Count-Square-Submatrices-with-All-Ones-medium&quot;&gt;&lt;a href=&quot;#1277-Count-Square-Submatrices-with-All-Ones-medium&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="matrix" scheme="http://example.com/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>221. Maximal Square(medium)</title>
    <link href="http://example.com/2022/11/29/221/"/>
    <id>http://example.com/2022/11/29/221/</id>
    <published>2022-11-29T22:46:54.000Z</published>
    <updated>2022-11-29T23:09:19.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="221-Maximal-Square-medium"><a href="#221-Maximal-Square-medium" class="headerlink" title="221. Maximal Square(medium)"></a>221. Maximal Square(medium)</h1><h2 id="Given-an-m-x-n-binary-matrix-filled-with-0’s-and-1’s-find-the-largest-square-containing-only-1’s-and-return-its-area"><a href="#Given-an-m-x-n-binary-matrix-filled-with-0’s-and-1’s-find-the-largest-square-containing-only-1’s-and-return-its-area" class="headerlink" title="Given an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area."></a>Given an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</h2><p>这道题和1277. Count Square Submatrices with All Ones(medium)同属一类题</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/maximal-square/solution/zui-da-zheng-fang-xing-by-leetcode-solution/">官方题解</a></h3><p>可以使用动态规划降低时间复杂度。我们用 dp(i,j) 表示以 (i,j) 为右下角，且只包含 1 的正方形的边长最大值。<br>如果我们能计算出所有 dp(i,j) 的值，那么其中的最大值即为矩阵中只包含 1 的正方形的边长最大值，其平方即为最大正方形的面积。</p><h4 id="注：dp-i-j-表示以-i-j-为右下角，且只包含-1-的正方形的边长最大值。"><a href="#注：dp-i-j-表示以-i-j-为右下角，且只包含-1-的正方形的边长最大值。" class="headerlink" title="注：dp(i,j) 表示以 (i,j) 为右下角，且只包含 1 的正方形的边长最大值。"></a>注：dp(i,j) 表示以 (i,j) 为右下角，且只包含 1 的正方形的边长最大值。</h4><p>那么如何计算 dp 中的每个元素值呢？对于每个位置 (i,j)，检查在矩阵中该位置的值：</p><p>如果该位置的值是 0，则 dp(i,j)=0，因为当前位置不可能在由 1 组成的正方形中；</p><p>如果该位置的值是 1，则 dp(i,j) 的值由其上方、左方和左上方的三个相邻位置的 dp 值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加 1，状态转移方程如下：</p><p>dp(i, j)=min(dp(i−1, j), dp(i−1, j−1), dp(i, j−1))+1</p><p>此外，还需要考虑边界条件。如果 i 和 j 中至少有一个为 0（就是最边上那半边），则以位置 (i, j) 为右下角的最大正方形的边长只能是 1，因此 dp(i,j)=1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        m=<span class="built_in">len</span>(matrix)</span><br><span class="line">        n=<span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> m==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        maxside=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> j==<span class="number">0</span>:</span><br><span class="line">                        dp[i][j]=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dp[i][j]=<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i][j-<span class="number">1</span>])+<span class="number">1</span></span><br><span class="line">                    maxside=<span class="built_in">max</span>(maxside,dp[i][j])</span><br><span class="line">        <span class="keyword">return</span> maxside*maxside</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;221-Maximal-Square-medium&quot;&gt;&lt;a href=&quot;#221-Maximal-Square-medium&quot; class=&quot;headerlink&quot; title=&quot;221. Maximal Square(medium)&quot;&gt;&lt;/a&gt;221. Maxi</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="matrix" scheme="http://example.com/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>55. Jump Game(medium)</title>
    <link href="http://example.com/2022/11/29/55/"/>
    <id>http://example.com/2022/11/29/55/</id>
    <published>2022-11-29T20:54:57.000Z</published>
    <updated>2022-11-29T23:09:59.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="55-Jump-Game-medium"><a href="#55-Jump-Game-medium" class="headerlink" title="55. Jump Game(medium)"></a>55. Jump Game(medium)</h1><h2 id="You-are-given-an-integer-array-nums-You-are-initially-positioned-at-the-array’s-first-index-and-each-element-in-the-array-represents-your-maximum-jump-length-at-that-position"><a href="#You-are-given-an-integer-array-nums-You-are-initially-positioned-at-the-array’s-first-index-and-each-element-in-the-array-represents-your-maximum-jump-length-at-that-position" class="headerlink" title="You are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position."></a>You are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position.</h2><h2 id="Return-true-if-you-can-reach-the-last-index-or-false-otherwise"><a href="#Return-true-if-you-can-reach-the-last-index-or-false-otherwise" class="headerlink" title="Return true if you can reach the last index, or false otherwise."></a>Return true if you can reach the last index, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/jump-game/solution/pythonji-bai-97kan-bu-dong-ni-chui-wo-by-mo-lan-4/">leetcode题解</a></h2><p>思路：尽可能到达最远位置（贪心）。<br>如果能到达某个位置，那一定能到达它前面的所有位置。</p><p>方法：初始化最远位置为 0，然后遍历数组，如果当前位置能到达，并且当前位置+跳数&gt;最远位置，就更新最远位置。最后比较最远位置和数组长度。</p><p>复杂度：时间复杂度 O(n)，空间复杂度 O(1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        farthest=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">            farthest=<span class="built_in">max</span>(farthest,i+nums[i])</span><br><span class="line">            <span class="keyword">if</span> farthest&lt;=i:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> farthest&gt;=n-<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;55-Jump-Game-medium&quot;&gt;&lt;a href=&quot;#55-Jump-Game-medium&quot; class=&quot;headerlink&quot; title=&quot;55. Jump Game(medium)&quot;&gt;&lt;/a&gt;55. Jump Game(medium)&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>23. Merge k Sorted Lists(hard)</title>
    <link href="http://example.com/2022/11/27/23/"/>
    <id>http://example.com/2022/11/27/23/</id>
    <published>2022-11-27T21:31:10.000Z</published>
    <updated>2022-11-29T23:08:55.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23-Merge-k-Sorted-Lists-hard"><a href="#23-Merge-k-Sorted-Lists-hard" class="headerlink" title="23. Merge k Sorted Lists(hard)"></a>23. Merge k Sorted Lists(hard)</h1><h2 id="You-are-given-an-array-of-k-linked-lists-lists-each-linked-list-is-sorted-in-ascending-order"><a href="#You-are-given-an-array-of-k-linked-lists-lists-each-linked-list-is-sorted-in-ascending-order" class="headerlink" title="You are given an array of k linked-lists lists, each linked-list is sorted in ascending order."></a>You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.</h2><h2 id="Merge-all-the-linked-lists-into-one-sorted-linked-list-and-return-it"><a href="#Merge-all-the-linked-lists-into-one-sorted-linked-list-and-return-it" class="headerlink" title="Merge all the linked-lists into one sorted linked-list and return it."></a>Merge all the linked-lists into one sorted linked-list and return it.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">Output: [1,1,2,3,4,4,5,6]</span><br><span class="line">Explanation: The linked-lists are:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">merging them into one sorted list:</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p>这道题是21. Merge Two Sorted Lists(easy) 的升级版<br>做法是用优先队列或者堆排序，确定列入链表的顺序</p><h2 id="甚至可以第一遍遍历将所有node的value存入一个数组，然后直接排序，再把数组转换成链表输出就可以"><a href="#甚至可以第一遍遍历将所有node的value存入一个数组，然后直接排序，再把数组转换成链表输出就可以" class="headerlink" title="甚至可以第一遍遍历将所有node的value存入一个数组，然后直接排序，再把数组转换成链表输出就可以"></a>甚至可以第一遍遍历将所有node的value存入一个数组，然后直接排序，再把数组转换成链表输出就可以</h2><h3 id="猪猪侠的棒棒糖的评论"><a href="#猪猪侠的棒棒糖的评论" class="headerlink" title="猪猪侠的棒棒糖的评论"></a><a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/he-bing-kge-pai-xu-lian-biao-by-leetcode-solutio-2/">猪猪侠的棒棒糖的评论</a></h3><p>不得不说这个方法最好理解，而且时间复杂度也没有变高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lists)):</span><br><span class="line">            <span class="keyword">while</span> lists[i]:</span><br><span class="line">                temp.append(lists[i].val)</span><br><span class="line">                lists[i] = lists[i].<span class="built_in">next</span></span><br><span class="line">        temp.sort()</span><br><span class="line">        head = current = ListNode()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">            Node = ListNode(temp[i])</span><br><span class="line">            current.<span class="built_in">next</span> = Node</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;23-Merge-k-Sorted-Lists-hard&quot;&gt;&lt;a href=&quot;#23-Merge-k-Sorted-Lists-hard&quot; class=&quot;headerlink&quot; title=&quot;23. Merge k Sorted Lists(hard)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
  </entry>
  
</feed>
