<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-05T03:45:04.873Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>832. Flipping an Image(easy)</title>
    <link href="http://example.com/2022/10/04/832/"/>
    <id>http://example.com/2022/10/04/832/</id>
    <published>2022-10-05T03:28:49.000Z</published>
    <updated>2022-10-05T03:45:04.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="832-Flipping-an-Image-easy"><a href="#832-Flipping-an-Image-easy" class="headerlink" title="832. Flipping an Image(easy)"></a>832. Flipping an Image(easy)</h1><h2 id="Given-an-n-x-n-binary-matrix-image-flip-the-image-horizontally-then-invert-it-and-return-the-resulting-image"><a href="#Given-an-n-x-n-binary-matrix-image-flip-the-image-horizontally-then-invert-it-and-return-the-resulting-image" class="headerlink" title="Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image."></a>Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.</h2><h2 id="To-flip-an-image-horizontally-means-that-each-row-of-the-image-is-reversed"><a href="#To-flip-an-image-horizontally-means-that-each-row-of-the-image-is-reversed" class="headerlink" title="To flip an image horizontally means that each row of the image is reversed."></a>To flip an image horizontally means that each row of the image is reversed.</h2><h2 id="For-example-flipping-1-1-0-horizontally-results-in-0-1-1"><a href="#For-example-flipping-1-1-0-horizontally-results-in-0-1-1" class="headerlink" title="For example, flipping [1,1,0] horizontally results in [0,1,1]."></a>For example, flipping [1,1,0] horizontally results in [0,1,1].</h2><h2 id="To-invert-an-image-means-that-each-0-is-replaced-by-1-and-each-1-is-replaced-by-0"><a href="#To-invert-an-image-means-that-each-0-is-replaced-by-1-and-each-1-is-replaced-by-0" class="headerlink" title="To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0."></a>To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.</h2><h2 id="For-example-inverting-0-1-1-results-in-1-0-0"><a href="#For-example-inverting-0-1-1-results-in-1-0-0" class="headerlink" title="For example, inverting [0,1,1] results in [1,0,0]."></a>For example, inverting [0,1,1] results in [1,0,0].</h2><p>两次遍历，第一次遍历是10互换，第二次遍历是前后数字互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flipAndInvertImage</span>(<span class="params">self, image: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        n=<span class="built_in">len</span>(image)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> image[i][j]==<span class="number">1</span>:</span><br><span class="line">                    image[i][j]=<span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    image[i][j]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>):</span><br><span class="line">                    tmp=image[i][j]</span><br><span class="line">                    image[i][j]=image[i][n-j-<span class="number">1</span>]</span><br><span class="line">                    image[i][n-j-<span class="number">1</span>]=tmp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">                    tmp=image[i][j]</span><br><span class="line">                    image[i][j]=image[i][n-j-<span class="number">1</span>]</span><br><span class="line">                    image[i][n-j-<span class="number">1</span>]=tmp</span><br><span class="line">        <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><p>相对轻便的算法<br>[::-1] 顺序相反操作<br>[-1] 读取倒数第一个元素<br>[3::-1] 从下标为3（从0开始）的元素开始翻转读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flipAndInvertImage</span>(<span class="params">self, image: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        result=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> image:</span><br><span class="line">            result.append(i[::-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result[i])):</span><br><span class="line">                <span class="keyword">if</span> result[i][j]==<span class="number">0</span>:</span><br><span class="line">                    result[i][j]=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result[i][j]=<span class="number">0</span></span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;832-Flipping-an-Image-easy&quot;&gt;&lt;a href=&quot;#832-Flipping-an-Image-easy&quot; class=&quot;headerlink&quot; title=&quot;832. Flipping an Image(easy)&quot;&gt;&lt;/a&gt;832. F</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Matrix" scheme="http://example.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>2373. Largest Local Values in a Matrix(easy)</title>
    <link href="http://example.com/2022/10/04/2373/"/>
    <id>http://example.com/2022/10/04/2373/</id>
    <published>2022-10-04T23:05:13.000Z</published>
    <updated>2022-10-04T23:06:58.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2373-Largest-Local-Values-in-a-Matrix-easy"><a href="#2373-Largest-Local-Values-in-a-Matrix-easy" class="headerlink" title="2373. Largest Local Values in a Matrix(easy)"></a>2373. Largest Local Values in a Matrix(easy)</h1><h2 id="You-are-given-an-n-x-n-integer-matrix-grid"><a href="#You-are-given-an-n-x-n-integer-matrix-grid" class="headerlink" title="You are given an n x n integer matrix grid."></a>You are given an n x n integer matrix grid.</h2><h2 id="Generate-an-integer-matrix-maxLocal-of-size-n-2-x-n-2-such-that"><a href="#Generate-an-integer-matrix-maxLocal-of-size-n-2-x-n-2-such-that" class="headerlink" title="Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:"></a>Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:</h2><p>maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.</p><h2 id="In-other-words-we-want-to-find-the-largest-value-in-every-contiguous-3-x-3-matrix-in-grid"><a href="#In-other-words-we-want-to-find-the-largest-value-in-every-contiguous-3-x-3-matrix-in-grid" class="headerlink" title="In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid."></a>In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.</h2><h2 id="Return-the-generated-matrix"><a href="#Return-the-generated-matrix" class="headerlink" title="Return the generated matrix."></a>Return the generated matrix.</h2><p>二维矩阵遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestLocal</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        n=<span class="built_in">len</span>(grid)</span><br><span class="line">        ans=[[<span class="number">0</span>]*(n-<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">                ans[i][j]=<span class="built_in">max</span>(grid[x][y] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(i,i+<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(j,j+<span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2373-Largest-Local-Values-in-a-Matrix-easy&quot;&gt;&lt;a href=&quot;#2373-Largest-Local-Values-in-a-Matrix-easy&quot; class=&quot;headerlink&quot; title=&quot;2373. La</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Matrix" scheme="http://example.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill11-matrix</title>
    <link href="http://example.com/2022/10/04/LeetCode-skill11-matrix/"/>
    <id>http://example.com/2022/10/04/LeetCode-skill11-matrix/</id>
    <published>2022-10-04T22:32:18.000Z</published>
    <updated>2022-10-04T22:40:16.352Z</updated>
    
    <content type="html"><![CDATA[<ol start="1672"><li>Richest Customer Wealth(easy)</li></ol><ol start="54"><li>Spiral Matrix(medium)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;1672&quot;&gt;
&lt;li&gt;Richest Customer Wealth(easy)&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;54&quot;&gt;
&lt;li&gt;Spiral Matrix(medium)&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Matrix" scheme="http://example.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>1672. Richest Customer Wealth(easy)</title>
    <link href="http://example.com/2022/10/04/1672/"/>
    <id>http://example.com/2022/10/04/1672/</id>
    <published>2022-10-04T22:30:39.000Z</published>
    <updated>2022-10-04T22:42:25.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1672-Richest-Customer-Wealth-easy"><a href="#1672-Richest-Customer-Wealth-easy" class="headerlink" title="1672. Richest Customer Wealth(easy)"></a>1672. Richest Customer Wealth(easy)</h1><h2 id="You-are-given-an-m-x-n-integer-grid-accounts-where-accounts-i-j-is-the-amount-of-money-the-i​​​​​​​​​​​th​​​​-customer-has-in-the-j​​​​​​​​​​​th​​​​-bank-Return-the-wealth-that-the-richest-customer-has"><a href="#You-are-given-an-m-x-n-integer-grid-accounts-where-accounts-i-j-is-the-amount-of-money-the-i​​​​​​​​​​​th​​​​-customer-has-in-the-j​​​​​​​​​​​th​​​​-bank-Return-the-wealth-that-the-richest-customer-has" class="headerlink" title="You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has."></a>You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.</h2><h2 id="A-customer’s-wealth-is-the-amount-of-money-they-have-in-all-their-bank-accounts-The-richest-customer-is-the-customer-that-has-the-maximum-wealth"><a href="#A-customer’s-wealth-is-the-amount-of-money-they-have-in-all-their-bank-accounts-The-richest-customer-is-the-customer-that-has-the-maximum-wealth" class="headerlink" title="A customer’s wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth."></a>A customer’s wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumWealth</span>(<span class="params">self, accounts: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(accounts)):</span><br><span class="line">            res=<span class="built_in">max</span>(res,<span class="built_in">sum</span>(accounts[i]))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">```        </span><br><span class="line">```python</span><br><span class="line">accounts = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(accounts)) <span class="comment">#2 行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(accounts[<span class="number">0</span>])) <span class="comment">#3 列</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1672-Richest-Customer-Wealth-easy&quot;&gt;&lt;a href=&quot;#1672-Richest-Customer-Wealth-easy&quot; class=&quot;headerlink&quot; title=&quot;1672. Richest Customer Wea</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Matrix" scheme="http://example.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>171. Excel Sheet Column Number(easy)</title>
    <link href="http://example.com/2022/10/03/171/"/>
    <id>http://example.com/2022/10/03/171/</id>
    <published>2022-10-03T20:24:59.000Z</published>
    <updated>2022-10-03T20:44:50.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="171-Excel-Sheet-Column-Number-easy"><a href="#171-Excel-Sheet-Column-Number-easy" class="headerlink" title="171. Excel Sheet Column Number(easy)"></a>171. Excel Sheet Column Number(easy)</h1><h2 id="Given-a-string-columnTitle-that-represents-the-column-title-as-appears-in-an-Excel-sheet-return-its-corresponding-column-number"><a href="#Given-a-string-columnTitle-that-represents-the-column-title-as-appears-in-an-Excel-sheet-return-its-corresponding-column-number" class="headerlink" title="Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number."></a>Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.</h2><h2 id="For-example"><a href="#For-example" class="headerlink" title="For example:"></a>For example:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28 </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这道题是一经典题目，相当于从26进制转换成十进制，这是一个标准算法，我们从右到左迭代数字，并将它们乘以基数到数字位置的幂。为了将字母转换为数字，我们使用ord，该方法返回字母的Unicode代码。通过将代码减去 64，我们可以将字母映射到从 1 到 26 的数字。</p><p>26进制转换为十进制，相当于K*(26^(n-1))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span>(<span class="params">self, columnTitle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        val=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">reversed</span>(columnTitle)):</span><br><span class="line">            val+=(<span class="number">26</span>**i)*(<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="comment">#** 代表乘方</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;171-Excel-Sheet-Column-Number-easy&quot;&gt;&lt;a href=&quot;#171-Excel-Sheet-Column-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;171. Excel Sheet Column </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill10-Data-structure-design</title>
    <link href="http://example.com/2022/10/03/LeetCode-skill10-Data-structure-design/"/>
    <id>http://example.com/2022/10/03/LeetCode-skill10-Data-structure-design/</id>
    <published>2022-10-03T20:10:46.000Z</published>
    <updated>2022-10-04T22:32:50.398Z</updated>
    
    <content type="html"><![CDATA[<ol start="170"><li>Two Sum III - Data structure design(easy)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;170&quot;&gt;
&lt;li&gt;Two Sum III - Data structure design(easy)&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Data structure design" scheme="http://example.com/tags/Data-structure-design/"/>
    
  </entry>
  
  <entry>
    <title>170. Two Sum III - Data structure design(easy)</title>
    <link href="http://example.com/2022/10/03/170/"/>
    <id>http://example.com/2022/10/03/170/</id>
    <published>2022-10-03T20:08:23.000Z</published>
    <updated>2022-10-03T20:14:42.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="170-Two-Sum-III-Data-structure-design-easy"><a href="#170-Two-Sum-III-Data-structure-design-easy" class="headerlink" title="170. Two Sum III - Data structure design(easy)"></a>170. Two Sum III - Data structure design(easy)</h1><h2 id="Design-a-data-structure-that-accepts-a-stream-of-integers-and-checks-if-it-has-a-pair-of-integers-that-sum-up-to-a-particular-value"><a href="#Design-a-data-structure-that-accepts-a-stream-of-integers-and-checks-if-it-has-a-pair-of-integers-that-sum-up-to-a-particular-value" class="headerlink" title="Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value."></a>Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.</h2><h2 id="Implement-the-TwoSum-class"><a href="#Implement-the-TwoSum-class" class="headerlink" title="Implement the TwoSum class:"></a>Implement the TwoSum class:</h2><p>TwoSum() Initializes the TwoSum object, with an empty array initially.<br>void add(int number) Adds number to the data structure.<br>boolean find(int value) Returns true if there exists any pair of numbers whose sum is equal to value, otherwise, it returns false.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;TwoSum&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;find&quot;, &quot;find&quot;]</span><br><span class="line">[[], [1], [3], [5], [4], [7]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, null, true, false]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">TwoSum twoSum = new TwoSum();</span><br><span class="line">twoSum.add(1);   // [] --&gt; [1]</span><br><span class="line">twoSum.add(3);   // [1] --&gt; [1,3]</span><br><span class="line">twoSum.add(5);   // [1,3] --&gt; [1,3,5]</span><br><span class="line">twoSum.find(4);  // 1 + 3 = 4, return true</span><br><span class="line">twoSum.find(7);  // No two integers sum up to 7, return false</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/two-sum-iii-data-structure-design/solutions/441899/two-sum-iii-data-structure-design/">leetcode题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.nums=[]</span><br><span class="line">        self.is_sorted=<span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, number: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="comment"># Inserting while maintaining the ascending order.</span></span><br><span class="line">        <span class="comment"># for index, num in enumerate(self.nums):</span></span><br><span class="line">        <span class="comment">#     if number &lt;= num:</span></span><br><span class="line">        <span class="comment">#         self.nums.insert(index, number)</span></span><br><span class="line">        <span class="comment">#         return</span></span><br><span class="line">        <span class="comment">## larger than any number</span></span><br><span class="line">        <span class="comment">#self.nums.append(number)</span></span><br><span class="line"></span><br><span class="line">        self.nums.append(number)</span><br><span class="line">        self.is_sorted = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Find if there exists any pair of numbers which sum is equal to the value.</span></span><br><span class="line"><span class="string">        :type value: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_sorted:</span><br><span class="line">            self.nums.sort()</span><br><span class="line">            self.is_sorted = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        low, high = <span class="number">0</span>, <span class="built_in">len</span>(self.nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            currSum = self.nums[low] + self.nums[high]</span><br><span class="line">            <span class="keyword">if</span> currSum &lt; value:</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> currSum &gt; value:</span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># currSum == value</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># Your TwoSum object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = TwoSum()</span></span><br><span class="line"><span class="comment"># obj.add(number)</span></span><br><span class="line"><span class="comment"># param_2 = obj.find(value)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;170-Two-Sum-III-Data-structure-design-easy&quot;&gt;&lt;a href=&quot;#170-Two-Sum-III-Data-structure-design-easy&quot; class=&quot;headerlink&quot; title=&quot;170. Two</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="two-pointer" scheme="http://example.com/tags/two-pointer/"/>
    
    <category term="Data structure design" scheme="http://example.com/tags/Data-structure-design/"/>
    
  </entry>
  
  <entry>
    <title>1572. Matrix Diagonal Sum(easy)</title>
    <link href="http://example.com/2022/10/03/1572/"/>
    <id>http://example.com/2022/10/03/1572/</id>
    <published>2022-10-03T15:26:37.000Z</published>
    <updated>2022-10-03T15:33:25.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1572-Matrix-Diagonal-Sum-easy"><a href="#1572-Matrix-Diagonal-Sum-easy" class="headerlink" title="1572. Matrix Diagonal Sum(easy)"></a>1572. Matrix Diagonal Sum(easy)</h1><h2 id="Given-a-square-matrix-mat-return-the-sum-of-the-matrix-diagonals"><a href="#Given-a-square-matrix-mat-return-the-sum-of-the-matrix-diagonals" class="headerlink" title="Given a square matrix mat, return the sum of the matrix diagonals."></a>Given a square matrix mat, return the sum of the matrix diagonals.</h2><h2 id="Only-include-the-sum-of-all-the-elements-on-the-primary-diagonal-and-all-the-elements-on-the-secondary-diagonal-that-are-not-part-of-the-primary-diagonal"><a href="#Only-include-the-sum-of-all-the-elements-on-the-primary-diagonal-and-all-the-elements-on-the-secondary-diagonal-that-are-not-part-of-the-primary-diagonal" class="headerlink" title="Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal."></a>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</h2><p>矩阵对角线之和，这题很典型</p><p>逐行取数<br>思路与算法</p><p>逐行遍历，记当前的行号为 i，对于一行我们把 (i, i)位置和 (i, n - i - 1) 加入答案。这样如果 n 是奇数的话，最中间的格子会被加入两次。所以 n 为奇数的时候，我们需要减掉矩阵最中心的那个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diagonalSum</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(mat)</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        mid = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            total += mat[i][i] + mat[i][n - <span class="number">1</span> - i]</span><br><span class="line">        <span class="keyword">return</span> total - mat[mid][mid] * (n &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>n&amp;1是用来判断奇偶性的<br>n&amp;1   与运算      可以判断n是否为偶数     如果是偶数，n&amp;1返回0；否则返回1，为奇数。<br>一个整数 n，n&amp;1 这个表达式 可以用来 判断 a的奇偶性。<br>二进制的末位为 0表示偶数，末位为 1表是奇数。<br>使用 n%2 来判断奇偶性 和 n&amp;1 是一样的作用，但是 n&amp;1 要快好多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1572-Matrix-Diagonal-Sum-easy&quot;&gt;&lt;a href=&quot;#1572-Matrix-Diagonal-Sum-easy&quot; class=&quot;headerlink&quot; title=&quot;1572. Matrix Diagonal Sum(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="two-pointer" scheme="http://example.com/tags/two-pointer/"/>
    
    <category term="Palindrome" scheme="http://example.com/tags/Palindrome/"/>
    
  </entry>
  
  <entry>
    <title>163. Missing Ranges(easy)</title>
    <link href="http://example.com/2022/10/03/163/"/>
    <id>http://example.com/2022/10/03/163/</id>
    <published>2022-10-03T04:05:33.000Z</published>
    <updated>2022-10-03T15:27:00.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="163-Missing-Ranges-easy"><a href="#163-Missing-Ranges-easy" class="headerlink" title="163. Missing Ranges(easy)"></a>163. Missing Ranges(easy)</h1><h2 id="You-are-given-an-inclusive-range-lower-upper-and-a-sorted-unique-integer-array-nums-where-all-elements-are-in-the-inclusive-range"><a href="#You-are-given-an-inclusive-range-lower-upper-and-a-sorted-unique-integer-array-nums-where-all-elements-are-in-the-inclusive-range" class="headerlink" title="You are given an inclusive range [lower, upper] and a sorted unique integer array nums, where all elements are in the inclusive range."></a>You are given an inclusive range [lower, upper] and a sorted unique integer array nums, where all elements are in the inclusive range.</h2><h2 id="A-number-x-is-considered-missing-if-x-is-in-the-range-lower-upper-and-x-is-not-in-nums"><a href="#A-number-x-is-considered-missing-if-x-is-in-the-range-lower-upper-and-x-is-not-in-nums" class="headerlink" title="A number x is considered missing if x is in the range [lower, upper] and x is not in nums."></a>A number x is considered missing if x is in the range [lower, upper] and x is not in nums.</h2><h2 id="Return-the-smallest-sorted-list-of-ranges-that-cover-every-missing-number-exactly-That-is-no-element-of-nums-is-in-any-of-the-ranges-and-each-missing-number-is-in-one-of-the-ranges"><a href="#Return-the-smallest-sorted-list-of-ranges-that-cover-every-missing-number-exactly-That-is-no-element-of-nums-is-in-any-of-the-ranges-and-each-missing-number-is-in-one-of-the-ranges" class="headerlink" title="Return the smallest sorted list of ranges that cover every missing number exactly. That is, no element of nums is in any of the ranges, and each missing number is in one of the ranges."></a>Return the smallest sorted list of ranges that cover every missing number exactly. That is, no element of nums is in any of the ranges, and each missing number is in one of the ranges.</h2><h2 id="Each-range-a-b-in-the-list-should-be-output-as"><a href="#Each-range-a-b-in-the-list-should-be-output-as" class="headerlink" title="Each range [a,b] in the list should be output as:"></a>Each range [a,b] in the list should be output as:</h2><p>“a-&gt;b” if a != b<br>“a” if a == b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,3,50,75], lower = 0, upper = 99</span><br><span class="line">Output: [&quot;2&quot;,&quot;4-&gt;49&quot;,&quot;51-&gt;74&quot;,&quot;76-&gt;99&quot;]</span><br><span class="line">Explanation: The ranges are:</span><br><span class="line">[2,2] --&gt; &quot;2&quot;</span><br><span class="line">[4,49] --&gt; &quot;4-&gt;49&quot;</span><br><span class="line">[51,74] --&gt; &quot;51-&gt;74&quot;</span><br><span class="line">[76,99] --&gt; &quot;76-&gt;99&quot;</span><br></pre></td></tr></table></figure><p>这题是通过lower和upper确定上下边界，然后再挨个前后相减得到范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMissingRanges</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], lower: <span class="built_in">int</span>, upper: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">       </span><br><span class="line">        numList = nums</span><br><span class="line">        nums = [lower - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> numList:</span><br><span class="line">            nums.append(num)</span><br><span class="line">        nums.append(upper + <span class="number">1</span>)</span><br><span class="line">        ranges = <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">            dist = nums[i + <span class="number">1</span>] - nums[i]</span><br><span class="line">            <span class="keyword">if</span> dist &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> dist == <span class="number">2</span>:</span><br><span class="line">                    ranges.append(<span class="built_in">str</span>(nums[i] + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    start = nums[i] + <span class="number">1</span></span><br><span class="line">                    end = nums[i + <span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">                    ranges.append(<span class="string">&quot;&#123;0:d&#125;-&gt;&#123;1:d&#125;&quot;</span>.<span class="built_in">format</span>(start, end))</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> ranges</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;163-Missing-Ranges-easy&quot;&gt;&lt;a href=&quot;#163-Missing-Ranges-easy&quot; class=&quot;headerlink&quot; title=&quot;163. Missing Ranges(easy)&quot;&gt;&lt;/a&gt;163. Missing Ra</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="two-pointer" scheme="http://example.com/tags/two-pointer/"/>
    
  </entry>
  
  <entry>
    <title>1155. Number of Dice Rolls With Target Sum(medium)</title>
    <link href="http://example.com/2022/10/02/1155/"/>
    <id>http://example.com/2022/10/02/1155/</id>
    <published>2022-10-03T03:52:08.000Z</published>
    <updated>2022-10-03T04:02:52.715Z</updated>
    
    <content type="html"><![CDATA[<ol start="1155"><li>Number of Dice Rolls With Target Sum(medium)</li></ol><p>You have n dice and each die has k faces numbered from 1 to k.</p><p>Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.</p><p>这题乍一看就是dp，而且类似于爬楼梯问题，相当于一次爬K个台阶，一共爬n次爬到target的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 1, k = 6, target = 3</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: You throw one die with 6 faces.</span><br><span class="line">There is only one way to get a sum of 3.</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/solutions/2652934/python-top-down-bottom-up/">题解</a></h3><p>We are asked to figure out how many times we get target sum with n dice with values 1..k.<br>The important point is - sum of all faced-up numbers. So it cannot be a subset of n dice. It should be sum of all faced-up dice.</p><p>We are going to pick the 1st dice with value 1. Then we going to pick the 2nd dice with value 1 and so on until we ran out of dice.<br>sum([1,1,1,..1] n times) == target?</p><p>Then we are going to pick the 1st dice with value 1 and the 2nd dice with value 2 and so on.<br>sum([[1,2,1,..1] n times) == target?</p><p>…<br>sum([[3,1,5,..4] n times) == target?<br>…</p><p>…</p><p>n) sum([k,k,…k] n times) == target?<br>When we ran out of dice (n -&gt; 0) we check if the sum of all picked dice values == target. If yes, return 1, else return 0 for a specific permutation.</p><p>They want us to count [1,2] and [2,1] as 2 different sets. The order of items is important. We are working with permutations.</p><p>Find the target sum in all permutations of size n with element values ranging from 1…k.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numRollsToTarget</span>(<span class="params">self, N: <span class="built_in">int</span>, k: <span class="built_in">int</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># [1] 2 3 4 5 6</span></span><br><span class="line">        <span class="comment"># 1 2 3 4 5 [6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bottom-up/tabulation TC: (N*k*target) SC: (N*target)</span></span><br><span class="line">        MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        </span><br><span class="line">        dp = [[<span class="number">0</span>] * (target + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(i, target + <span class="number">1</span>):</span><br><span class="line">                    dp[n][t] += dp[n - <span class="number">1</span>][t - i] % MOD</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[N][target] % MOD</span><br><span class="line"></span><br><span class="line"><span class="comment"># top-down</span></span><br><span class="line"><span class="comment">#         @cache</span></span><br><span class="line"><span class="comment">#         def solve(n, t):</span></span><br><span class="line"><span class="comment">#             if n == 0:</span></span><br><span class="line"><span class="comment">#                 return 1 if t == 0 else 0 # if we ran out of dice and we got our target value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#             count = 0</span></span><br><span class="line"><span class="comment">#             for j in range(1, k + 1):</span></span><br><span class="line"><span class="comment">#                 if t - j &gt;= 0:</span></span><br><span class="line"><span class="comment">#                     count += solve(n - 1, t - j)</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#             return count</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#         return solve(n, target) % MOD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;1155&quot;&gt;
&lt;li&gt;Number of Dice Rolls With Target Sum(medium)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You have n dice and each die has k faces numbered from 1 to</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>119. Pascal&#39;s Triangle II(easy)</title>
    <link href="http://example.com/2022/10/02/119/"/>
    <id>http://example.com/2022/10/02/119/</id>
    <published>2022-10-02T21:28:41.000Z</published>
    <updated>2022-10-02T21:29:52.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="119-Pascal’s-Triangle-II-easy"><a href="#119-Pascal’s-Triangle-II-easy" class="headerlink" title="119. Pascal’s Triangle II(easy)"></a>119. Pascal’s Triangle II(easy)</h1><h2 id="Given-an-integer-rowIndex-return-the-rowIndexth-0-indexed-row-of-the-Pascal’s-triangle"><a href="#Given-an-integer-rowIndex-return-the-rowIndexth-0-indexed-row-of-the-Pascal’s-triangle" class="headerlink" title="Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal’s triangle."></a>Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal’s triangle.</h2><h2 id="In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown"><a href="#In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown" class="headerlink" title="In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:"></a>In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:</h2><p>跟118几乎一模一样，只不过这道题是输出特定的某一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRow</span>(<span class="params">self, rowIndex: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> rowIndex==<span class="number">0</span>:<span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">        res=[[<span class="number">1</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res)&lt;rowIndex+<span class="number">1</span>:</span><br><span class="line">            newRow=[a+b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">0</span>]+res[-<span class="number">1</span>],res[-<span class="number">1</span>]+[<span class="number">0</span>])]</span><br><span class="line">            res.append(newRow)</span><br><span class="line">        <span class="keyword">return</span> newRow</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;119-Pascal’s-Triangle-II-easy&quot;&gt;&lt;a href=&quot;#119-Pascal’s-Triangle-II-easy&quot; class=&quot;headerlink&quot; title=&quot;119. Pascal’s Triangle II(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>139</title>
    <link href="http://example.com/2022/10/02/139/"/>
    <id>http://example.com/2022/10/02/139/</id>
    <published>2022-10-02T21:28:29.000Z</published>
    <updated>2022-10-02T21:28:29.614Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>118. Pascal&#39;s Triangle</title>
    <link href="http://example.com/2022/10/02/118/"/>
    <id>http://example.com/2022/10/02/118/</id>
    <published>2022-10-02T21:19:31.000Z</published>
    <updated>2022-10-02T21:31:39.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a>118. Pascal’s Triangle</h1><h2 id="Given-an-integer-numRows-return-the-first-numRows-of-Pascal’s-triangle"><a href="#Given-an-integer-numRows-return-the-first-numRows-of-Pascal’s-triangle" class="headerlink" title="Given an integer numRows, return the first numRows of Pascal’s triangle."></a>Given an integer numRows, return the first numRows of Pascal’s triangle.</h2><h2 id="In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown"><a href="#In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown" class="headerlink" title="In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:"></a>In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:</h2><p>杨辉三角,算是数学题<br>观察一下规律，发现当前一行只比上一行多了一个元素，最最关键的一点：本行元素等于上一行元素往后错一位再逐个相加：</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="https://leetcode.cn/problems/pascals-triangle/solution/qu-qiao-jie-fa-cuo-yi-wei-zai-zhu-ge-xiang-jia-28m/">题解</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, numRows: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">0</span>: <span class="keyword">return</span> []</span><br><span class="line">        res = [[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res) &lt; numRows:</span><br><span class="line">            newRow = [a+b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">0</span>]+res[-<span class="number">1</span>], res[-<span class="number">1</span>]+[<span class="number">0</span>])]</span><br><span class="line">            res.append(newRow)      </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;118-Pascal’s-Triangle&quot;&gt;&lt;a href=&quot;#118-Pascal’s-Triangle&quot; class=&quot;headerlink&quot; title=&quot;118. Pascal’s Triangle&quot;&gt;&lt;/a&gt;118. Pascal’s Triangle</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>125. Valid Palindrome</title>
    <link href="http://example.com/2022/10/02/125/"/>
    <id>http://example.com/2022/10/02/125/</id>
    <published>2022-10-02T21:07:57.000Z</published>
    <updated>2022-10-02T21:20:28.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a>125. Valid Palindrome</h1><h2 id="A-phrase-is-a-palindrome-if-after-converting-all-uppercase-letters-into-lowercase-letters-and-removing-all-non-alphanumeric-characters-it-reads-the-same-forward-and-backward-Alphanumeric-characters-include-letters-and-numbers"><a href="#A-phrase-is-a-palindrome-if-after-converting-all-uppercase-letters-into-lowercase-letters-and-removing-all-non-alphanumeric-characters-it-reads-the-same-forward-and-backward-Alphanumeric-characters-include-letters-and-numbers" class="headerlink" title="A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers."></a>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</h2><h2 id="Given-a-string-s-return-true-if-it-is-a-palindrome-or-false-otherwise"><a href="#Given-a-string-s-return-true-if-it-is-a-palindrome-or-false-otherwise" class="headerlink" title="Given a string s, return true if it is a palindrome, or false otherwise."></a>Given a string s, return true if it is a palindrome, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span><br></pre></td></tr></table></figure><p>这里有个重要的函数isalnum()，用来判断是不是字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        left,right=<span class="number">0</span>,n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> <span class="keyword">not</span> s[left].isalnum():</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> <span class="keyword">not</span> s[right].isalnum():</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left&lt;right:</span><br><span class="line">                <span class="keyword">if</span> s[left].lower()!=s[right].lower():</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                left,right=left+<span class="number">1</span>,right-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;125-Valid-Palindrome&quot;&gt;&lt;a href=&quot;#125-Valid-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;125. Valid Palindrome&quot;&gt;&lt;/a&gt;125. Valid Palindrome&lt;/h1</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="two-pointer" scheme="http://example.com/tags/two-pointer/"/>
    
    <category term="Palindrome" scheme="http://example.com/tags/Palindrome/"/>
    
  </entry>
  
  <entry>
    <title>111. Minimum Depth of Binary Tree(easy)</title>
    <link href="http://example.com/2022/10/02/111/"/>
    <id>http://example.com/2022/10/02/111/</id>
    <published>2022-10-02T20:50:09.000Z</published>
    <updated>2022-10-02T21:05:04.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="111-Minimum-Depth-of-Binary-Tree-easy"><a href="#111-Minimum-Depth-of-Binary-Tree-easy" class="headerlink" title="111. Minimum Depth of Binary Tree(easy)"></a>111. Minimum Depth of Binary Tree(easy)</h1><h2 id="Given-a-binary-tree-find-its-minimum-depth"><a href="#Given-a-binary-tree-find-its-minimum-depth" class="headerlink" title="Given a binary tree, find its minimum depth."></a>Given a binary tree, find its minimum depth.</h2><h2 id="The-minimum-depth-is-the-number-of-nodes-along-the-shortest-path-from-the-root-node-down-to-the-nearest-leaf-node"><a href="#The-minimum-depth-is-the-number-of-nodes-along-the-shortest-path-from-the-root-node-down-to-the-nearest-leaf-node" class="headerlink" title="The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."></a>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</h2><h2 id="Note-A-leaf-is-a-node-with-no-children"><a href="#Note-A-leaf-is-a-node-with-no-children" class="headerlink" title="Note: A leaf is a node with no children."></a>Note: A leaf is a node with no children.</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/solution/li-jie-zhe-dao-ti-de-jie-shu-tiao-jian-by-user7208/">题解</a></p><p>根据大佬的Java代码写的python</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//这道题递归条件里分为三种情况</span></span><br><span class="line">        <span class="comment">//1.左孩子和右孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.如果左孩子和右孩子其中一个为空，那么需要返回比较大的那个孩子的深度        </span></span><br><span class="line">        <span class="keyword">int</span> m1 = minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> m2 = minDepth(root.right);</span><br><span class="line">        <span class="comment">//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> || root.right == <span class="keyword">null</span>) <span class="keyword">return</span> m1 + m2 + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(m1,m2) + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">#这道题递归条件里分为三种情况</span></span><br><span class="line">        <span class="comment">#1.左孩子和右孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">        <span class="keyword">if</span> root.left==<span class="literal">None</span> <span class="keyword">and</span> root.right==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#2.如果左孩子和右孩子其中一个为空，那么需要返回比较大的那个孩子的深度 </span></span><br><span class="line">        m1=self.minDepth(root.left)</span><br><span class="line">        m2=self.minDepth(root.right)</span><br><span class="line">        <span class="comment">#这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">        <span class="keyword">if</span> root.left==<span class="literal">None</span> <span class="keyword">or</span> root.right==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> m1+m2+<span class="number">1</span></span><br><span class="line">        <span class="comment">#3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(m1,m2)+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;111-Minimum-Depth-of-Binary-Tree-easy&quot;&gt;&lt;a href=&quot;#111-Minimum-Depth-of-Binary-Tree-easy&quot; class=&quot;headerlink&quot; title=&quot;111. Minimum Depth</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>108. Convert Sorted Array to Binary Search Tree(easy)</title>
    <link href="http://example.com/2022/10/02/108/"/>
    <id>http://example.com/2022/10/02/108/</id>
    <published>2022-10-02T20:27:43.000Z</published>
    <updated>2022-10-02T20:41:58.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="108-Convert-Sorted-Array-to-Binary-Search-Tree-easy"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree-easy" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree(easy)"></a>108. Convert Sorted Array to Binary Search Tree(easy)</h1><h2 id="Given-an-integer-array-nums-where-the-elements-are-sorted-in-ascending-order-convert-it-to-a-height-balanced-binary-search-tree"><a href="#Given-an-integer-array-nums-where-the-elements-are-sorted-in-ascending-order-convert-it-to-a-height-balanced-binary-search-tree" class="headerlink" title="Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree."></a>Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</h2><h2 id="A-height-balanced-binary-tree-is-a-binary-tree-in-which-the-depth-of-the-two-subtrees-of-every-node-never-differs-by-more-than-one"><a href="#A-height-balanced-binary-tree-is-a-binary-tree-in-which-the-depth-of-the-two-subtrees-of-every-node-never-differs-by-more-than-one" class="headerlink" title="A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."></a>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</h2><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/solution/jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-s-33/">中序遍历</a></p><p>中序遍历，总是选择中间位置左边的数字作为根节点<br>选择中间位置左边的数字作为根节点，则根节点的下标为 \textit{mid}=(\textit{left}+\textit{right})/2mid=(left+right)/2，此处的除法为整数除法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">left, right</span>):</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 总是选择中间位置左边的数字作为根节点</span></span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            root = TreeNode(nums[mid])</span><br><span class="line">            root.left = helper(left, mid - <span class="number">1</span>)</span><br><span class="line">            root.right = helper(mid + <span class="number">1</span>, right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;108-Convert-Sorted-Array-to-Binary-Search-Tree-easy&quot;&gt;&lt;a href=&quot;#108-Convert-Sorted-Array-to-Binary-Search-Tree-easy&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>100. Same Tree(easy)</title>
    <link href="http://example.com/2022/10/02/100/"/>
    <id>http://example.com/2022/10/02/100/</id>
    <published>2022-10-02T20:19:30.000Z</published>
    <updated>2022-10-02T20:23:48.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="100-Same-Tree-easy"><a href="#100-Same-Tree-easy" class="headerlink" title="100. Same Tree(easy)"></a>100. Same Tree(easy)</h1><h2 id="Given-the-roots-of-two-binary-trees-p-and-q-write-a-function-to-check-if-they-are-the-same-or-not"><a href="#Given-the-roots-of-two-binary-trees-p-and-q-write-a-function-to-check-if-they-are-the-same-or-not" class="headerlink" title="Given the roots of two binary trees p and q, write a function to check if they are the same or not."></a>Given the roots of two binary trees p and q, write a function to check if they are the same or not.</h2><h2 id="Two-binary-trees-are-considered-the-same-if-they-are-structurally-identical-and-the-nodes-have-the-same-value"><a href="#Two-binary-trees-are-considered-the-same-if-they-are-structurally-identical-and-the-nodes-have-the-same-value" class="headerlink" title="Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."></a>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: p = [1,2,3], q = [1,2,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Recursion递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span>(<span class="params">self, p: <span class="type">Optional</span>[TreeNode], q: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q <span class="keyword">or</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val!=q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.right,q.right) <span class="keyword">and</span> self.isSameTree(p.left,q.left)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;100-Same-Tree-easy&quot;&gt;&lt;a href=&quot;#100-Same-Tree-easy&quot; class=&quot;headerlink&quot; title=&quot;100. Same Tree(easy)&quot;&gt;&lt;/a&gt;100. Same Tree(easy)&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>94. Binary Tree Inorder Traversal(easy)</title>
    <link href="http://example.com/2022/10/02/94/"/>
    <id>http://example.com/2022/10/02/94/</id>
    <published>2022-10-02T20:04:34.000Z</published>
    <updated>2022-10-02T20:21:26.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="94-Binary-Tree-Inorder-Traversal-easy"><a href="#94-Binary-Tree-Inorder-Traversal-easy" class="headerlink" title="94. Binary Tree Inorder Traversal(easy)"></a>94. Binary Tree Inorder Traversal(easy)</h1><h2 id="Given-the-root-of-a-binary-tree-return-the-inorder-traversal-of-its-nodes’-values"><a href="#Given-the-root-of-a-binary-tree-return-the-inorder-traversal-of-its-nodes’-values" class="headerlink" title="Given the root of a binary tree, return the inorder traversal of its nodes’ values."></a>Given the root of a binary tree, return the inorder traversal of its nodes’ values.</h2><p>二叉树的中序遍历</p><p>递归遍历</p><p>前序遍历：打印 - 左 - 右<br>中序遍历：左 - 打印 - 右<br>后序遍历：左 - 右 - 打印<br>题目要求的是中序遍历，那就按照 左-打印-右这种顺序遍历树就可以了，递归函数实现</p><p>终止条件：当前节点为空时<br>函数内：递归的调用左节点，打印当前节点，再递归调用右节点<br>时间复杂度：O(n)<br>空间复杂度：O(h)，h 是树的高度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;94-Binary-Tree-Inorder-Traversal-easy&quot;&gt;&lt;a href=&quot;#94-Binary-Tree-Inorder-Traversal-easy&quot; class=&quot;headerlink&quot; title=&quot;94. Binary Tree In</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>70. Climbing Stairs(easy)</title>
    <link href="http://example.com/2022/10/02/70/"/>
    <id>http://example.com/2022/10/02/70/</id>
    <published>2022-10-02T19:51:38.000Z</published>
    <updated>2022-10-02T20:06:10.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="70-Climbing-Stairs-easy"><a href="#70-Climbing-Stairs-easy" class="headerlink" title="70. Climbing Stairs(easy)"></a>70. Climbing Stairs(easy)</h1><h2 id="You-are-climbing-a-staircase-It-takes-n-steps-to-reach-the-top"><a href="#You-are-climbing-a-staircase-It-takes-n-steps-to-reach-the-top" class="headerlink" title="You are climbing a staircase. It takes n steps to reach the top."></a>You are climbing a staircase. It takes n steps to reach the top.</h2><h2 id="Each-time-you-can-either-climb-1-or-2-steps-In-how-many-distinct-ways-can-you-climb-to-the-top"><a href="#Each-time-you-can-either-climb-1-or-2-steps-In-how-many-distinct-ways-can-you-climb-to-the-top" class="headerlink" title="Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"></a>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><p>一道经典DP题</p><p>状态转移方程：dp[i]=dp[i−1]+dp[i−2]<br>f(1) = 1  f(2) = 2  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def climbStairs(self, n: int) -&gt; int:</span><br><span class="line">        if n&lt;=2:</span><br><span class="line">            return n</span><br><span class="line">        before_last=1</span><br><span class="line">        last=2</span><br><span class="line">        for i in range(2,n):</span><br><span class="line">            current=before_last+last</span><br><span class="line">            before_last=last</span><br><span class="line">            last = current</span><br><span class="line">        return last</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;70-Climbing-Stairs-easy&quot;&gt;&lt;a href=&quot;#70-Climbing-Stairs-easy&quot; class=&quot;headerlink&quot; title=&quot;70. Climbing Stairs(easy)&quot;&gt;&lt;/a&gt;70. Climbing St</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>67. Add Binary(easy)</title>
    <link href="http://example.com/2022/10/02/67/"/>
    <id>http://example.com/2022/10/02/67/</id>
    <published>2022-10-02T19:39:22.000Z</published>
    <updated>2022-10-02T20:06:21.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="67-Add-Binary-easy"><a href="#67-Add-Binary-easy" class="headerlink" title="67. Add Binary(easy)"></a>67. Add Binary(easy)</h1><h2 id="Given-two-binary-strings-a-and-b-return-their-sum-as-a-binary-string"><a href="#Given-two-binary-strings-a-and-b-return-their-sum-as-a-binary-string" class="headerlink" title="Given two binary strings a and b, return their sum as a binary string."></a>Given two binary strings a and b, return their sum as a binary string.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><p>实现二进制加法<br><a href="https://leetcode.com/problems/add-binary/solutions/414426/add-binary/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span>(<span class="params">self, a, b</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        n = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b))</span><br><span class="line">        a, b = a.zfill(n), b.zfill(n)</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> carry % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                answer.append(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                answer.append(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            carry //= <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            answer.append(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        answer.reverse()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(answer)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;67-Add-Binary-easy&quot;&gt;&lt;a href=&quot;#67-Add-Binary-easy&quot; class=&quot;headerlink&quot; title=&quot;67. Add Binary(easy)&quot;&gt;&lt;/a&gt;67. Add Binary(easy)&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
</feed>
