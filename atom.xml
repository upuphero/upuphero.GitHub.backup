<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-07T03:22:50.315Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>328. Odd Even Linked List (Medium)</title>
    <link href="http://example.com/2022/08/06/328/"/>
    <id>http://example.com/2022/08/06/328/</id>
    <published>2022-08-07T03:14:11.000Z</published>
    <updated>2022-08-07T03:22:50.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="328-Odd-Even-Linked-List-Medium"><a href="#328-Odd-Even-Linked-List-Medium" class="headerlink" title="328. Odd Even Linked List (Medium)"></a>328. Odd Even Linked List (Medium)</h1><h2 id="Given-the-head-of-a-singly-linked-list-group-all-the-nodes-with-odd-indices-together-followed-by-the-nodes-with-even-indices-and-return-the-reordered-list"><a href="#Given-the-head-of-a-singly-linked-list-group-all-the-nodes-with-odd-indices-together-followed-by-the-nodes-with-even-indices-and-return-the-reordered-list" class="headerlink" title="Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list."></a>Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.</h2><h2 id="The-first-node-is-considered-odd-and-the-second-node-is-even-and-so-on"><a href="#The-first-node-is-considered-odd-and-the-second-node-is-even-and-so-on" class="headerlink" title="The first node is considered odd, and the second node is even, and so on."></a>The first node is considered odd, and the second node is even, and so on.</h2><h2 id="Note-that-the-relative-order-inside-both-the-even-and-odd-groups-should-remain-as-it-was-in-the-input"><a href="#Note-that-the-relative-order-inside-both-the-even-and-odd-groups-should-remain-as-it-was-in-the-input" class="headerlink" title="Note that the relative order inside both the even and odd groups should remain as it was in the input."></a>Note that the relative order inside both the even and odd groups should remain as it was in the input.</h2><h2 id="You-must-solve-the-problem-in-O-1-extra-space-complexity-and-O-n-time-complexity"><a href="#You-must-solve-the-problem-in-O-1-extra-space-complexity-and-O-n-time-complexity" class="headerlink" title="You must solve the problem in O(1) extra space complexity and O(n) time complexity."></a>You must solve the problem in O(1) extra space complexity and O(n) time complexity.</h2><p>总结是把奇数节点串一块儿，再把偶数节点串一起，然后把两个连成一条链表</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/odd-even-linked-list/solution/qi-ou-lian-biao-by-leetcode-solution/">官方题解</a></h3><p><img src="https://assets.leetcode-cn.com/solution-static/328/1.png" alt="图片"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oddEvenList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        evenHead = head.<span class="built_in">next</span> <span class="comment">#新建一个链表头</span></span><br><span class="line">        odd, even = head, evenHead</span><br><span class="line">        <span class="keyword">while</span> even <span class="keyword">and</span> even.<span class="built_in">next</span>:</span><br><span class="line">            odd.<span class="built_in">next</span> = even.<span class="built_in">next</span></span><br><span class="line">            odd = odd.<span class="built_in">next</span></span><br><span class="line">            even.<span class="built_in">next</span> = odd.<span class="built_in">next</span></span><br><span class="line">            even = even.<span class="built_in">next</span></span><br><span class="line">        odd.<span class="built_in">next</span> = evenHead</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;328-Odd-Even-Linked-List-Medium&quot;&gt;&lt;a href=&quot;#328-Odd-Even-Linked-List-Medium&quot; class=&quot;headerlink&quot; title=&quot;328. Odd Even Linked List (Med</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>725. Split Linked List in Parts(Medium)</title>
    <link href="http://example.com/2022/08/06/725/"/>
    <id>http://example.com/2022/08/06/725/</id>
    <published>2022-08-06T21:29:09.000Z</published>
    <updated>2022-08-07T03:16:30.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="725-Split-Linked-List-in-Parts-Medium"><a href="#725-Split-Linked-List-in-Parts-Medium" class="headerlink" title="725. Split Linked List in Parts(Medium)"></a>725. Split Linked List in Parts(Medium)</h1><h2 id="Given-the-head-of-a-singly-linked-list-and-an-integer-k-split-the-linked-list-into-k-consecutive-linked-list-parts"><a href="#Given-the-head-of-a-singly-linked-list-and-an-integer-k-split-the-linked-list-into-k-consecutive-linked-list-parts" class="headerlink" title="Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts."></a>Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.</h2><h2 id="The-length-of-each-part-should-be-as-equal-as-possible-no-two-parts-should-have-a-size-differing-by-more-than-one-This-may-lead-to-some-parts-being-null"><a href="#The-length-of-each-part-should-be-as-equal-as-possible-no-two-parts-should-have-a-size-differing-by-more-than-one-This-may-lead-to-some-parts-being-null" class="headerlink" title="The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null."></a>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</h2><h2 id="The-parts-should-be-in-the-order-of-occurrence-in-the-input-list-and-parts-occurring-earlier-should-always-have-a-size-greater-than-or-equal-to-parts-occurring-later"><a href="#The-parts-should-be-in-the-order-of-occurrence-in-the-input-list-and-parts-occurring-earlier-should-always-have-a-size-greater-than-or-equal-to-parts-occurring-later" class="headerlink" title="The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later."></a>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</h2><h2 id="Return-an-array-of-the-k-parts"><a href="#Return-an-array-of-the-k-parts" class="headerlink" title="Return an array of the k parts."></a>Return an array of the k parts.</h2><h3 id="题目描述：把链表分隔成-k-部分，每部分的长度都应该尽可能相同，排在前面的长度应该大于等于后面的。"><a href="#题目描述：把链表分隔成-k-部分，每部分的长度都应该尽可能相同，排在前面的长度应该大于等于后面的。" class="headerlink" title="题目描述：把链表分隔成 k 部分，每部分的长度都应该尽可能相同，排在前面的长度应该大于等于后面的。"></a>题目描述：把链表分隔成 k 部分，每部分的长度都应该尽可能相同，排在前面的长度应该大于等于后面的。</h3><p>其实就是n个数分成m组，前面一些组多一个，n/m+1，后面的组数量是n/m</p><p><a href="https://leetcode.cn/problems/split-linked-list-in-parts/solution/fen-ge-lian-biao-by-leetcode-solution-wevt/">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitListToParts</span>(<span class="params">self, head: ListNode, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[ListNode]:</span></span><br><span class="line">        L = <span class="number">0</span></span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node: <span class="comment">#一次遍历得到长度</span></span><br><span class="line">            L += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        quotient, remainder = L // k, L % k</span><br><span class="line"></span><br><span class="line">        parts = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]  <span class="comment">#create lists of size n and initialize with None</span></span><br><span class="line">        i, curr = <span class="number">0</span>, head</span><br><span class="line">        <span class="keyword">while</span> i &lt; k <span class="keyword">and</span> curr:</span><br><span class="line">            parts[i] = curr</span><br><span class="line">            <span class="keyword">if</span> i&lt;remainder:</span><br><span class="line">                part_size = quotient + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                part_size = quotient</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(part_size - <span class="number">1</span>):</span><br><span class="line">                <span class="comment">#for _ in range:When you are not interested in some values returned by a function we use underscore in place of variable name . Basically it means you are not interested in how many times the loop is run till now just that it should run some specific number of times overall.</span></span><br><span class="line">                curr = curr.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = curr.<span class="built_in">next</span></span><br><span class="line">            curr.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            curr = <span class="built_in">next</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> parts</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;725-Split-Linked-List-in-Parts-Medium&quot;&gt;&lt;a href=&quot;#725-Split-Linked-List-in-Parts-Medium&quot; class=&quot;headerlink&quot; title=&quot;725. Split Linked </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>234. Palindrome Linked List (Easy)</title>
    <link href="http://example.com/2022/08/04/234/"/>
    <id>http://example.com/2022/08/04/234/</id>
    <published>2022-08-05T03:41:28.000Z</published>
    <updated>2022-08-07T03:14:40.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="234-Palindrome-Linked-List-Easy"><a href="#234-Palindrome-Linked-List-Easy" class="headerlink" title="234. Palindrome Linked List (Easy)"></a>234. Palindrome Linked List (Easy)</h1><h2 id="Given-the-head-of-a-singly-linked-list-return-true-if-it-is-a-palindrome"><a href="#Given-the-head-of-a-singly-linked-list-return-true-if-it-is-a-palindrome" class="headerlink" title="Given the head of a singly linked list, return true if it is a palindrome."></a>Given the head of a singly linked list, return true if it is a palindrome.</h2><p>这道题的关键在于如何控制空间复杂度。</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/">官方题解</a></h3><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n):"></a>O(n):</h3><p>简单来说就是把链表的数值全都存到数组里，然后再进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        vals = []</span><br><span class="line">        current_node = head</span><br><span class="line">        <span class="keyword">while</span> current_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            vals.append(current_node.val)</span><br><span class="line">            current_node = current_node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> vals == vals[::-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1):"></a>O(1):</h3><p>避免使用 O(n)额外空间的方法就是改变输入。</p><p>我们可以将链表的后半部分反转（修改链表结构），然后将前半部分和后半部分进行比较。比较完成后我们应该将链表恢复原样。虽然不需要恢复也能通过测试用例，但是使用该函数的人通常不希望链表结构被更改。</p><p>该方法虽然可以将空间复杂度降到 O(1)，但是在并发环境下，该方法也有缺点。在并发环境下，函数运行时需要锁定其他线程或进程对链表的访问，因为在函数执行过程中链表会被修改。</p><p>算法</p><p>整个流程可以分为以下五个步骤：</p><ol><li>找到前半部分链表的尾节点。</li><li>反转后半部分链表。</li><li>判断是否回文。</li><li>恢复链表。</li><li>返回结果。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到前半部分链表的尾节点并反转后半部分链表</span></span><br><span class="line">        first_half_end = self.end_of_first_half(head)</span><br><span class="line">        second_half_start = self.reverse_list(first_half_end.<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否回文</span></span><br><span class="line">        result = <span class="literal">True</span></span><br><span class="line">        first_position = head</span><br><span class="line">        second_position = second_half_start</span><br><span class="line">        <span class="keyword">while</span> result <span class="keyword">and</span> second_position <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> first_position.val != second_position.val:</span><br><span class="line">                result = <span class="literal">False</span></span><br><span class="line">            first_position = first_position.<span class="built_in">next</span></span><br><span class="line">            second_position = second_position.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 还原链表并返回结果</span></span><br><span class="line">        first_half_end.<span class="built_in">next</span> = self.reverse_list(second_half_start)</span><br><span class="line">        <span class="keyword">return</span> result    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_of_first_half</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> fast.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast.<span class="built_in">next</span>.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        previous = <span class="literal">None</span></span><br><span class="line">        current = head</span><br><span class="line">        <span class="keyword">while</span> current <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            next_node = current.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = previous</span><br><span class="line">            previous = current</span><br><span class="line">            current = next_node</span><br><span class="line">        <span class="keyword">return</span> previous</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;234-Palindrome-Linked-List-Easy&quot;&gt;&lt;a href=&quot;#234-Palindrome-Linked-List-Easy&quot; class=&quot;headerlink&quot; title=&quot;234. Palindrome Linked List (E</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>445. Add Two Numbers II (Medium)</title>
    <link href="http://example.com/2022/08/04/445/"/>
    <id>http://example.com/2022/08/04/445/</id>
    <published>2022-08-05T03:38:49.000Z</published>
    <updated>2022-08-06T21:28:48.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="445-Add-Two-Numbers-II-Medium"><a href="#445-Add-Two-Numbers-II-Medium" class="headerlink" title="445. Add Two Numbers II (Medium)"></a>445. Add Two Numbers II (Medium)</h1><h2 id="You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-most-significant-digit-comes-first-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list"><a href="#You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-most-significant-digit-comes-first-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list" class="headerlink" title="You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."></a>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</h2><h2 id="You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself"><a href="#You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself" class="headerlink" title="You may assume the two numbers do not contain any leading zero, except the number 0 itself."></a>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</h2><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: l1 = [7,2,4,3], l2 = [5,6,4]</span><br><span class="line">Output: [7,8,0,7]</span><br></pre></td></tr></table></figure><p>这个例子想讲的其实就是7243+564=7807</p><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/add-two-numbers-ii/solution/liang-shu-xiang-jia-ii-by-leetcode-solution/">官方题解</a></h2><p>本题的主要难点在于链表中数位的顺序与我们做加法的顺序是相反的，为了逆序处理所有数位，我们可以使用栈：把所有数字压入栈中，再依次取出相加。计算过程中需要注意进位的情况。</p><h3 id="对于逆序处理应该首先想到栈"><a href="#对于逆序处理应该首先想到栈" class="headerlink" title="对于逆序处理应该首先想到栈"></a>对于逆序处理应该首先想到栈</h3><p><a href="https://leetcode.cn/problems/add-two-numbers-ii/solution/zhang-by-kind-i3lackburnmaf-aamu/">代码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        s1, s2 = [], []</span><br><span class="line">        <span class="keyword">while</span> l1:</span><br><span class="line">            s1.append(l1.val)</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> l2:</span><br><span class="line">            s2.append(l2.val)</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">        ans = <span class="literal">None</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> s1 <span class="keyword">or</span> s2 <span class="keyword">or</span> carry != <span class="number">0</span>:</span><br><span class="line">            a = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> s1 <span class="keyword">else</span> s1.pop()</span><br><span class="line">            b = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> s2 <span class="keyword">else</span> s2.pop()</span><br><span class="line">            cur = a + b + carry</span><br><span class="line">            carry = cur // <span class="number">10</span></span><br><span class="line">            cur %= <span class="number">10</span></span><br><span class="line">            curnode = ListNode(cur)</span><br><span class="line">            curnode.<span class="built_in">next</span> = ans</span><br><span class="line">            ans = curnode</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;445-Add-Two-Numbers-II-Medium&quot;&gt;&lt;a href=&quot;#445-Add-Two-Numbers-II-Medium&quot; class=&quot;headerlink&quot; title=&quot;445. Add Two Numbers II (Medium)&quot;&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>24. Swap Nodes in Pairs (Medium)</title>
    <link href="http://example.com/2022/08/04/24/"/>
    <id>http://example.com/2022/08/04/24/</id>
    <published>2022-08-05T03:28:03.000Z</published>
    <updated>2022-08-05T03:50:21.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="24-Swap-Nodes-in-Pairs-Medium"><a href="#24-Swap-Nodes-in-Pairs-Medium" class="headerlink" title="24. Swap Nodes in Pairs (Medium)"></a>24. Swap Nodes in Pairs (Medium)</h1><h2 id="Given-a-linked-list-swap-every-two-adjacent-nodes-and-return-its-head-You-must-solve-the-problem-without-modifying-the-values-in-the-list’s-nodes-i-e-only-nodes-themselves-may-be-changed"><a href="#Given-a-linked-list-swap-every-two-adjacent-nodes-and-return-its-head-You-must-solve-the-problem-without-modifying-the-values-in-the-list’s-nodes-i-e-only-nodes-themselves-may-be-changed" class="headerlink" title="Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)"></a>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/solution/liang-liang-jiao-huan-lian-biao-zhong-de-jie-di-91/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        newHead = head.<span class="built_in">next</span></span><br><span class="line">        head.<span class="built_in">next</span> = self.swapPairs(newHead.<span class="built_in">next</span>)</span><br><span class="line">        newHead.<span class="built_in">next</span> = head</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;24-Swap-Nodes-in-Pairs-Medium&quot;&gt;&lt;a href=&quot;#24-Swap-Nodes-in-Pairs-Medium&quot; class=&quot;headerlink&quot; title=&quot;24. Swap Nodes in Pairs (Medium)&quot;&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>19. Remove Nth Node From End of List (medium)</title>
    <link href="http://example.com/2022/08/01/19/"/>
    <id>http://example.com/2022/08/01/19/</id>
    <published>2022-08-02T02:17:04.000Z</published>
    <updated>2022-08-05T03:27:38.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-Remove-Nth-Node-From-End-of-List-medium"><a href="#19-Remove-Nth-Node-From-End-of-List-medium" class="headerlink" title="19. Remove Nth Node From End of List (medium)"></a>19. Remove Nth Node From End of List (medium)</h1><h2 id="Given-the-head-of-a-linked-list-remove-the-nth-node-from-the-end-of-the-list-and-return-its-head"><a href="#Given-the-head-of-a-linked-list-remove-the-nth-node-from-the-end-of-the-list-and-return-its-head" class="headerlink" title="Given the head of a linked list, remove the nth node from the end of the list and return its head."></a>Given the head of a linked list, remove the nth node from the end of the list and return its head.</h2><p>移除倒序的第n个节点</p><p>第一反应是两次遍历，第一次遍历先判断链表长度L，然后再遍历第二次算出应该删除的L−n+1节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getLength</span>(<span class="params">head: ListNode</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">            length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> head:</span><br><span class="line">                length += <span class="number">1</span></span><br><span class="line">                head = head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 添加哑结点dummy</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>, head)</span><br><span class="line">        length = getLength(head)</span><br><span class="line">        current = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length - n + <span class="number">1</span>):</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>方法二</p><h3 id="双指针解决问题思路："><a href="#双指针解决问题思路：" class="headerlink" title="双指针解决问题思路："></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solution/dong-hua-tu-jie-leetcode-di-19-hao-wen-ti-shan-chu/">双指针解决问题思路</a>：</h3><p>我们可以设想假设设定了双指针 p 和 q 的话，当 q 指向末尾的 NULL，p 与 q 之间相隔的元素个数为 n 时，那么删除掉 p 的下一个指针就完成了要求。</p><ol><li>设置虚拟节点 dummyHead 指向 head</li><li>设定双指针 p 和 q，初始都指向虚拟节点 dummyHead</li><li>移动 q，直到 p 与 q 之间相隔的元素个数为 n</li><li>同时移动 p 与 q，直到 q 指向的为 NULL</li><li>将 p 的下一个节点指向下下个节点</li></ol><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/">代码</a>：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span>(<span class="params">self, head: ListNode, n: <span class="built_in">int</span></span>) -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>, head)</span><br><span class="line">        first = head</span><br><span class="line">        second = dummy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            first = first.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> first:</span><br><span class="line">            first = first.<span class="built_in">next</span></span><br><span class="line">            second = second.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        second.<span class="built_in">next</span> = second.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加哑节点："><a href="#添加哑节点：" class="headerlink" title="添加哑节点："></a>添加哑节点：</h3><p>添加一个哑节点（dummy node），让它的next 指针指向链表的头节点。这样一来，头节点的前驱节点就是哑节点本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dummy = ListNode(0,head)  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;19-Remove-Nth-Node-From-End-of-List-medium&quot;&gt;&lt;a href=&quot;#19-Remove-Nth-Node-From-End-of-List-medium&quot; class=&quot;headerlink&quot; title=&quot;19. Remo</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>83. Remove Duplicates from Sorted List (Easy)</title>
    <link href="http://example.com/2022/08/01/83/"/>
    <id>http://example.com/2022/08/01/83/</id>
    <published>2022-08-01T22:44:28.000Z</published>
    <updated>2022-08-01T22:46:08.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="83-Remove-Duplicates-from-Sorted-List-Easy"><a href="#83-Remove-Duplicates-from-Sorted-List-Easy" class="headerlink" title="83. Remove Duplicates from Sorted List (Easy)"></a>83. Remove Duplicates from Sorted List (Easy)</h1><h2 id="Given-the-head-of-a-sorted-linked-list-delete-all-duplicates-such-that-each-element-appears-only-once-Return-the-linked-list-sorted-as-well"><a href="#Given-the-head-of-a-sorted-linked-list-delete-all-duplicates-such-that-each-element-appears-only-once-Return-the-linked-list-sorted-as-well" class="headerlink" title="Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well."></a>Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</h2><p>删除重复节点<br>因为是有序节点，经过一遍遍历，把重复的删除就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        current = head</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span>:            </span><br><span class="line">            <span class="keyword">if</span> current.val== current.<span class="built_in">next</span>.val:</span><br><span class="line">                current.<span class="built_in">next</span> = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head     </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;83-Remove-Duplicates-from-Sorted-List-Easy&quot;&gt;&lt;a href=&quot;#83-Remove-Duplicates-from-Sorted-List-Easy&quot; class=&quot;headerlink&quot; title=&quot;83. Remo</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
    <category term="recursion" scheme="http://example.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>206. Reverse Linked List(easy)</title>
    <link href="http://example.com/2022/07/20/206/"/>
    <id>http://example.com/2022/07/20/206/</id>
    <published>2022-07-20T22:21:02.000Z</published>
    <updated>2022-07-21T03:24:20.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="206-Reverse-Linked-List-easy"><a href="#206-Reverse-Linked-List-easy" class="headerlink" title="206. Reverse Linked List(easy)"></a>206. Reverse Linked List(easy)</h1><h2 id="Given-the-head-of-a-singly-linked-list-reverse-the-list-and-return-the-reversed-list"><a href="#Given-the-head-of-a-singly-linked-list-reverse-the-list-and-return-the-reversed-list" class="headerlink" title="Given the head of a singly linked list, reverse the list, and return the reversed list."></a>Given the head of a singly linked list, reverse the list, and return the reversed list.</h2><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"></p><p>反转数组，还是用双指针，另外设置了一个临时变量tmp记录current的下一个值<br>图例可以看这个<a href="https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">回答</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        current = head</span><br><span class="line">        <span class="keyword">while</span> current !=<span class="literal">None</span>:</span><br><span class="line">            tmp = current.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = current</span><br><span class="line">            current = tmp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;206-Reverse-Linked-List-easy&quot;&gt;&lt;a href=&quot;#206-Reverse-Linked-List-easy&quot; class=&quot;headerlink&quot; title=&quot;206. Reverse Linked List(easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>160. Intersection of Two Linked Lists (Easy)</title>
    <link href="http://example.com/2022/07/20/160/"/>
    <id>http://example.com/2022/07/20/160/</id>
    <published>2022-07-20T21:41:56.000Z</published>
    <updated>2022-07-21T03:24:39.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="160-Intersection-of-Two-Linked-Lists-Easy"><a href="#160-Intersection-of-Two-Linked-Lists-Easy" class="headerlink" title="160. Intersection of Two Linked Lists (Easy)"></a>160. Intersection of Two Linked Lists (Easy)</h1><h2 id="Given-the-heads-of-two-singly-linked-lists-headA-and-headB-return-the-node-at-which-the-two-lists-intersect-If-the-two-linked-lists-have-no-intersection-at-all-return-null"><a href="#Given-the-heads-of-two-singly-linked-lists-headA-and-headB-return-the-node-at-which-the-two-lists-intersect-If-the-two-linked-lists-have-no-intersection-at-all-return-null" class="headerlink" title="Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null."></a>Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.</h2><h2 id="For-example-the-following-two-linked-lists-begin-to-intersect-at-node-c1"><a href="#For-example-the-following-two-linked-lists-begin-to-intersect-at-node-c1" class="headerlink" title="For example, the following two linked lists begin to intersect at node c1:"></a>For example, the following two linked lists begin to intersect at node c1:</h2><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"></p><h2 id="The-test-cases-are-generated-such-that-there-are-no-cycles-anywhere-in-the-entire-linked-structure"><a href="#The-test-cases-are-generated-such-that-there-are-no-cycles-anywhere-in-the-entire-linked-structure" class="headerlink" title="The test cases are generated such that there are no cycles anywhere in the entire linked structure."></a>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</h2><h2 id="Note-that-the-linked-lists-must-retain-their-original-structure-after-the-function-returns"><a href="#Note-that-the-linked-lists-must-retain-their-original-structure-after-the-function-returns" class="headerlink" title="Note that the linked lists must retain their original structure after the function returns."></a>Note that the linked lists must retain their original structure after the function returns.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-inputs-to-the-judge-are-given-as-follows-your-program-is-not-given-these-inputs"><a href="#The-inputs-to-the-judge-are-given-as-follows-your-program-is-not-given-these-inputs" class="headerlink" title="The inputs to the judge are given as follows (your program is not given these inputs):"></a>The inputs to the judge are given as follows (your program is not given these inputs):</h2><h4 id="intersectVal-The-value-of-the-node-where-the-intersection-occurs-This-is-0-if-there-is-no-intersected-node"><a href="#intersectVal-The-value-of-the-node-where-the-intersection-occurs-This-is-0-if-there-is-no-intersected-node" class="headerlink" title="intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node."></a>intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.</h4><h4 id="listA-The-first-linked-list"><a href="#listA-The-first-linked-list" class="headerlink" title="listA - The first linked list."></a>listA - The first linked list.</h4><h4 id="listB-The-second-linked-list"><a href="#listB-The-second-linked-list" class="headerlink" title="listB - The second linked list."></a>listB - The second linked list.</h4><h4 id="skipA-The-number-of-nodes-to-skip-ahead-in-listA-starting-from-the-head-to-get-to-the-intersected-node"><a href="#skipA-The-number-of-nodes-to-skip-ahead-in-listA-starting-from-the-head-to-get-to-the-intersected-node" class="headerlink" title="skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node."></a>skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.</h4><h4 id="skipB-The-number-of-nodes-to-skip-ahead-in-listB-starting-from-the-head-to-get-to-the-intersected-node"><a href="#skipB-The-number-of-nodes-to-skip-ahead-in-listB-starting-from-the-head-to-get-to-the-intersected-node" class="headerlink" title="skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node."></a>skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.</h4><h3 id="The-judge-will-then-create-the-linked-structure-based-on-these-inputs-and-pass-the-two-heads-headA-and-headB-to-your-program-If-you-correctly-return-the-intersected-node-then-your-solution-will-be-accepted"><a href="#The-judge-will-then-create-the-linked-structure-based-on-these-inputs-and-pass-the-two-heads-headA-and-headB-to-your-program-If-you-correctly-return-the-intersected-node-then-your-solution-will-be-accepted" class="headerlink" title="The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted."></a>The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.</h3><h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><p>这道题可以通过双指针的方法解决，一开始想的是通过两个链表的公共部分从后往前，但是该题题解里有个思路很好：<br><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/intersection-of-two-linked-lists-shuang-zhi-zhen-l/">160. 相交链表（双指针，清晰图解）</a></p><p>ListA 头节点 headA 到 公共node 前，共有 a - c 个节点；<br>ListB 头节点 headB 到 公共node 前，共有 b - c 个节点；</p><p>考虑构建两个节点指针 A​ , B 分别指向两链表头节点 headA , headB ，做如下操作：</p><p>指针 A 先遍历完链表 headA ，再开始遍历链表 headB ，当走到 公共node 时，共走步数为：<br>a + (b - c) = a + b - c</p><p>指针 B 先遍历完链表 headB ，再开始遍历链表 headA ，当走到 公共node 时，共走步数为：<br>b + (a - c) = a + b - c</p><p>所以这就有可以操作的地方了</p><p>如下式所示，此时指针 A , B 重合，并有两种情况：</p><p>a + (b - c) = b + (a - c)</p><p>若两链表 有 公共尾部 (即 c &gt; 0 ) ：指针 A , B 同时指向「第一个公共节点」node 。<br>若两链表 无 公共尾部 (即 c = 0 ) ：指针 A , B 同时指向 null 。</p><p>其实就是两边互相换家走一遍，相当于从一开始的头结点开始，指针A,B都走一遍list A和list B</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        A, B = headA, headB</span><br><span class="line">        <span class="keyword">while</span> A != B:</span><br><span class="line">            A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br><span class="line">            B = B.<span class="built_in">next</span> <span class="keyword">if</span> B <span class="keyword">else</span> headA</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br></pre></td></tr></table></figure><p>其实没看懂实现逻辑（基础不牢固），后来搜了一下是python的一个条件表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">It&#x27;s a conditional expression:</span><br><span class="line"></span><br><span class="line">A if PREDICATE else B</span><br><span class="line">A is yielded if PREDICATE is true, otherwise B is yielded.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#x27;A&#x27; if 1 &lt; 2 else &#x27;B&#x27;</span><br><span class="line">&#x27;A&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;A&#x27; if 1 &gt; 2 else &#x27;B&#x27;</span><br><span class="line">&#x27;B&#x27;</span><br></pre></td></tr></table></figure><p>换成完整版就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 1 &lt; 2:</span><br><span class="line">    &#x27;A&#x27;</span><br><span class="line">else: &#x27;B&#x27;</span><br></pre></td></tr></table></figure><p>所以题解里的写法其实可以写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        a,b= headA,headB</span><br><span class="line">        <span class="keyword">while</span> a!=b:</span><br><span class="line">            <span class="keyword">if</span> a:</span><br><span class="line">                a =a.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>: a= headB</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> b:</span><br><span class="line">                b =b.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>: b = headA</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;160-Intersection-of-Two-Linked-Lists-Easy&quot;&gt;&lt;a href=&quot;#160-Intersection-of-Two-Linked-Lists-Easy&quot; class=&quot;headerlink&quot; title=&quot;160. Inter</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode12-Tree</title>
    <link href="http://example.com/2022/07/20/LeetCode12-Tree/"/>
    <id>http://example.com/2022/07/20/LeetCode12-Tree/</id>
    <published>2022-07-20T21:37:08.000Z</published>
    <updated>2022-08-07T03:22:00.364Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p><p>一棵树要么是空树，要么有两个指针，每个指针指向一棵树。树是一种递归结构，很多树的问题可以使用递归来处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-题解-链表&quot;&gt;&lt;a href=&quot;#Leetcode-题解-链表&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 题解 - 链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/CyC</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>2. Add Two Numbers(medium)</title>
    <link href="http://example.com/2022/07/15/2/"/>
    <id>http://example.com/2022/07/15/2/</id>
    <published>2022-07-15T20:30:53.000Z</published>
    <updated>2022-07-21T03:23:24.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Add-Two-Numbers-medium"><a href="#2-Add-Two-Numbers-medium" class="headerlink" title="2. Add Two Numbers(medium)"></a>2. Add Two Numbers(medium)</h1><h2 id="You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-digits-are-stored-in-reverse-order-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list"><a href="#You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-digits-are-stored-in-reverse-order-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list" class="headerlink" title="You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."></a>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</h2><h2 id="You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself"><a href="#You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself" class="headerlink" title="You may assume the two numbers do not contain any leading zero, except the number 0 itself."></a>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</h2><p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-Add-Two-Numbers-medium&quot;&gt;&lt;a href=&quot;#2-Add-Two-Numbers-medium&quot; class=&quot;headerlink&quot; title=&quot;2. Add Two Numbers(medium)&quot;&gt;&lt;/a&gt;2. Add Two N</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode11-Linked list</title>
    <link href="http://example.com/2022/07/15/LeetCode11-Linked%20list/"/>
    <id>http://example.com/2022/07/15/LeetCode11-Linked%20list/</id>
    <published>2022-07-15T19:54:06.000Z</published>
    <updated>2022-07-21T03:22:52.536Z</updated>
    
    <content type="html"><![CDATA[<p>链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。</p><p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-题解-链表&quot;&gt;&lt;a href=&quot;#Leetcode-题解-链表&quot; class=&quot;headerlink&quot; title=&quot;L</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode10-Backtracking</title>
    <link href="http://example.com/2022/07/14/LeetCode10-Backtracking/"/>
    <id>http://example.com/2022/07/14/LeetCode10-Backtracking/</id>
    <published>2022-07-15T02:56:54.000Z</published>
    <updated>2022-07-15T03:14:35.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯题目总结："><a href="#回溯题目总结：" class="headerlink" title="回溯题目总结："></a>回溯题目总结：</h1><h2 id="Backtracking-Python-problems-solutions-interview-prep"><a href="#Backtracking-Python-problems-solutions-interview-prep" class="headerlink" title="Backtracking Python problems+ solutions- interview prep"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/780232/Backtracking-Python-problems%2B-solutions-interview-prep">Backtracking Python problems+ solutions- interview prep</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/backtracking/">leetcode tag</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯题目总结：&quot;&gt;&lt;a href=&quot;#回溯题目总结：&quot; class=&quot;headerlink&quot; title=&quot;回溯题目总结：&quot;&gt;&lt;/a&gt;回溯题目总结：&lt;/h1&gt;&lt;h2 id=&quot;Backtracking-Python-problems-solutions-interv</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Backtracking" scheme="http://example.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>17. Letter Combinations of a Phone Number(medium)</title>
    <link href="http://example.com/2022/07/14/17/"/>
    <id>http://example.com/2022/07/14/17/</id>
    <published>2022-07-15T01:55:06.000Z</published>
    <updated>2022-07-15T03:15:36.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number-medium"><a href="#17-Letter-Combinations-of-a-Phone-Number-medium" class="headerlink" title="17. Letter Combinations of a Phone Number(medium)"></a>17. Letter Combinations of a Phone Number(medium)</h1><h2 id="Given-a-string-containing-digits-from-2-9-inclusive-return-all-possible-letter-combinations-that-the-number-could-represent-Return-the-answer-in-any-order"><a href="#Given-a-string-containing-digits-from-2-9-inclusive-return-all-possible-letter-combinations-that-the-number-could-represent-Return-the-answer-in-any-order" class="headerlink" title="Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order."></a>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</h2><h2 id="A-mapping-of-digits-to-letters-just-like-on-the-telephone-buttons-is-given-below-Note-that-1-does-not-map-to-any-letters"><a href="#A-mapping-of-digits-to-letters-just-like-on-the-telephone-buttons-is-given-below-Note-that-1-does-not-map-to-any-letters" class="headerlink" title="A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."></a>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">phone = &#123;&#x27;2&#x27;:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">                 &#x27;3&#x27;:[&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;],</span><br><span class="line">                 &#x27;4&#x27;:[&#x27;g&#x27;,&#x27;h&#x27;,&#x27;i&#x27;],</span><br><span class="line">                 &#x27;5&#x27;:[&#x27;j&#x27;,&#x27;k&#x27;,&#x27;l&#x27;],</span><br><span class="line">                 &#x27;6&#x27;:[&#x27;m&#x27;,&#x27;n&#x27;,&#x27;o&#x27;],</span><br><span class="line">                 &#x27;7&#x27;:[&#x27;p&#x27;,&#x27;q&#x27;,&#x27;r&#x27;,&#x27;s&#x27;],</span><br><span class="line">                 &#x27;8&#x27;:[&#x27;t&#x27;,&#x27;u&#x27;,&#x27;v&#x27;],</span><br><span class="line">                 &#x27;9&#x27;:[&#x27;w&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;]&#125;</span><br><span class="line">                </span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这题属于是hashmap记录数字和字母的对应关系，然后再用回溯的方法解决</p><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solution/hui-su-dui-lie-tu-jie-by-ml-zimingmeng/">leetcode题解</a></h2><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits: </span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        phone = &#123;<span class="string">&#x27;2&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;3&#x27;</span>:[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;4&#x27;</span>:[<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;5&#x27;</span>:[<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;6&#x27;</span>:[<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;7&#x27;</span>:[<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;8&#x27;</span>:[<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;9&#x27;</span>:[<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]&#125;</span><br><span class="line">                </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">conbination,nextdigit</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(nextdigit) == <span class="number">0</span>:</span><br><span class="line">                res.append(conbination)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> letter <span class="keyword">in</span> phone[nextdigit[<span class="number">0</span>]]:</span><br><span class="line">                    backtrack(conbination + letter,nextdigit[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        backtrack(<span class="string">&#x27;&#x27;</span>,digits)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;17-Letter-Combinations-of-a-Phone-Number-medium&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number-medium&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
    <category term="Backtracking" scheme="http://example.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>12. Integer to Roman(medium)</title>
    <link href="http://example.com/2022/07/13/12/"/>
    <id>http://example.com/2022/07/13/12/</id>
    <published>2022-07-13T23:45:50.000Z</published>
    <updated>2022-07-15T03:01:42.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Integer-to-Roman-medium"><a href="#12-Integer-to-Roman-medium" class="headerlink" title="12. Integer to Roman(medium)"></a>12. Integer to Roman(medium)</h1><h2 id="Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M"><a href="#Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M" class="headerlink" title="Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."></a>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><h2 id="For-example-2-is-written-as-II-in-Roman-numeral-just-two-one’s-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II"><a href="#For-example-2-is-written-as-II-in-Roman-numeral-just-two-one’s-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II" class="headerlink" title="For example, 2 is written as II in Roman numeral, just two one’s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."></a>For example, 2 is written as II in Roman numeral, just two one’s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</h2><h2 id="Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used"><a href="#Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used" class="headerlink" title="Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"></a>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I can be placed before V (5) and X (10) to make 4 and 9. </span><br><span class="line">X can be placed before L (50) and C (100) to make 40 and 90. </span><br><span class="line">C can be placed before D (500) and M (1000) to make 400 and 900.</span><br><span class="line">Given an integer, convert it to a roman numeral.</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这题和接下来的13题是完全相反的思路，本题（12题）是整数转罗马数字，13题是罗马数字转整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: num = 3</span><br><span class="line">Output: &quot;III&quot;</span><br><span class="line">Explanation: 3 is represented as 3 ones.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: num = 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: L = 50, V = 5, III = 3.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: num = 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><p>罗马数字由 77 个不同的单字母符号组成，每个符号对应一个具体的数值。此外，减法规则（如问题描述中所述）给出了额外的 66 个复合符号。这给了我们总共 1313 个独特的符号（每个符号由 11 个或 22 个字母组成），如下图所示。</p><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/integer-to-roman/solution/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs/">官方题解</a></h2><p><img src="https://assets.leetcode-cn.com/solution-static/12/1.png"></p><p>罗马数字的规则是：对于罗马数字从左到右的每一位，选择尽可能大的符号值。</p><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>根据罗马数字的唯一表示法，为了表示一个给定的整数 num，我们寻找不超过 num 的最大符号值，将 num 减去该符号值，然后继续寻找不超过 num 的最大符号值，将该符号拼接在上一个找到的符号之后，循环直至 num 为 0。最后得到的字符串即为 num 的罗马数字表示。</p><p>编程时，可以建立一个数值-符号对的列表 valueSymbols，按数值从大到小排列。遍历 valueSymbols 中的每个数值-符号对，若当前数值 value 不超过 num，则从 num 中不断减去 value，直至 num 小于 value，然后遍历下一个数值-符号对。若遍历中 num 为 0 则跳出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    VALUE_SYMBOLS = [</span><br><span class="line">        (<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">        (<span class="number">900</span>, <span class="string">&quot;CM&quot;</span>),</span><br><span class="line">        (<span class="number">500</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">        (<span class="number">400</span>, <span class="string">&quot;CD&quot;</span>),</span><br><span class="line">        (<span class="number">100</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">        (<span class="number">90</span>, <span class="string">&quot;XC&quot;</span>),</span><br><span class="line">        (<span class="number">50</span>, <span class="string">&quot;L&quot;</span>),</span><br><span class="line">        (<span class="number">40</span>, <span class="string">&quot;XL&quot;</span>),</span><br><span class="line">        (<span class="number">10</span>, <span class="string">&quot;X&quot;</span>),</span><br><span class="line">        (<span class="number">9</span>, <span class="string">&quot;IX&quot;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;IV&quot;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;I&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        roman = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> Solution.VALUE_SYMBOLS:</span><br><span class="line">            <span class="keyword">while</span> num &gt;= value:</span><br><span class="line">                num -= value</span><br><span class="line">                roman.append(symbol)</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(roman)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># 使用哈希表，按照从大到小顺序排列</span></span><br><span class="line">        hashmap = &#123;<span class="number">1000</span>:<span class="string">&#x27;M&#x27;</span>, <span class="number">900</span>:<span class="string">&#x27;CM&#x27;</span>, <span class="number">500</span>:<span class="string">&#x27;D&#x27;</span>, <span class="number">400</span>:<span class="string">&#x27;CD&#x27;</span>, <span class="number">100</span>:<span class="string">&#x27;C&#x27;</span>, <span class="number">90</span>:<span class="string">&#x27;XC&#x27;</span>, <span class="number">50</span>:<span class="string">&#x27;L&#x27;</span>, <span class="number">40</span>:<span class="string">&#x27;XL&#x27;</span>, <span class="number">10</span>:<span class="string">&#x27;X&#x27;</span>, <span class="number">9</span>:<span class="string">&#x27;IX&#x27;</span>, <span class="number">5</span>:<span class="string">&#x27;V&#x27;</span>, <span class="number">4</span>:<span class="string">&#x27;IV&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;I&#x27;</span>&#125;</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> hashmap:</span><br><span class="line">            <span class="keyword">if</span> num // key != <span class="number">0</span>:</span><br><span class="line">                count = num // key  <span class="comment"># 比如输入4000，count 为 4</span></span><br><span class="line">                res += hashmap[key] * count </span><br><span class="line">                num %= key</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12-Integer-to-Roman-medium&quot;&gt;&lt;a href=&quot;#12-Integer-to-Roman-medium&quot; class=&quot;headerlink&quot; title=&quot;12. Integer to Roman(medium)&quot;&gt;&lt;/a&gt;12. In</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
  </entry>
  
  <entry>
    <title>21. Merge Two Sorted Lists(easy)</title>
    <link href="http://example.com/2022/07/04/21/"/>
    <id>http://example.com/2022/07/04/21/</id>
    <published>2022-07-04T21:24:09.000Z</published>
    <updated>2022-07-21T03:30:25.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21-Merge-Two-Sorted-Lists-easy"><a href="#21-Merge-Two-Sorted-Lists-easy" class="headerlink" title="21. Merge Two Sorted Lists(easy)"></a>21. Merge Two Sorted Lists(easy)</h1><h2 id="You-are-given-the-heads-of-two-sorted-linked-lists-list1-and-list2"><a href="#You-are-given-the-heads-of-two-sorted-linked-lists-list1-and-list2" class="headerlink" title="You are given the heads of two sorted linked lists list1 and list2."></a>You are given the heads of two sorted linked lists list1 and list2.</h2><h2 id="Merge-the-two-lists-in-a-one-sorted-list-The-list-should-be-made-by-splicing-together-the-nodes-of-the-first-two-lists"><a href="#Merge-the-two-lists-in-a-one-sorted-list-The-list-should-be-made-by-splicing-together-the-nodes-of-the-first-two-lists" class="headerlink" title="Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists."></a>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</h2><h2 id="Return-the-head-of-the-merged-linked-list"><a href="#Return-the-head-of-the-merged-linked-list" class="headerlink" title="Return the head of the merged linked list."></a>Return the head of the merged linked list.</h2><p>我们判断 list1 和 list2 头结点哪个更小，然后较小结点的 next 指针指向其余结点的合并结果。（调用递归）</p><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/solution/yi-kan-jiu-hui-yi-xie-jiu-fei-xiang-jie-di-gui-by-/">leetcode题解</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list1: <span class="keyword">return</span> list2  <span class="comment"># 终止条件，直到两个链表都空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list2: <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> list1.val &lt;= list2.val:  <span class="comment"># 递归调用</span></span><br><span class="line">            list1.<span class="built_in">next</span> = self.mergeTwoLists(list1.<span class="built_in">next</span>,list2)</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list2.<span class="built_in">next</span> = self.mergeTwoLists(list1,list2.<span class="built_in">next</span>)</span><br><span class="line">            <span class="keyword">return</span> list2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;21-Merge-Two-Sorted-Lists-easy&quot;&gt;&lt;a href=&quot;#21-Merge-Two-Sorted-Lists-easy&quot; class=&quot;headerlink&quot; title=&quot;21. Merge Two Sorted Lists(easy)</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
    <category term="recursion" scheme="http://example.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>13. Roman to Integer(easy)</title>
    <link href="http://example.com/2022/07/01/13/"/>
    <id>http://example.com/2022/07/01/13/</id>
    <published>2022-07-02T03:22:05.000Z</published>
    <updated>2022-07-15T03:00:24.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-Roman-to-Integer-easy"><a href="#13-Roman-to-Integer-easy" class="headerlink" title="13. Roman to Integer(easy)"></a>13. Roman to Integer(easy)</h1><h2 id="Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M"><a href="#Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M" class="headerlink" title="Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."></a>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</h2><h2 id="For-example-2-is-written-as-II-in-Roman-numeral-just-two-ones-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II"><a href="#For-example-2-is-written-as-II-in-Roman-numeral-just-two-ones-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II" class="headerlink" title="For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."></a>For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</h2><h2 id="Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used"><a href="#Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used" class="headerlink" title="Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"></a>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</h2><h2 id="I-can-be-placed-before-V-5-and-X-10-to-make-4-and-9"><a href="#I-can-be-placed-before-V-5-and-X-10-to-make-4-and-9" class="headerlink" title="I can be placed before V (5) and X (10) to make 4 and 9."></a>I can be placed before V (5) and X (10) to make 4 and 9.</h2><h2 id="X-can-be-placed-before-L-50-and-C-100-to-make-40-and-90"><a href="#X-can-be-placed-before-L-50-and-C-100-to-make-40-and-90" class="headerlink" title="X can be placed before L (50) and C (100) to make 40 and 90."></a>X can be placed before L (50) and C (100) to make 40 and 90.</h2><h2 id="C-can-be-placed-before-D-500-and-M-1000-to-make-400-and-900"><a href="#C-can-be-placed-before-D-500-and-M-1000-to-make-400-and-900" class="headerlink" title="C can be placed before D (500) and M (1000) to make 400 and 900."></a>C can be placed before D (500) and M (1000) to make 400 and 900.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/roman-to-integer/solution/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/">官方题解</a></p><p>这题的特点<br>通常情况下，罗马数字中小的数字在大的数字的右边。若输入的字符串满足该情况，那么可以将每个字符视作一个单独的值，累加每个字符对应的数值即可。</p><p>例如 XXVII 可视作 X+X+V+I+I=10+10+5+1+1=27。</p><p>若存在小的数字在大的数字的左边的情况，根据规则需要减去小的数字。对于这种情况，我们也可以将每个字符视作一个单独的值，若一个数字右侧的数字比它大，则将该数字的符号取反。</p><p>例如 XIV 可视作 X−I+V=10−1+5=14。</p><h3 id="但是评论里有超神思路："><a href="#但是评论里有超神思路：" class="headerlink" title="但是评论里有超神思路："></a>但是评论里有超神思路：</h3><p><a href="https://leetcode.cn/problems/roman-to-integer/solution/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/1060752">从右到左遍历，记录当前遇到的最大的数字，遇到更大的就加，并且更新最大数，遇到小的就减，更好理解吧</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        highestLevel = <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">            level = mapping[ch]</span><br><span class="line">            <span class="keyword">if</span> level &gt;= highestLevel:</span><br><span class="line">                result += level</span><br><span class="line">                highestLevel = level</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result -= level</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;13-Roman-to-Integer-easy&quot;&gt;&lt;a href=&quot;#13-Roman-to-Integer-easy&quot; class=&quot;headerlink&quot; title=&quot;13. Roman to Integer(easy)&quot;&gt;&lt;/a&gt;13. Roman to</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
  </entry>
  
  <entry>
    <title>9. Palindrome Number(easy)</title>
    <link href="http://example.com/2022/07/01/9/"/>
    <id>http://example.com/2022/07/01/9/</id>
    <published>2022-07-02T03:16:17.000Z</published>
    <updated>2022-07-02T03:40:11.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-Palindrome-Number-easy"><a href="#9-Palindrome-Number-easy" class="headerlink" title="9. Palindrome Number(easy)"></a>9. Palindrome Number(easy)</h1><h2 id="Given-an-integer-x-return-true-if-x-is-palindrome-integer"><a href="#Given-an-integer-x-return-true-if-x-is-palindrome-integer" class="headerlink" title="Given an integer x, return true if x is palindrome integer."></a>Given an integer x, return true if x is palindrome integer.</h2><h2 id="An-integer-is-a-palindrome-when-it-reads-the-same-backward-as-forward"><a href="#An-integer-is-a-palindrome-when-it-reads-the-same-backward-as-forward" class="headerlink" title="An integer is a palindrome when it reads the same backward as forward."></a>An integer is a palindrome when it reads the same backward as forward.</h2><h2 id="For-example-121-is-a-palindrome-while-123-is-not"><a href="#For-example-121-is-a-palindrome-while-123-is-not" class="headerlink" title="For example, 121 is a palindrome while 123 is not."></a>For example, 121 is a palindrome while 123 is not.</h2><p>找到回文数</p><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/">官方题解</a></h2><p>反转一半数字<br>思路</p><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p><p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。<br>但是，如果反转后的数字大于 int.MAX，我们将遇到整数溢出问题。</p><p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p><p>例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。</p><p>现在，让我们来考虑如何反转后半部分的数字。</p><p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p><p>现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？</p><p>由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。</p><p>根据官方题解改的python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        revertedNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; revertedNumber:</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber <span class="keyword">or</span> x == revertedNumber // <span class="number">10</span>        </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;9-Palindrome-Number-easy&quot;&gt;&lt;a href=&quot;#9-Palindrome-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;9. Palindrome Number(easy)&quot;&gt;&lt;/a&gt;9. Palindrom</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Palindrome Number" scheme="http://example.com/tags/Palindrome-Number/"/>
    
  </entry>
  
  <entry>
    <title>15. 3Sum(medium)</title>
    <link href="http://example.com/2022/07/01/15/"/>
    <id>http://example.com/2022/07/01/15/</id>
    <published>2022-07-02T03:01:07.000Z</published>
    <updated>2022-07-02T03:40:02.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-3Sum-medium"><a href="#15-3Sum-medium" class="headerlink" title="15. 3Sum(medium)"></a>15. 3Sum(medium)</h1><h2 id="Given-an-integer-array-nums-return-all-the-triplets-nums-i-nums-j-nums-k-such-that-i-j-i-k-and-j-k-and-nums-i-nums-j-nums-k-0"><a href="#Given-an-integer-array-nums-return-all-the-triplets-nums-i-nums-j-nums-k-such-that-i-j-i-k-and-j-k-and-nums-i-nums-j-nums-k-0" class="headerlink" title="Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0."></a>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</h2><h2 id="Notice-that-the-solution-set-must-not-contain-duplicate-triplets"><a href="#Notice-that-the-solution-set-must-not-contain-duplicate-triplets" class="headerlink" title="Notice that the solution set must not contain duplicate triplets."></a>Notice that the solution set must not contain duplicate triplets.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">    nums.sort()</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> left <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>): <span class="comment"># renamed this to left because this will always be the leftmost pointer in the triplet</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span> <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]: <span class="comment"># this step makes sure that we do not have any duplicates in our result output</span></span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        mid = left + <span class="number">1</span> <span class="comment"># renamed this to mid because this is the pointer that is between the left and right pointers</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> mid &lt; right:</span><br><span class="line">            curr_sum = nums[left] + nums[mid] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> curr_sum &lt; <span class="number">0</span>:</span><br><span class="line">                mid += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">elif</span> curr_sum &gt; <span class="number">0</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[mid] == nums[mid + <span class="number">1</span>]: <span class="comment"># Another conditional for not calculating duplicates</span></span><br><span class="line">                    mid += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]: <span class="comment"># Avoiding duplicates check</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                mid += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;15-3Sum-medium&quot;&gt;&lt;a href=&quot;#15-3Sum-medium&quot; class=&quot;headerlink&quot; title=&quot;15. 3Sum(medium)&quot;&gt;&lt;/a&gt;15. 3Sum(medium)&lt;/h1&gt;&lt;h2 id=&quot;Given-an-inte</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>11. Container With Most Water(medium)</title>
    <link href="http://example.com/2022/07/01/11/"/>
    <id>http://example.com/2022/07/01/11/</id>
    <published>2022-07-01T16:01:52.000Z</published>
    <updated>2022-07-02T03:39:46.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Container-With-Most-Water-medium"><a href="#11-Container-With-Most-Water-medium" class="headerlink" title="11. Container With Most Water(medium)"></a>11. Container With Most Water(medium)</h1><h2 id="You-are-given-an-integer-array-height-of-length-n-There-are-n-vertical-lines-drawn-such-that-the-two-endpoints-of-the-ith-line-are-i-0-and-i-height-i"><a href="#You-are-given-an-integer-array-height-of-length-n-There-are-n-vertical-lines-drawn-such-that-the-two-endpoints-of-the-ith-line-are-i-0-and-i-height-i" class="headerlink" title="You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i])."></a>You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).</h2><h2 id="Find-two-lines-that-together-with-the-x-axis-form-a-container-such-that-the-container-contains-the-most-water"><a href="#Find-two-lines-that-together-with-the-x-axis-form-a-container-such-that-the-container-contains-the-most-water" class="headerlink" title="Find two lines that together with the x-axis form a container, such that the container contains the most water."></a>Find two lines that together with the x-axis form a container, such that the container contains the most water.</h2><h2 id="Return-the-maximum-amount-of-water-a-container-can-store"><a href="#Return-the-maximum-amount-of-water-a-container-can-store" class="headerlink" title="Return the maximum amount of water a container can store."></a>Return the maximum amount of water a container can store.</h2><h2 id="Notice-that-you-may-not-slant-the-container"><a href="#Notice-that-you-may-not-slant-the-container" class="headerlink" title="Notice that you may not slant the container."></a>Notice that you may not slant the container.</h2><p>看了题解，双指针，从两头开始内卷，先卷矮的那头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = <span class="built_in">len</span>(height)-<span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            area = <span class="built_in">min</span>(height[l],height[r])*(r-l)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,area)</span><br><span class="line">            l=</span><br><span class="line">            <span class="keyword">if</span> height[l]&lt;height[r]:</span><br><span class="line">                l+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height</span>):</span></span><br><span class="line">        L, R, width, res = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span>, <span class="built_in">len</span>(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(width, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment">#range(start, stop, step)</span></span><br><span class="line">            <span class="keyword">if</span> height[L] &lt; height[R]:</span><br><span class="line">                res, L = <span class="built_in">max</span>(res, height[L] * w), L + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res, R = <span class="built_in">max</span>(res, height[R] * w), R - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;11-Container-With-Most-Water-medium&quot;&gt;&lt;a href=&quot;#11-Container-With-Most-Water-medium&quot; class=&quot;headerlink&quot; title=&quot;11. Container With Mos</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
</feed>
