<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-29T21:40:20.679Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-skill5-difference-array</title>
    <link href="http://example.com/2022/08/29/LeetCode-skill5-difference-array/"/>
    <id>http://example.com/2022/08/29/LeetCode-skill5-difference-array/</id>
    <published>2022-08-29T21:39:00.000Z</published>
    <updated>2022-08-29T21:40:20.679Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。</p><p>比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nums[0..4] 全部加 2，再给…</p><p>一通操作猛如虎，然后问你，最后 nums 数组的值是什么？</p><p>常规的思路很容易，你让我给区间 nums[i..j] 加上 val，那我就一个 for 循环给它们都加上呗，还能咋样？这种思路的时间复杂度是 O(N)，由于这个场景下对 nums 的修改非常频繁，所以效率会很低下。</p><p>这里就需要差分数组的技巧，类似前缀和技巧构造的 prefix 数组，我们先对 nums 数组构造一个 diff 差分数组，diff[i] 就是 nums[i] 和 nums[i-1] 之差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"><span class="comment">// 构造差分数组</span></span><br><span class="line">diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这个 diff 差分数组是可以反推出原始数组 nums 的，代码逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line"><span class="comment">// 根据差分数组构造结果数组</span></span><br><span class="line">res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">    res[i] = res[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理很简单，回想 diff 数组反推 nums 数组的过程，diff[i] += 3 意味着给 nums[i..] 所有的元素都加了 3，然后 diff[j+1] -= 3 又意味着对于 nums[j+1..] 所有元素再减 3，那综合起来，是不是就是对 nums[i..j] 中的所有元素都加 3 了？</p><p>只要花费 O(1) 的时间修改 diff 数组，就相当于给 nums 的整个区间做了修改。多次修改 diff，然后通过 diff 数组反推，即可得到 nums 修改后的结果。</p><p>现在我们把差分数组抽象成一个类，包含 increment 方法和 result 方法：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。&lt;/p&gt;
&lt;p&gt;比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode15-DFS</title>
    <link href="http://example.com/2022/08/29/LeetCode15-DFS/"/>
    <id>http://example.com/2022/08/29/LeetCode15-DFS/</id>
    <published>2022-08-29T21:06:58.000Z</published>
    <updated>2022-08-29T21:07:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。</p><p>本文将以岛屿问题为例，展示网格类问题 DFS 通用思路，以及如何让代码变得简洁。</p><p>在 LeetCode 中，「岛屿问题」是一个系列系列问题，比如：</p><p>L200. 岛屿数量 （Easy）<br>463. 岛屿的周长 （Easy）<br>695. 岛屿的最大面积 （Medium）<br>827. 最大人工岛 （Hard）</p><p>作者：nettee<br>链接：<a href="https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode14-BFS</title>
    <link href="http://example.com/2022/08/29/LeetCode14-BFS/"/>
    <id>http://example.com/2022/08/29/LeetCode14-BFS/</id>
    <published>2022-08-29T21:06:51.000Z</published>
    <updated>2022-08-29T21:07:24.717Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>5. Longest Palindromic Substring(medium)</title>
    <link href="http://example.com/2022/08/29/5/"/>
    <id>http://example.com/2022/08/29/5/</id>
    <published>2022-08-29T20:40:18.000Z</published>
    <updated>2022-08-29T21:03:22.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Longest-Palindromic-Substring-medium"><a href="#5-Longest-Palindromic-Substring-medium" class="headerlink" title="5. Longest Palindromic Substring(medium)"></a>5. Longest Palindromic Substring(medium)</h1><h2 id="Given-a-string-s-return-the-longest-palindromic-substring-in-s"><a href="#Given-a-string-s-return-the-longest-palindromic-substring-in-s" class="headerlink" title="Given a string s, return the longest palindromic substring in s."></a>Given a string s, return the longest palindromic substring in s.</h2><p>substring和subsequence：<br>substring是子串。例如，‘wee’ 是 ‘helloween’的substring，‘hwn’ 不是 ‘helloween’的substring。取子串的时候不能隔着字符取。<br>subsequence是子序列。例如，‘wee’ 和 ‘hwn’ 都是 ‘helloween’的subsequence。取子序列的时候可以隔着字符取。<br>palindromic substring 是回文子串，例如‘soebeos’ 是 ‘absoebeostge’ 的回文子串。回文的意思是正过来念和反过来念都一样的字符串，比如“上海自来水来自海上”。</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandAroundCenter</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            left1, right1 = self.expandAroundCenter(s, i, i)</span><br><span class="line">            left2, right2 = self.expandAroundCenter(s, i, i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> right1 - left1 &gt; end - start:</span><br><span class="line">                start, end = left1, right1</span><br><span class="line">            <span class="keyword">if</span> right2 - left2 &gt; end - start:</span><br><span class="line">                start, end = left2, right2</span><br><span class="line">        <span class="keyword">return</span> s[start: end + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;5-Longest-Palindromic-Substring-medium&quot;&gt;&lt;a href=&quot;#5-Longest-Palindromic-Substring-medium&quot; class=&quot;headerlink&quot; title=&quot;5. Longest Palin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>344. Reverse String(easy)</title>
    <link href="http://example.com/2022/08/29/344/"/>
    <id>http://example.com/2022/08/29/344/</id>
    <published>2022-08-29T20:22:40.000Z</published>
    <updated>2022-08-29T20:43:03.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="344-Reverse-String-easy"><a href="#344-Reverse-String-easy" class="headerlink" title="344. Reverse String(easy)"></a>344. Reverse String(easy)</h1><h2 id="Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s"><a href="#Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s" class="headerlink" title="Write a function that reverses a string. The input string is given as an array of characters s."></a>Write a function that reverses a string. The input string is given as an array of characters s.</h2><h2 id="You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="You must do this by modifying the input array in-place with O(1) extra memory."></a>You must do this by modifying the input array in-place with O(1) extra memory.</h2><p>反转字符串，其实还是反转数组，双指针一左一右来回替换就行了，要注意的是在本体上变换</p><pre><code class="python">class Solution:    def reverseString(self, s: List[str]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify s in-place instead.        &quot;&quot;&quot;        left = 0        right = len(s)-1        while left&lt;right:            tmp =s[left]            s[left]=s[right]            s[right]=tmp            left+=1            right-=1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;344-Reverse-String-easy&quot;&gt;&lt;a href=&quot;#344-Reverse-String-easy&quot; class=&quot;headerlink&quot; title=&quot;344. Reverse String(easy)&quot;&gt;&lt;/a&gt;344. Reverse St</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>704. Binary Search(easy)</title>
    <link href="http://example.com/2022/08/29/704/"/>
    <id>http://example.com/2022/08/29/704/</id>
    <published>2022-08-29T19:22:20.000Z</published>
    <updated>2022-08-29T20:42:41.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="704-Binary-Search-easy"><a href="#704-Binary-Search-easy" class="headerlink" title="704. Binary Search(easy)"></a>704. Binary Search(easy)</h1><h2 id="Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1"><a href="#Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1" class="headerlink" title="Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1."></a>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</h2><h2 id="You-must-write-an-algorithm-with-O-log-n-runtime-complexity"><a href="#You-must-write-an-algorithm-with-O-log-n-runtime-complexity" class="headerlink" title="You must write an algorithm with O(log n) runtime complexity."></a>You must write an algorithm with O(log n) runtime complexity.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p>二分查找模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left =<span class="number">0</span></span><br><span class="line">        right=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right):</span><br><span class="line">            mid =left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;704-Binary-Search-easy&quot;&gt;&lt;a href=&quot;#704-Binary-Search-easy&quot; class=&quot;headerlink&quot; title=&quot;704. Binary Search(easy)&quot;&gt;&lt;/a&gt;704. Binary Search</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode13-Array</title>
    <link href="http://example.com/2022/08/29/LeetCode13-Array/"/>
    <id>http://example.com/2022/08/29/LeetCode13-Array/</id>
    <published>2022-08-29T19:07:36.000Z</published>
    <updated>2022-08-29T20:00:51.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-快慢指针"><a href="#1-快慢指针" class="headerlink" title="1. 快慢指针"></a>1. 快慢指针</h1><h1 id="2-左右指针"><a href="#2-左右指针" class="headerlink" title="2. 左右指针"></a>2. 左右指针</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h1 id="Leetcode-题解-二分查找"><a href="#Leetcode-题解-二分查找" class="headerlink" title="Leetcode 题解 - 二分查找"></a>Leetcode 题解 - 二分查找</h1><h2 id="1-求开方"><a href="#1-求开方" class="headerlink" title="1. 求开方"></a>1. 求开方</h2><h2 id="2-大于给定元素的最小元素"><a href="#2-大于给定元素的最小元素" class="headerlink" title="2. 大于给定元素的最小元素"></a>2. 大于给定元素的最小元素</h2><h2 id="3-有序数组的-Single-Element"><a href="#3-有序数组的-Single-Element" class="headerlink" title="3. 有序数组的 Single Element"></a>3. 有序数组的 Single Element</h2><h2 id="4-第一个错误的版本"><a href="#4-第一个错误的版本" class="headerlink" title="4. 第一个错误的版本"></a>4. 第一个错误的版本</h2><h2 id="5-旋转数组的最小数字"><a href="#5-旋转数组的最小数字" class="headerlink" title="5. 旋转数组的最小数字"></a>5. 旋转数组的最小数字</h2><h2 id="6-查找区间"><a href="#6-查找区间" class="headerlink" title="6. 查找区间"></a>6. 查找区间</h2><p>二分查找 binary search algorithm</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>二分查找也称为折半查找，每次都能将查找区间减半，这种折半特性的算法时间复杂度为 O(logN)。</p><h2 id="m-计算"><a href="#m-计算" class="headerlink" title="m 计算"></a>m 计算</h2><p>有两种计算中值 m 的方式：</p><p>m = (l + h) / 2<br>m = l + (h - l) / 2<br>l + h 可能出现加法溢出，也就是说加法的结果大于整型能够表示的范围。但是 l 和 h 都为正数，因此 h - l 不会出现加法溢出问题。所以，最好使用第二种计算法方法。</p><h2 id="未成功查找的返回值"><a href="#未成功查找的返回值" class="headerlink" title="未成功查找的返回值"></a>未成功查找的返回值</h2><p>循环退出时如果仍然没有查找到 key，那么表示查找失败。可以有两种返回值：</p><p>-1：以一个错误码表示没有查找到 key<br>l：将 key 插入到 nums 中的正确位置</p><p>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一左一右两个指针相向而行</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left =<span class="number">0</span></span><br><span class="line">        right=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right):</span><br><span class="line">            mid =left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if 判断条件1:</span><br><span class="line">   执行语句1……</span><br><span class="line">elif 判断条件2:</span><br><span class="line">   执行语句2……</span><br><span class="line">elif 判断条件3:</span><br><span class="line">   执行语句3……</span><br><span class="line">else:</span><br><span class="line">   执行语句4……</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-快慢指针&quot;&gt;&lt;a href=&quot;#1-快慢指针&quot; class=&quot;headerlink&quot; title=&quot;1. 快慢指针&quot;&gt;&lt;/a&gt;1. 快慢指针&lt;/h1&gt;&lt;h1 id=&quot;2-左右指针&quot;&gt;&lt;a href=&quot;#2-左右指针&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>283. Move Zeroes(easy)</title>
    <link href="http://example.com/2022/08/29/283/"/>
    <id>http://example.com/2022/08/29/283/</id>
    <published>2022-08-29T15:18:04.000Z</published>
    <updated>2022-08-29T20:42:27.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="283-Move-Zeroes-easy"><a href="#283-Move-Zeroes-easy" class="headerlink" title="283. Move Zeroes(easy)"></a>283. Move Zeroes(easy)</h1><h2 id="Given-an-integer-array-nums-move-all-0’s-to-the-end-of-it-while-maintaining-the-relative-order-of-the-non-zero-elements"><a href="#Given-an-integer-array-nums-move-all-0’s-to-the-end-of-it-while-maintaining-the-relative-order-of-the-non-zero-elements" class="headerlink" title="Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements."></a>Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</h2><h2 id="Note-that-you-must-do-this-in-place-without-making-a-copy-of-the-array"><a href="#Note-that-you-must-do-this-in-place-without-making-a-copy-of-the-array" class="headerlink" title="Note that you must do this in-place without making a copy of the array."></a>Note that you must do this in-place without making a copy of the array.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p>这道题和26. Remove Duplicates from Sorted Array(easy) 差不多，还是双指针，重复数字改成了0，把非零数字写入数组前面，然后空位补0</p><pre><code class="python">class Solution:    def moveZeroes(self, nums: List[int]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify nums in-place instead.        &quot;&quot;&quot;        slow = 0        fast = 0        while fast&lt;len(nums):            if nums[fast]!=0:                nums[slow]=nums[fast]                slow+=1                            fast+=1        if slow&lt;len(nums):            for i in range(slow,len(nums)):                nums[i]=0        return nums</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;283-Move-Zeroes-easy&quot;&gt;&lt;a href=&quot;#283-Move-Zeroes-easy&quot; class=&quot;headerlink&quot; title=&quot;283. Move Zeroes(easy)&quot;&gt;&lt;/a&gt;283. Move Zeroes(easy)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>27. Remove Element(easy)</title>
    <link href="http://example.com/2022/08/29/27/"/>
    <id>http://example.com/2022/08/29/27/</id>
    <published>2022-08-29T15:15:32.000Z</published>
    <updated>2022-08-29T20:42:14.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="27-Remove-Element-easy"><a href="#27-Remove-Element-easy" class="headerlink" title="27. Remove Element(easy)"></a>27. Remove Element(easy)</h1><h2 id="Given-an-integer-array-nums-and-an-integer-val-remove-all-occurrences-of-val-in-nums-in-place-The-relative-order-of-the-elements-may-be-changed"><a href="#Given-an-integer-array-nums-and-an-integer-val-remove-all-occurrences-of-val-in-nums-in-place-The-relative-order-of-the-elements-may-be-changed" class="headerlink" title="Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed."></a>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.</h2><h2 id="Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements"><a href="#Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements" class="headerlink" title="Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."></a>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</h2><h2 id="Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums"><a href="#Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums" class="headerlink" title="Return k after placing the final result in the first k slots of nums."></a>Return k after placing the final result in the first k slots of nums.</h2><h2 id="Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."></a>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-judge-will-test-your-solution-with-the-following-code"><a href="#The-judge-will-test-your-solution-with-the-following-code" class="headerlink" title="The judge will test your solution with the following code:"></a>The judge will test your solution with the following code:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="If-all-assertions-pass-then-your-solution-will-be-accepted"><a href="#If-all-assertions-pass-then-your-solution-will-be-accepted" class="headerlink" title="If all assertions pass, then your solution will be accepted."></a>If all assertions pass, then your solution will be accepted.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>这道题和26. Remove Duplicates from Sorted Array(easy)几乎一模一样，其实数组是否有序没有任何影响，所以设置快慢指针可解决问题，慢指针 slow 走在后面，快指针 fast 走在前面探路，找到一个不相同的元素就赋值给 slow 并让 slow 前进一步。这样，就保证了 nums[0..slow] 都是不相同的元素，当 fast 指针遍历完整个数组 nums 后，nums[0..slow] 就是整个数组不相同val之后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        slow, fast=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast&lt;<span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[fast]!=val:</span><br><span class="line">                nums[slow]=nums[fast]</span><br><span class="line">                slow+=<span class="number">1</span></span><br><span class="line">            fast+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;27-Remove-Element-easy&quot;&gt;&lt;a href=&quot;#27-Remove-Element-easy&quot; class=&quot;headerlink&quot; title=&quot;27. Remove Element(easy)&quot;&gt;&lt;/a&gt;27. Remove Element</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>26. Remove Duplicates from Sorted Array(easy)</title>
    <link href="http://example.com/2022/08/29/26/"/>
    <id>http://example.com/2022/08/29/26/</id>
    <published>2022-08-29T15:00:06.000Z</published>
    <updated>2022-08-29T20:41:54.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="26-Remove-Duplicates-from-Sorted-Array-easy"><a href="#26-Remove-Duplicates-from-Sorted-Array-easy" class="headerlink" title="26. Remove Duplicates from Sorted Array(easy)"></a>26. Remove Duplicates from Sorted Array(easy)</h1><h2 id="Given-an-integer-array-nums-sorted-in-non-decreasing-order-remove-the-duplicates-in-place-such-that-each-unique-element-appears-only-once-The-relative-order-of-the-elements-should-be-kept-the-same"><a href="#Given-an-integer-array-nums-sorted-in-non-decreasing-order-remove-the-duplicates-in-place-such-that-each-unique-element-appears-only-once-The-relative-order-of-the-elements-should-be-kept-the-same" class="headerlink" title="Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same."></a>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</h2><h2 id="Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements"><a href="#Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements" class="headerlink" title="Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."></a>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</h2><h2 id="Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums"><a href="#Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums" class="headerlink" title="Return k after placing the final result in the first k slots of nums."></a>Return k after placing the final result in the first k slots of nums.</h2><h2 id="Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."></a>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-judge-will-test-your-solution-with-the-following-code"><a href="#The-judge-will-test-your-solution-with-the-following-code" class="headerlink" title="The judge will test your solution with the following code:"></a>The judge will test your solution with the following code:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="If-all-assertions-pass-then-your-solution-will-be-accepted"><a href="#If-all-assertions-pass-then-your-solution-will-be-accepted" class="headerlink" title="If all assertions pass, then your solution will be accepted."></a>If all assertions pass, then your solution will be accepted.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,2]</span><br><span class="line">Output: 2, nums = [1,2,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>这道题并不难，因为只能在原数组上操作，所以设置快慢指针可解决问题，慢指针 slow 走在后面，快指针 fast 走在前面探路，找到一个不重复的元素就赋值给 slow 并让 slow 前进一步。这样，就保证了 nums[0..slow] 都是无重复的元素，当 fast 指针遍历完整个数组 nums 后，nums[0..slow] 就是整个数组去重之后的结果</p><pre><code class="python">class Solution:    def removeDuplicates(self, nums: List[int]) -&gt; int:        if len(nums)==0:            return 0        slow = 0        fast = 0        while fast&lt;len(nums):            if nums[fast]!=nums[slow]:                slow+=1                nums[slow]=nums[fast]            fast+=1        return slow+1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;26-Remove-Duplicates-from-Sorted-Array-easy&quot;&gt;&lt;a href=&quot;#26-Remove-Duplicates-from-Sorted-Array-easy&quot; class=&quot;headerlink&quot; title=&quot;26. Re</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill4-python-loop</title>
    <link href="http://example.com/2022/08/28/LeetCode-skill4-python-loop/"/>
    <id>http://example.com/2022/08/28/LeetCode-skill4-python-loop/</id>
    <published>2022-08-28T19:22:03.000Z</published>
    <updated>2022-08-28T19:22:40.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>for i in range(n)</p><p>range(n)输出的区间为 [ 0 , n − 1 ]，代码如下</p><p>for i in range(5):<br>    print(i)</p><p>输出结果为：0, 1, 2, 3, 4</p><p>for i in range(m, n)</p><p>range(m, n)输出的区间为 [ m , n − 1 ] [m, n - 1][m,n−1]，代码如下</p><p>for i in range(2, 5):<br>    print(i)</p><p>输出结果为： 2, 3, 4</p><p>for i in range(m, n, s)</p><p>参数m,n为左右边界，s为步长<br>range(m, n, s)输出的区间为 ( m , m + s , m + 2 s , ⋯   , n − k s ) (m, m + s, m + 2s, \cdots , n - ks)(m,m+s,m+2s,⋯,n−ks)，代码如下</p><p>for i in range(1,7,2):<br>    print(i)</p><p>输出结果为：1, 3，5</p><p>for _ in range()</p><p>_是一个变量（因为Python中的变量命名能够以下划线开始，单独的下划线也是一个变量），跟i一样，不同点在于，i会在后续的循环体中运用到，而_只是用来实现循环的次数。（因为基本上不会使用单独的下划线来用作变量传值）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;p&gt;for i in range(n)&lt;/p&gt;
&lt;p&gt;range(n)输出的区间为 [ 0 , n − 1 ]，代码如下&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="loop" scheme="http://example.com/tags/loop/"/>
    
  </entry>
  
  <entry>
    <title>25. Reverse Nodes in k-Group(hard)</title>
    <link href="http://example.com/2022/08/28/25/"/>
    <id>http://example.com/2022/08/28/25/</id>
    <published>2022-08-28T18:59:57.000Z</published>
    <updated>2022-08-28T19:41:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="25-Reverse-Nodes-in-k-Group-hard"><a href="#25-Reverse-Nodes-in-k-Group-hard" class="headerlink" title="25. Reverse Nodes in k-Group(hard)"></a>25. Reverse Nodes in k-Group(hard)</h1><h2 id="Given-the-head-of-a-linked-list-reverse-the-nodes-of-the-list-k-at-a-time-and-return-the-modified-list"><a href="#Given-the-head-of-a-linked-list-reverse-the-nodes-of-the-list-k-at-a-time-and-return-the-modified-list" class="headerlink" title="Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list."></a>Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.</h2><h2 id="k-is-a-positive-integer-and-is-less-than-or-equal-to-the-length-of-the-linked-list-If-the-number-of-nodes-is-not-a-multiple-of-k-then-left-out-nodes-in-the-end-should-remain-as-it-is"><a href="#k-is-a-positive-integer-and-is-less-than-or-equal-to-the-length-of-the-linked-list-If-the-number-of-nodes-is-not-a-multiple-of-k-then-left-out-nodes-in-the-end-should-remain-as-it-is" class="headerlink" title="k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is."></a>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</h2><h2 id="You-may-not-alter-the-values-in-the-list’s-nodes-only-nodes-themselves-may-be-changed"><a href="#You-may-not-alter-the-values-in-the-list’s-nodes-only-nodes-themselves-may-be-changed" class="headerlink" title="You may not alter the values in the list’s nodes, only nodes themselves may be changed."></a>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], k = 2</span><br><span class="line">Output: [2,1,4,3,5]</span><br></pre></td></tr></table></figure><p><img src="https://labuladong.github.io/algo/images/kgroup/8.gif"></p><p>我们要实现一个 reverse 函数反转一个区间之内的元素。在此之前我们再简化一下，给定链表头结点，如何反转整个链表？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转以 a 为头结点的链表</span></span><br><span class="line"><span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode a)</span> </span>&#123;</span><br><span class="line">    ListNode pre, cur, nxt;</span><br><span class="line">    pre = <span class="keyword">null</span>; cur = a; nxt = a;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nxt = cur.next;</span><br><span class="line">        <span class="comment">// 逐个结点反转</span></span><br><span class="line">        cur.next = pre;</span><br><span class="line">        <span class="comment">// 更新指针位置</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nxt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回反转后的头结点</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次使用迭代思路来实现的，借助动画理解应该很容易。</p><p>「反转以 a 为头结点的链表」其实就是「反转 a 到 null 之间的结点」，那么如果让你「反转 a 到 b 之间的结点」，你会不会？</p><p>只要更改函数签名，并把上面的代码中 null 改成 b 即可：<br>Java原版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span></span><br><span class="line"><span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode a, ListNode b)</span> </span>&#123;</span><br><span class="line">    ListNode pre, cur, nxt;</span><br><span class="line">    pre = <span class="keyword">null</span>; cur = a; nxt = a;</span><br><span class="line">    <span class="comment">// while 终止的条件改一下就行了</span></span><br><span class="line">    <span class="keyword">while</span> (cur != b) &#123;</span><br><span class="line">        nxt = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nxt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回反转后的头结点</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 改版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    pre= <span class="literal">None</span></span><br><span class="line">    current =a</span><br><span class="line">    nxt=a</span><br><span class="line">    <span class="keyword">while</span> (current!=b):</span><br><span class="line">        nxt = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = pre</span><br><span class="line">        pre = current</span><br><span class="line">        current = nxt</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们迭代实现了反转部分链表的功能，接下来就按照之前的逻辑编写 reverseKGroup 函数即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 区间 [a, b) 包含 k 个待反转元素</span></span><br><span class="line">    ListNode a, b;</span><br><span class="line">    a = b = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="comment">// 不足 k 个，不需要反转，base case</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        b = b.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转前 k 个元素</span></span><br><span class="line">    ListNode newHead = reverse(a, b);</span><br><span class="line">    <span class="comment">// 递归反转后续链表并连接起来</span></span><br><span class="line">    a.next = reverseKGroup(b, k);</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 完整版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], k: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">a,b</span>):</span></span><br><span class="line">            pre= <span class="literal">None</span></span><br><span class="line">            current =a</span><br><span class="line">            nxt=a</span><br><span class="line">            <span class="keyword">while</span> (current!=b):</span><br><span class="line">                nxt = current.<span class="built_in">next</span></span><br><span class="line">                current.<span class="built_in">next</span> = pre</span><br><span class="line">                pre = current</span><br><span class="line">                current = nxt</span><br><span class="line">            <span class="keyword">return</span> pre</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        a= head</span><br><span class="line">        b = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="keyword">if</span> b ==<span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            b=b.<span class="built_in">next</span></span><br><span class="line">        newHead = reverse(a,b)</span><br><span class="line">        a.<span class="built_in">next</span> = self.reverseKGroup(b,k)</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;25-Reverse-Nodes-in-k-Group-hard&quot;&gt;&lt;a href=&quot;#25-Reverse-Nodes-in-k-Group-hard&quot; class=&quot;headerlink&quot; title=&quot;25. Reverse Nodes in k-Group</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
    <category term="recursion" scheme="http://example.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>92. Reverse Linked List II(medium)</title>
    <link href="http://example.com/2022/08/27/92/"/>
    <id>http://example.com/2022/08/27/92/</id>
    <published>2022-08-28T03:18:09.000Z</published>
    <updated>2022-08-28T03:41:11.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="92-Reverse-Linked-List-II-medium"><a href="#92-Reverse-Linked-List-II-medium" class="headerlink" title="92. Reverse Linked List II(medium)"></a>92. Reverse Linked List II(medium)</h1><h2 id="Given-the-head-of-a-singly-linked-list-and-two-integers-left-and-right-where-left-lt-right-reverse-the-nodes-of-the-list-from-position-left-to-position-right-and-return-the-reversed-list"><a href="#Given-the-head-of-a-singly-linked-list-and-two-integers-left-and-right-where-left-lt-right-reverse-the-nodes-of-the-list-from-position-left-to-position-right-and-return-the-reversed-list" class="headerlink" title="Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list."></a>Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list.</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span>(<span class="params">self, head: ListNode, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 设置 dummyNode 是这一类问题的一般做法</span></span><br><span class="line">        dummy_node = ListNode(-<span class="number">1</span>)</span><br><span class="line">        dummy_node.<span class="built_in">next</span> = head</span><br><span class="line">        pre = dummy_node</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left - <span class="number">1</span>):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">        cur = pre.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(right - left):</span><br><span class="line">            <span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = <span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span>.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy_node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>第一步<br><img src="https://pic.leetcode-cn.com/1615105296-bmiPxl-image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">cur.<span class="built_in">next</span> = <span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"><span class="built_in">next</span>.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">pre.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步<br><img src="https://pic.leetcode-cn.com/1615105340-UBnTBZ-image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;92-Reverse-Linked-List-II-medium&quot;&gt;&lt;a href=&quot;#92-Reverse-Linked-List-II-medium&quot; class=&quot;headerlink&quot; title=&quot;92. Reverse Linked List II(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>142. Linked List Cycle II(medium)</title>
    <link href="http://example.com/2022/08/27/142/"/>
    <id>http://example.com/2022/08/27/142/</id>
    <published>2022-08-27T21:52:08.000Z</published>
    <updated>2022-08-28T03:40:55.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="142-Linked-List-Cycle-II-medium"><a href="#142-Linked-List-Cycle-II-medium" class="headerlink" title="142. Linked List Cycle II(medium)"></a>142. Linked List Cycle II(medium)</h1><h3 id="快慢指针-leetcode题解"><a href="#快慢指针-leetcode题解" class="headerlink" title="快慢指针-leetcode题解"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/">快慢指针-leetcode题解</a></h3><p><img src="https://cdn.staticaly.com/gh/upuphero/image-hosting@master/142_fig1.4mi7jkj5o2g0.webp" alt="142"></p><p>思路与算法</p><p>我们使用两个指针，fast 与 slow。它们起始都位于链表的头部。随后，slow 指针每次向后移动一个位置，而 fast 指针向后移动两个位置。如果链表中存在环，则 fast 指针最终将再次与 slow 指针在环中相遇。</p><p>如下图所示，设链表中环外部分的长度为 a。slow 指针进入环后，又走了 bb 的距离与 fast 相遇。此时，fast 指针已经走完了环的 nn 圈，因此它走过的总距离为 a+n(b+c)+b=a+(n+1)b+nc。</p><p>根据题意，任意时刻，fast 指针走过的距离都为 slow 指针的 2 倍。因此，我们有</p><p>a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)</p><p>a=c+(n−1)(b+c)<br>有了 a=c+(n−1)(b+c) 的等量关系，我们会发现：从相遇点到入环点的距离加上 n−1 圈的环长，恰好等于从链表头部到入环点的距离。</p><p>因此，当发现 slow 与 fast 相遇时，我们再额外使用一个指针 ptr。起始，它指向链表头部；随后，它和 slow 每次向后移动一个位置。最终，它们会在入环点相遇。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> fast.<span class="built_in">next</span>:</span><br><span class="line">                fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                ptr = head</span><br><span class="line">                <span class="keyword">while</span> ptr!=slow:</span><br><span class="line">                    ptr=ptr.<span class="built_in">next</span></span><br><span class="line">                    slow = slow.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> ptr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;142-Linked-List-Cycle-II-medium&quot;&gt;&lt;a href=&quot;#142-Linked-List-Cycle-II-medium&quot; class=&quot;headerlink&quot; title=&quot;142. Linked List Cycle II(medi</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill3-python-if</title>
    <link href="http://example.com/2022/08/27/LeetCode-skill3-python-if/"/>
    <id>http://example.com/2022/08/27/LeetCode-skill3-python-if/</id>
    <published>2022-08-27T21:38:34.000Z</published>
    <updated>2022-08-28T19:22:16.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="if基本语句"><a href="#if基本语句" class="headerlink" title="if基本语句"></a>if基本语句</h1><h2 id="if-语句的判断条件可以用-gt-（大于）、-lt-小于-、-（等于）、-gt-（大于等于）、-lt-（小于等于）来表示其关系"><a href="#if-语句的判断条件可以用-gt-（大于）、-lt-小于-、-（等于）、-gt-（大于等于）、-lt-（小于等于）来表示其关系" class="headerlink" title="if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系"></a>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> 判断条件：</span><br><span class="line">   执行语句……</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">   执行语句……</span><br><span class="line">‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’</span><br><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">   执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">   执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">   执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><h1 id="if-or-and"><a href="#if-or-and" class="headerlink" title="if or/and"></a>if or/and</h1><h2 id="如果判断需要多个条件需同时判断时，可以使用-or-（或），表示两个条件有一个成立时判断条件成功；使用-and-（与）时，表示只有两个条件同时成立的情况下，判断条件才成功"><a href="#如果判断需要多个条件需同时判断时，可以使用-or-（或），表示两个条件有一个成立时判断条件成功；使用-and-（与）时，表示只有两个条件同时成立的情况下，判断条件才成功" class="headerlink" title="如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功"></a>如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.detail_image_tip.exists() <span class="keyword">or</span> self.open_long_atlas.exists():</span><br><span class="line">  logger.info(<span class="string">&#x27;当前作品不支持相关推荐展示&#x27;</span>)</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;up&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line">  logger.info(<span class="string">&#x27;上滑一个作品&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  logger.info(<span class="string">&#x27;当前作品支持相关推荐展示&#x27;</span>)</span><br><span class="line"><span class="comment">#or 两个元素只要有一个为True 那么这个判断就为True 两个元素判断都为Flase才为False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.link_icon.exists() <span class="keyword">and</span> self.hot_live.exists():</span><br><span class="line">  logger.info(<span class="string">&#x27;当前作品不是普通作品&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  logger.info(<span class="string">&#x27;当前作品普通作品&#x27;</span>)</span><br><span class="line"><span class="comment">#and 当前两个元素都存在为True时 if判断为True  一个为False 那么if判断就为False</span></span><br></pre></td></tr></table></figure><h1 id="not"><a href="#not" class="headerlink" title="not"></a>not</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.comment_frame.exists() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#is not True的意思是当元素判断不为True的时候 if的判断为True 走True的部分不走else的部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> number &gt; <span class="number">6</span>:</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;down&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;up&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#not的意思是 if判断当number不大于6时(也就是&lt;=6) 那么走if的True的部分</span></span><br><span class="line"><span class="comment">#这样的好处就是不用去特地写else的部分</span></span><br><span class="line"><span class="comment">#如下：</span></span><br><span class="line"><span class="keyword">if</span>  number &gt; <span class="number">6</span>:</span><br><span class="line">  <span class="built_in">print</span>(‘当前number大于<span class="number">6</span>’)</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;down&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;up&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#有的同学就会说那我写&lt;=6不行吗</span></span><br><span class="line"><span class="keyword">if</span>  number &lt;= <span class="number">6</span>:</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;down&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line">  self.swipeByCount(<span class="string">&quot;up&quot;</span>, <span class="number">0.2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#也可以这么写 但是我在定义这个函数的时候实际目的是找大于6条的评论 所以not number &gt; 6会更清晰 看个人习惯了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number_of_folds</span>(<span class="params">self</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  判断折叠评论数量大于6条</span></span><br><span class="line"><span class="string">  :return:</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="if-缩写"><a href="#if-缩写" class="headerlink" title="if 缩写"></a>if 缩写</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> A:</span><br><span class="line">    A =A.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    A= headB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;if基本语句&quot;&gt;&lt;a href=&quot;#if基本语句&quot; class=&quot;headerlink&quot; title=&quot;if基本语句&quot;&gt;&lt;/a&gt;if基本语句&lt;/h1&gt;&lt;h2 id=&quot;if-语句的判断条件可以用-gt-（大于）、-lt-小于-、-（等于）、-gt-（大于等于）、-l</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="if" scheme="http://example.com/tags/if/"/>
    
  </entry>
  
  <entry>
    <title>876. Middle of the Linked List(easy)</title>
    <link href="http://example.com/2022/08/27/876/"/>
    <id>http://example.com/2022/08/27/876/</id>
    <published>2022-08-27T21:03:31.000Z</published>
    <updated>2022-08-28T03:40:38.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="876-Middle-of-the-Linked-List-easy"><a href="#876-Middle-of-the-Linked-List-easy" class="headerlink" title="876. Middle of the Linked List(easy)"></a>876. Middle of the Linked List(easy)</h1><h2 id="Given-the-head-of-a-singly-linked-list-return-the-middle-node-of-the-linked-list"><a href="#Given-the-head-of-a-singly-linked-list-return-the-middle-node-of-the-linked-list" class="headerlink" title="Given the head of a singly linked list, return the middle node of the linked list."></a>Given the head of a singly linked list, return the middle node of the linked list.</h2><h2 id="If-there-are-two-middle-nodes-return-the-second-middle-node"><a href="#If-there-are-two-middle-nodes-return-the-second-middle-node" class="headerlink" title="If there are two middle nodes, return the second middle node."></a>If there are two middle nodes, return the second middle node.</h2><p>我们让两个指针 slow 和 fast 分别指向链表头结点 head。</p><p>每当慢指针 slow 前进一步，快指针 fast 就前进两步，这样，当 fast 走到链表末尾时，slow 就指向了链表中点。</p><pre><code class="python"># Definition for singly-linked list.# class ListNode:#     def __init__(self, val=0, next=None):#         self.val = val#         self.next = nextclass Solution:    def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:        slow = head        fast =head        while fast and fast.next:            slow = slow.next            fast = fast.next.next        return slow</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;876-Middle-of-the-Linked-List-easy&quot;&gt;&lt;a href=&quot;#876-Middle-of-the-Linked-List-easy&quot; class=&quot;headerlink&quot; title=&quot;876. Middle of the Linke</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>86. Partition List(medium)</title>
    <link href="http://example.com/2022/08/27/86/"/>
    <id>http://example.com/2022/08/27/86/</id>
    <published>2022-08-27T20:33:04.000Z</published>
    <updated>2022-08-27T20:42:49.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="86-Partition-List-medium"><a href="#86-Partition-List-medium" class="headerlink" title="86. Partition List(medium)"></a>86. Partition List(medium)</h1><h2 id="Given-the-head-of-a-linked-list-and-a-value-x-partition-it-such-that-all-nodes-less-than-x-come-before-nodes-greater-than-or-equal-to-x"><a href="#Given-the-head-of-a-linked-list-and-a-value-x-partition-it-such-that-all-nodes-less-than-x-come-before-nodes-greater-than-or-equal-to-x" class="headerlink" title="Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x."></a>Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</h2><h2 id="You-should-preserve-the-original-relative-order-of-the-nodes-in-each-of-the-two-partitions"><a href="#You-should-preserve-the-original-relative-order-of-the-nodes-in-each-of-the-two-partitions" class="headerlink" title="You should preserve the original relative order of the nodes in each of the two partitions."></a>You should preserve the original relative order of the nodes in each of the two partitions.</h2><p>链表的基本操作，但是这里创立了两个链表,两个 dummy node 来持有两个分割出来的子链表，分别存储比x大和小的，最后在将数字小的那部分链接到大数字上</p><p><a href="https://leetcode.cn/problems/partition-list/solution/fen-ge-lian-biao-by-leetcode-solution-7ade/">官方说明</a></p><p>直观来说我们只需维护两个链表 small 和 large 即可，small 链表按顺序存储所有小于 x 的节点，large 链表按顺序存储所有大于等于 x 的节点。遍历完原链表后，我们只要将 small 链表尾节点指向 large 链表的头节点即能完成对链表的分隔。</p><p>为了实现上述思路，我们设 smallHead 和 largeHead 分别为两个链表的哑节点，即它们的 next 指针指向链表的头节点，这样做的目的是为了更方便地处理头节点为空的边界条件。同时设 small 和 large 节点指向当前链表的末尾节点。开始时 smallHead=small,largeHead=large。随后，从前往后遍历链表，判断当前链表的节点值是否小于 x，如果小于就将 small 的 next 指针指向该节点，否则将 large 的 next 指针指向该节点。</p><p>遍历结束后，我们将 large 的 next 指针置空，这是因为当前节点复用的是原链表的节点，而其 next 指针可能指向一个小于 x 的节点，我们需要切断这个引用。同时将 small 的 next 指针指向 largeHead 的 next 指针指向的节点，即真正意义上的 large 链表的头节点。最后返回 smallHead 的 next 指针即为我们要求的答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], x: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        smallhead = small =ListNode(<span class="number">0</span>)</span><br><span class="line">        largehead = large =ListNode(<span class="number">0</span>)        </span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                small.<span class="built_in">next</span> = head</span><br><span class="line">                small = small.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                large.<span class="built_in">next</span> = head</span><br><span class="line">                large = large.<span class="built_in">next</span></span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        large.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        small.<span class="built_in">next</span> = largehead.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> smallhead.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;86-Partition-List-medium&quot;&gt;&lt;a href=&quot;#86-Partition-List-medium&quot; class=&quot;headerlink&quot; title=&quot;86. Partition List(medium)&quot;&gt;&lt;/a&gt;86. Partitio</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>203. Remove Linked List Elements(easy)</title>
    <link href="http://example.com/2022/08/26/203/"/>
    <id>http://example.com/2022/08/26/203/</id>
    <published>2022-08-26T20:04:55.000Z</published>
    <updated>2022-08-26T20:10:39.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="203-Remove-Linked-List-Elements-easy"><a href="#203-Remove-Linked-List-Elements-easy" class="headerlink" title="203. Remove Linked List Elements(easy)"></a>203. Remove Linked List Elements(easy)</h1><h2 id="Given-the-head-of-a-linked-list-and-an-integer-val-remove-all-the-nodes-of-the-linked-list-that-has-Node-val-val-and-return-the-new-head"><a href="#Given-the-head-of-a-linked-list-and-an-integer-val-remove-all-the-nodes-of-the-linked-list-that-has-Node-val-val-and-return-the-new-head" class="headerlink" title="Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head."></a>Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">Output: [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>这题是一个简单题，但可以学习如何添加dummy node</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pre = ListNode(-<span class="number">1</span>)</span><br><span class="line">pre.<span class="built_in">next</span> = head</span><br><span class="line">current = pre</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code class="python"># Definition for singly-linked list.# class ListNode:#     def __init__(self, val=0, next=None):#         self.val = val#         self.next = nextclass Solution:    def removeElements(self, head: Optional[ListNode], val: int) -&gt; Optional[ListNode]:        pre = ListNode(-1)        pre.next = head        current = pre        while current.next!=None:            if current.next.val== val:                current.next= current.next.next            else:                current = current.next        return pre.next</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;203-Remove-Linked-List-Elements-easy&quot;&gt;&lt;a href=&quot;#203-Remove-Linked-List-Elements-easy&quot; class=&quot;headerlink&quot; title=&quot;203. Remove Linked L</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill2-python_funciton</title>
    <link href="http://example.com/2022/08/24/LeetCode-skill2-python-funciton/"/>
    <id>http://example.com/2022/08/24/LeetCode-skill2-python-funciton/</id>
    <published>2022-08-24T21:16:04.000Z</published>
    <updated>2022-08-24T21:52:18.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-常用函数"><a href="#python-常用函数" class="headerlink" title="python 常用函数"></a>python 常用函数</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Python 的列表 List 基本就是其它语言的 Array.</p><h3 id="Initialization-初始化"><a href="#Initialization-初始化" class="headerlink" title="Initialization 初始化"></a>Initialization 初始化</h3><p>List 的初始化一般用 List comprehension，往往能一行解决问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1d array</span><br><span class="line">l = [0 for _ in range(len(array)]</span><br><span class="line"></span><br><span class="line"># 2d</span><br><span class="line">l = [[0 for i in range(cols)] for j in range(rows)]</span><br></pre></td></tr></table></figure><h3 id="Start-from-the-behind"><a href="#Start-from-the-behind" class="headerlink" title="Start from the behind"></a>Start from the behind</h3><p>你可以轻松从后往前访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lastElement = l[-1]</span><br><span class="line"></span><br><span class="line">lastTwo = l[-2:]</span><br><span class="line"></span><br><span class="line">for i in range(0, -10, -1)</span><br><span class="line"># 0, -1, -2, -3, -4, -5, -6, -7, -8, -9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="copy-复制"><a href="#copy-复制" class="headerlink" title="copy 复制"></a>copy 复制</h3><h3 id="shallow-copy-浅拷贝"><a href="#shallow-copy-浅拷贝" class="headerlink" title="shallow copy 浅拷贝"></a>shallow copy 浅拷贝</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l2 = l1[:]</span><br><span class="line"># or</span><br><span class="line">l2 = l1.copy()</span><br></pre></td></tr></table></figure><p>浅复制的问题在于，如果 l1 内部还有 list，那么这种嵌套的索引不能被复制，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 2, [3, 4]]</span><br><span class="line">b = a[:]</span><br><span class="line">a[2].append(5)</span><br><span class="line">print(b)</span><br><span class="line"># [1, 2, [3, 4, 5]]</span><br></pre></td></tr></table></figure><h3 id="deep-copy-深拷贝"><a href="#deep-copy-深拷贝" class="headerlink" title="deep copy 深拷贝"></a>deep copy 深拷贝</h3><p>所以如果要做深拷贝，要节制自带库 copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line"></span><br><span class="line">copy.deepcopy()</span><br></pre></td></tr></table></figure><h3 id="enumerate-枚举"><a href="#enumerate-枚举" class="headerlink" title="enumerate 枚举"></a>enumerate 枚举</h3><p>当我们需要枚举一个数组并同时获得值与 index 的时候可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line"></span><br><span class="line">for i, v in enumerate(l):</span><br><span class="line">    print(i, v)</span><br><span class="line"># 0 a</span><br><span class="line"># 1 b</span><br><span class="line"># 2 c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip 本意就是拉链，可以想象成将两个数组像拉链一样挨个聚合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; y = [4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; zipped = zip(x, y)</span><br><span class="line">&gt;&gt;&gt; list(zipped)</span><br><span class="line">[(1, 4), (2, 5), (3, 6)]</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>reduce 可以分别对相邻元素使用同一种计算规则，同时每一步结果作为下一步的参数，很典型的函数式编程用法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># importing functools for reduce()</span><br><span class="line">import functools</span><br><span class="line"># initializing list</span><br><span class="line">lis = [ 1, 3, 5, 6, 2, ]</span><br><span class="line"></span><br><span class="line"># using reduce to compute sum of list</span><br><span class="line">print (&quot;The sum of the list elements is : &quot;,end=&quot;&quot;)</span><br><span class="line">print (functools.reduce(lambda a,b : a+b,lis))</span><br><span class="line"></span><br><span class="line"># The sum of the list elements is : 17</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>可以将参数一一映射来计算， 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date = &quot;2019-8-15&quot;</span><br><span class="line">Y, M, D = map(int, date.split(&#x27;-&#x27;))</span><br><span class="line"># Y = 2019, M = 8, D = 15</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>list 删除末尾的操作是O(1)的，但是删除头操作就是O(n)，这时候我们就需要一个双端队列 deque。<br>首尾的常规操作为：</p><p>append，添加到末尾<br>appendleft, 添加到开头<br>pop, 剔除末尾<br>popleft，移除开头</p><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p>list 自身有自带的 sort(), 但是它不返回新的 list. sorted 能返回一个新的 list, 并且支持传入参数reverse。</p><p>比如我们有一个 tuple 的数组，我们想按照 tuple 的第一个元素进行排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [(1,2), (0,1), (3,10) ]</span><br><span class="line"></span><br><span class="line">l2 = sorted(l1, key=lambda x: x[0])</span><br><span class="line"></span><br><span class="line"># l2 = [(0, 1), (1, 2), (3, 10)]</span><br></pre></td></tr></table></figure><p>这里的 key 允许传入一个自定义参数，也可以用自带函数进行比较，比如在一个 string 数组里只想比较小写，可以传入key=str.lower</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [&quot;banana&quot;,&quot;APPLE&quot;, &quot;Watermelon&quot;]</span><br><span class="line">l2 = sorted(l1, key=str.lower)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line"># [&#x27;APPLE&#x27;, &#x27;banana&#x27;, &#x27;Watermelon&#x27;]</span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>你注意到我们在上面使用了 lambda 来定义一个匿名函数，十分方便。如果你熟悉其它语言类似 JS 的话，可以把它理解成一个 callback 函数，参数名一一对应就行。</p><h3 id="cmp-to-key"><a href="#cmp-to-key" class="headerlink" title="cmp_to_key"></a>cmp_to_key</h3><p>在 python3 中，sorted 函数取消了自带的cmp函数，需要借助functools 库中的 cmp_to_key来做比较。<br>比如如果要按照数组元素的绝对值来排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from functools import cmp_to_key</span><br><span class="line">def absSort(arr):</span><br><span class="line">    newarr = sorted(arr, key = cmp_to_key(sortfunc))</span><br><span class="line">    return newarr</span><br><span class="line">def sortfunc(a, b):</span><br><span class="line">    if abs(a) &lt; abs(b):</span><br><span class="line">      return -1</span><br><span class="line">    elif abs(a) &gt; abs(b):</span><br><span class="line">      return 1</span><br><span class="line">    else:</span><br><span class="line">      return a - b</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set 的查找操作复杂度为O(1)，有时候可以替代dict 来存储中间过程。</p><p>add : set 的添加是 add 不是append</p><p>remove vs discard: 都是删除操作，区别在于remove不存在的元素会报错，discard不会。</p><p>union, intersection: 快速获得并集和交集，方便一些去重操作。</p><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>字典，相当于其它语言中的map, hashtable, hashmap之类的，读取操作也是O(1) 复杂度</p><h3 id="keys-values-items"><a href="#keys-values-items" class="headerlink" title="keys(), values(), items()"></a>keys(), values(), items()</h3><p>这三个方法可以分别获得key, value, {key: value}的数组。</p><h3 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h3><p>这个函数经常在初始化字典时候使用，如果某个key在字典中存在，返回它的value, 否则返回你给的 default 值。比如在建一个 trie 树的时候</p><h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>OrderedDict 能记录你 key 和 value 插入的顺序，底层其实是一个双向链表加哈希表的实现。我们甚至可以使用move_to_end这样的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = OrderedDict.fromkeys(&#x27;abcde&#x27;)</span><br><span class="line">&gt;&gt;&gt; d.move_to_end(&#x27;b&#x27;)</span><br><span class="line">&gt;&gt;&gt; &#x27;&#x27;.join(d.keys())</span><br><span class="line">&#x27;acdeb&#x27;</span><br><span class="line"># 放开头</span><br><span class="line">&gt;&gt;&gt; d.move_to_end(&#x27;b&#x27;, last=False)</span><br><span class="line">&gt;&gt;&gt; &#x27;&#x27;.join(d.keys())</span><br><span class="line">&#x27;bacde&#x27;</span><br></pre></td></tr></table></figure><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>defaultdict可以很好地来解决一些初始化的问题，比如 value 是一个 list，每次需要判断 key 是否存在的情况。这时我们可以直接定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = defaultdict(list)</span><br><span class="line"></span><br><span class="line">s = [(&#x27;yellow&#x27;, 1), (&#x27;blue&#x27;, 2), (&#x27;yellow&#x27;, 3), (&#x27;blue&#x27;, 4), (&#x27;red&#x27;, 1)]</span><br><span class="line">for k, v in s:</span><br><span class="line">     d[k].append(v)</span><br><span class="line">sorted(d.items())</span><br><span class="line"># [(&#x27;blue&#x27;, [2, 4]), (&#x27;red&#x27;, [1]), (&#x27;yellow&#x27;, [1, 3])]</span><br></pre></td></tr></table></figure><h2 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h2><p>heapq 就是 python 的 priority queue，heapq[0]即为堆顶元素。</p><p>heapq 的实现是小顶堆，如果需要一个大顶堆，常规的一个做法是把值取负存入，取出时再反转。<br>以下是借助 heapq 来实现 heapsort 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def heapsort(iterable):</span><br><span class="line">...     h = []</span><br><span class="line">...     for value in iterable:</span><br><span class="line">...         heappush(h, value)</span><br><span class="line">...     return [heappop(h) for i in range(len(h))]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h2 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h2><p>python 自带二分查找的库，在一些不要求实现 binary search，但是借助它能加速的场景下可以直接使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bisect.bisect(a, x, lo=0, hi=len(a))</span><br><span class="line">这里的参数分别为 数组，要查找的数，范围起始点，范围结束点</span><br></pre></td></tr></table></figure><p>相似函数还有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bisect.bisect_left</span><br><span class="line">bisect.bisect_right</span><br></pre></td></tr></table></figure><p>分别返回可以插入 x 的最左和最右 index</p><h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p>Counter 接受的参数可以是一个 string, 或者一个 list, mapping</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = Counter()                           # a new, empty counter</span><br><span class="line">&gt;&gt;&gt; c = Counter(&#x27;gallahad&#x27;)                 # a new counter from an iterable</span><br><span class="line">&gt;&gt;&gt; c = Counter(&#123;&#x27;red&#x27;: 4, &#x27;blue&#x27;: 2&#125;)      # a new counter from a mapping</span><br><span class="line">&gt;&gt;&gt; c = Counter(cats=4, dogs=8)             # a new counter from keyword args</span><br></pre></td></tr></table></figure><p>most_common(n)<br>可以得到出现次数最多的 n 个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Counter(&#x27;abracadabra&#x27;).most_common(3)  # doctest: +SKIP</span><br><span class="line">[(&#x27;a&#x27;, 5), (&#x27;r&#x27;, 2), (&#x27;b&#x27;, 2)]</span><br></pre></td></tr></table></figure><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><h3 id="ord-char"><a href="#ord-char" class="headerlink" title="ord, char"></a>ord, char</h3><p>ord 返回单个字符的 unicode:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#x27;a&#x27;)</span><br><span class="line">97</span><br></pre></td></tr></table></figure><p>char 则是反向操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; chr(100)</span><br><span class="line">&#x27;d&#x27;</span><br></pre></td></tr></table></figure><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><p>移除 string 前后的字符串，默认来移除空格，但是也可以给一个字符串，然后会移除含有这个字符串的部分：</p><p>``</p><blockquote><blockquote><blockquote><p>‘   spacious   ‘.strip()<br>‘spacious’<br>‘<a href="http://www.example.com&/#39;.strip(&#39;cmowz.&#39;)">www.example.com&#39;.strip(&#39;cmowz.&#39;)</a><br>‘example’<br>``</p></blockquote></blockquote></blockquote><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>按照某个字符串来切分，返回一个 list, 可以传入一个参数maxsplit来限定分离数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;1,2,3&#x27;.split(&#x27;,&#x27;)</span><br><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="line">&gt;&gt;&gt; &#x27;1,2,3&#x27;.split(&#x27;,&#x27;, maxsplit=1)</span><br><span class="line">[&#x27;1&#x27;, &#x27;2,3&#x27;]</span><br><span class="line">&gt;&gt;&gt; &#x27;1,2,,3,&#x27;.split(&#x27;,&#x27;)</span><br><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;&#x27;, &#x27;3&#x27;, &#x27;&#x27;]</span><br></pre></td></tr></table></figure><h2 id="int-float"><a href="#int-float" class="headerlink" title="int/ float"></a>int/ float</h2><h3 id="最大-最小-number"><a href="#最大-最小-number" class="headerlink" title="最大, 最小 number"></a>最大, 最小 number</h3><p>有时候初始化我们需要设定 Math.max() 和 Math.min(), 在 python 中分别以 float(‘inf’) 和 float(‘-inf’)表示</p><p>或者也可以用math库里的 math.inf 和 math.inf</p><p>在 python2 中我们也可以这么做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#maxint</span><br><span class="line">Max = sys.maxint</span><br></pre></td></tr></table></figure><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>在 python3 中， / 会保留浮点，相当于 float 相除，如果需要做到像 pyhton2 中的 int 相除，需要 //：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3 / 2</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3 // 2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="次方"><a href="#次方" class="headerlink" title="次方"></a>次方</h3><p>在 python 中为 **:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2 ** 10</span><br><span class="line">1024</span><br></pre></td></tr></table></figure><h2 id="conditions"><a href="#conditions" class="headerlink" title="conditions"></a>conditions</h2><p>在 python 的三项表达式(ternary operation) 与其它语言不太一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = a if condition else b</span><br></pre></td></tr></table></figure><p>它表示如果 condition 满足，那么 res = a, 不然 res = b，在类 c 的语言里即为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = condition ? a : b;</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://hzhao.me/2019/08/16/python-leetcode-trick/#heapq">https://hzhao.me/2019/08/16/python-leetcode-trick/#heapq</a></p><p><a href="https://xdren69.github.io/2021/03/31/leetcode-python/">https://xdren69.github.io/2021/03/31/leetcode-python/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-常用函数&quot;&gt;&lt;a href=&quot;#python-常用函数&quot; class=&quot;headerlink&quot; title=&quot;python 常用函数&quot;&gt;&lt;/a&gt;python 常用函数&lt;/h1&gt;&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="python function" scheme="http://example.com/tags/python-function/"/>
    
  </entry>
  
  <entry>
    <title>304. Range Sum Query 2D - Immutable(medium)</title>
    <link href="http://example.com/2022/08/24/304/"/>
    <id>http://example.com/2022/08/24/304/</id>
    <published>2022-08-24T20:43:59.000Z</published>
    <updated>2022-08-24T21:48:36.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="304-Range-Sum-Query-2D-Immutable-medium"><a href="#304-Range-Sum-Query-2D-Immutable-medium" class="headerlink" title="304. Range Sum Query 2D - Immutable(medium)"></a>304. Range Sum Query 2D - Immutable(medium)</h1><h2 id="Given-a-2D-matrix-matrix-handle-multiple-queries-of-the-following-type"><a href="#Given-a-2D-matrix-matrix-handle-multiple-queries-of-the-following-type" class="headerlink" title="Given a 2D matrix matrix, handle multiple queries of the following type:"></a>Given a 2D matrix matrix, handle multiple queries of the following type:</h2><h2 id="Calculate-the-sum-of-the-elements-of-matrix-inside-the-rectangle-defined-by-its-upper-left-corner-row1-col1-and-lower-right-corner-row2-col2"><a href="#Calculate-the-sum-of-the-elements-of-matrix-inside-the-rectangle-defined-by-its-upper-left-corner-row1-col1-and-lower-right-corner-row2-col2" class="headerlink" title="Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2)."></a>Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</h2><h2 id="Implement-the-NumMatrix-class"><a href="#Implement-the-NumMatrix-class" class="headerlink" title="Implement the NumMatrix class:"></a>Implement the NumMatrix class:</h2><h3 id="NumMatrix-int-matrix-Initializes-the-object-with-the-integer-matrix-matrix"><a href="#NumMatrix-int-matrix-Initializes-the-object-with-the-integer-matrix-matrix" class="headerlink" title="NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix."></a>NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.</h3><h3 id="int-sumRegion-int-row1-int-col1-int-row2-int-col2-Returns-the-sum-of-the-elements-of-matrix-inside-the-rectangle-defined-by-its-upper-left-corner-row1-col1-and-lower-right-corner-row2-col2"><a href="#int-sumRegion-int-row1-int-col1-int-row2-int-col2-Returns-the-sum-of-the-elements-of-matrix-inside-the-rectangle-defined-by-its-upper-left-corner-row1-col1-and-lower-right-corner-row2-col2" class="headerlink" title="int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2)."></a>int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</h3><h2 id="You-must-design-an-algorithm-where-sumRegion-works-on-O-1-time-complexity"><a href="#You-must-design-an-algorithm-where-sumRegion-works-on-O-1-time-complexity" class="headerlink" title="You must design an algorithm where sumRegion works on O(1) time complexity."></a>You must design an algorithm where sumRegion works on O(1) time complexity.</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/solution/er-wei-qu-yu-he-jian-suo-ju-zhen-bu-ke-b-2z5n/">官方题解</a></h3><p>这道题是303题的升级版，从一维数组升级成二维矩阵，同样是前缀和数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>):</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), (<span class="built_in">len</span>(matrix[<span class="number">0</span>]) <span class="keyword">if</span> matrix <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">        self.sums = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">        _sums = self.sums</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                _sums[i + <span class="number">1</span>][j + <span class="number">1</span>] = _sums[i][j + <span class="number">1</span>] + _sums[i + <span class="number">1</span>][j] - _sums[i][j] + matrix[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRegion</span>(<span class="params">self, row1: <span class="built_in">int</span>, col1: <span class="built_in">int</span>, row2: <span class="built_in">int</span>, col2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        _sums = self.sums</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _sums[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] - _sums[row1][col2 + <span class="number">1</span>] - _sums[row2 + <span class="number">1</span>][col1] + _sums[row1][col1]</span><br></pre></td></tr></table></figure><p>作者：LeetCode-Solution<br>链接：<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;304-Range-Sum-Query-2D-Immutable-medium&quot;&gt;&lt;a href=&quot;#304-Range-Sum-Query-2D-Immutable-medium&quot; class=&quot;headerlink&quot; title=&quot;304. Range Sum</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
  </entry>
  
</feed>
