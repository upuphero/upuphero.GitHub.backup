<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-02T21:29:52.175Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>119. Pascal&#39;s Triangle II(easy)</title>
    <link href="http://example.com/2022/10/02/119/"/>
    <id>http://example.com/2022/10/02/119/</id>
    <published>2022-10-02T21:28:41.000Z</published>
    <updated>2022-10-02T21:29:52.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="119-Pascal’s-Triangle-II-easy"><a href="#119-Pascal’s-Triangle-II-easy" class="headerlink" title="119. Pascal’s Triangle II(easy)"></a>119. Pascal’s Triangle II(easy)</h1><h2 id="Given-an-integer-rowIndex-return-the-rowIndexth-0-indexed-row-of-the-Pascal’s-triangle"><a href="#Given-an-integer-rowIndex-return-the-rowIndexth-0-indexed-row-of-the-Pascal’s-triangle" class="headerlink" title="Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal’s triangle."></a>Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal’s triangle.</h2><h2 id="In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown"><a href="#In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown" class="headerlink" title="In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:"></a>In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:</h2><p>跟118几乎一模一样，只不过这道题是输出特定的某一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRow</span>(<span class="params">self, rowIndex: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> rowIndex==<span class="number">0</span>:<span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">        res=[[<span class="number">1</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res)&lt;rowIndex+<span class="number">1</span>:</span><br><span class="line">            newRow=[a+b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">0</span>]+res[-<span class="number">1</span>],res[-<span class="number">1</span>]+[<span class="number">0</span>])]</span><br><span class="line">            res.append(newRow)</span><br><span class="line">        <span class="keyword">return</span> newRow</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;119-Pascal’s-Triangle-II-easy&quot;&gt;&lt;a href=&quot;#119-Pascal’s-Triangle-II-easy&quot; class=&quot;headerlink&quot; title=&quot;119. Pascal’s Triangle II(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>139</title>
    <link href="http://example.com/2022/10/02/139/"/>
    <id>http://example.com/2022/10/02/139/</id>
    <published>2022-10-02T21:28:29.000Z</published>
    <updated>2022-10-02T21:28:29.614Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>118. Pascal&#39;s Triangle</title>
    <link href="http://example.com/2022/10/02/118/"/>
    <id>http://example.com/2022/10/02/118/</id>
    <published>2022-10-02T21:19:31.000Z</published>
    <updated>2022-10-02T21:31:39.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a>118. Pascal’s Triangle</h1><h2 id="Given-an-integer-numRows-return-the-first-numRows-of-Pascal’s-triangle"><a href="#Given-an-integer-numRows-return-the-first-numRows-of-Pascal’s-triangle" class="headerlink" title="Given an integer numRows, return the first numRows of Pascal’s triangle."></a>Given an integer numRows, return the first numRows of Pascal’s triangle.</h2><h2 id="In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown"><a href="#In-Pascal’s-triangle-each-number-is-the-sum-of-the-two-numbers-directly-above-it-as-shown" class="headerlink" title="In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:"></a>In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:</h2><p>杨辉三角,算是数学题<br>观察一下规律，发现当前一行只比上一行多了一个元素，最最关键的一点：本行元素等于上一行元素往后错一位再逐个相加：</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="https://leetcode.cn/problems/pascals-triangle/solution/qu-qiao-jie-fa-cuo-yi-wei-zai-zhu-ge-xiang-jia-28m/">题解</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, numRows: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">0</span>: <span class="keyword">return</span> []</span><br><span class="line">        res = [[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(res) &lt; numRows:</span><br><span class="line">            newRow = [a+b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">0</span>]+res[-<span class="number">1</span>], res[-<span class="number">1</span>]+[<span class="number">0</span>])]</span><br><span class="line">            res.append(newRow)      </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;118-Pascal’s-Triangle&quot;&gt;&lt;a href=&quot;#118-Pascal’s-Triangle&quot; class=&quot;headerlink&quot; title=&quot;118. Pascal’s Triangle&quot;&gt;&lt;/a&gt;118. Pascal’s Triangle</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>125. Valid Palindrome</title>
    <link href="http://example.com/2022/10/02/125/"/>
    <id>http://example.com/2022/10/02/125/</id>
    <published>2022-10-02T21:07:57.000Z</published>
    <updated>2022-10-02T21:20:28.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a>125. Valid Palindrome</h1><h2 id="A-phrase-is-a-palindrome-if-after-converting-all-uppercase-letters-into-lowercase-letters-and-removing-all-non-alphanumeric-characters-it-reads-the-same-forward-and-backward-Alphanumeric-characters-include-letters-and-numbers"><a href="#A-phrase-is-a-palindrome-if-after-converting-all-uppercase-letters-into-lowercase-letters-and-removing-all-non-alphanumeric-characters-it-reads-the-same-forward-and-backward-Alphanumeric-characters-include-letters-and-numbers" class="headerlink" title="A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers."></a>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</h2><h2 id="Given-a-string-s-return-true-if-it-is-a-palindrome-or-false-otherwise"><a href="#Given-a-string-s-return-true-if-it-is-a-palindrome-or-false-otherwise" class="headerlink" title="Given a string s, return true if it is a palindrome, or false otherwise."></a>Given a string s, return true if it is a palindrome, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span><br></pre></td></tr></table></figure><p>这里有个重要的函数isalnum()，用来判断是不是字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n=<span class="built_in">len</span>(s)</span><br><span class="line">        left,right=<span class="number">0</span>,n-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> <span class="keyword">not</span> s[left].isalnum():</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> <span class="keyword">not</span> s[right].isalnum():</span><br><span class="line">                right-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left&lt;right:</span><br><span class="line">                <span class="keyword">if</span> s[left].lower()!=s[right].lower():</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                left,right=left+<span class="number">1</span>,right-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;125-Valid-Palindrome&quot;&gt;&lt;a href=&quot;#125-Valid-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;125. Valid Palindrome&quot;&gt;&lt;/a&gt;125. Valid Palindrome&lt;/h1</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="two-pointer" scheme="http://example.com/tags/two-pointer/"/>
    
    <category term="Palindrome" scheme="http://example.com/tags/Palindrome/"/>
    
  </entry>
  
  <entry>
    <title>111. Minimum Depth of Binary Tree(easy)</title>
    <link href="http://example.com/2022/10/02/111/"/>
    <id>http://example.com/2022/10/02/111/</id>
    <published>2022-10-02T20:50:09.000Z</published>
    <updated>2022-10-02T21:05:04.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="111-Minimum-Depth-of-Binary-Tree-easy"><a href="#111-Minimum-Depth-of-Binary-Tree-easy" class="headerlink" title="111. Minimum Depth of Binary Tree(easy)"></a>111. Minimum Depth of Binary Tree(easy)</h1><h2 id="Given-a-binary-tree-find-its-minimum-depth"><a href="#Given-a-binary-tree-find-its-minimum-depth" class="headerlink" title="Given a binary tree, find its minimum depth."></a>Given a binary tree, find its minimum depth.</h2><h2 id="The-minimum-depth-is-the-number-of-nodes-along-the-shortest-path-from-the-root-node-down-to-the-nearest-leaf-node"><a href="#The-minimum-depth-is-the-number-of-nodes-along-the-shortest-path-from-the-root-node-down-to-the-nearest-leaf-node" class="headerlink" title="The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."></a>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</h2><h2 id="Note-A-leaf-is-a-node-with-no-children"><a href="#Note-A-leaf-is-a-node-with-no-children" class="headerlink" title="Note: A leaf is a node with no children."></a>Note: A leaf is a node with no children.</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/solution/li-jie-zhe-dao-ti-de-jie-shu-tiao-jian-by-user7208/">题解</a></p><p>根据大佬的Java代码写的python</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//这道题递归条件里分为三种情况</span></span><br><span class="line">        <span class="comment">//1.左孩子和右孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.如果左孩子和右孩子其中一个为空，那么需要返回比较大的那个孩子的深度        </span></span><br><span class="line">        <span class="keyword">int</span> m1 = minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> m2 = minDepth(root.right);</span><br><span class="line">        <span class="comment">//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> || root.right == <span class="keyword">null</span>) <span class="keyword">return</span> m1 + m2 + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(m1,m2) + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">#这道题递归条件里分为三种情况</span></span><br><span class="line">        <span class="comment">#1.左孩子和右孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">        <span class="keyword">if</span> root.left==<span class="literal">None</span> <span class="keyword">and</span> root.right==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#2.如果左孩子和右孩子其中一个为空，那么需要返回比较大的那个孩子的深度 </span></span><br><span class="line">        m1=self.minDepth(root.left)</span><br><span class="line">        m2=self.minDepth(root.right)</span><br><span class="line">        <span class="comment">#这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">        <span class="keyword">if</span> root.left==<span class="literal">None</span> <span class="keyword">or</span> root.right==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> m1+m2+<span class="number">1</span></span><br><span class="line">        <span class="comment">#3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(m1,m2)+<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;111-Minimum-Depth-of-Binary-Tree-easy&quot;&gt;&lt;a href=&quot;#111-Minimum-Depth-of-Binary-Tree-easy&quot; class=&quot;headerlink&quot; title=&quot;111. Minimum Depth</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>108. Convert Sorted Array to Binary Search Tree(easy)</title>
    <link href="http://example.com/2022/10/02/108/"/>
    <id>http://example.com/2022/10/02/108/</id>
    <published>2022-10-02T20:27:43.000Z</published>
    <updated>2022-10-02T20:41:58.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="108-Convert-Sorted-Array-to-Binary-Search-Tree-easy"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree-easy" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree(easy)"></a>108. Convert Sorted Array to Binary Search Tree(easy)</h1><h2 id="Given-an-integer-array-nums-where-the-elements-are-sorted-in-ascending-order-convert-it-to-a-height-balanced-binary-search-tree"><a href="#Given-an-integer-array-nums-where-the-elements-are-sorted-in-ascending-order-convert-it-to-a-height-balanced-binary-search-tree" class="headerlink" title="Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree."></a>Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</h2><h2 id="A-height-balanced-binary-tree-is-a-binary-tree-in-which-the-depth-of-the-two-subtrees-of-every-node-never-differs-by-more-than-one"><a href="#A-height-balanced-binary-tree-is-a-binary-tree-in-which-the-depth-of-the-two-subtrees-of-every-node-never-differs-by-more-than-one" class="headerlink" title="A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."></a>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</h2><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/solution/jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-s-33/">中序遍历</a></p><p>中序遍历，总是选择中间位置左边的数字作为根节点<br>选择中间位置左边的数字作为根节点，则根节点的下标为 \textit{mid}=(\textit{left}+\textit{right})/2mid=(left+right)/2，此处的除法为整数除法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">left, right</span>):</span></span><br><span class="line">            <span class="keyword">if</span> left &gt; right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 总是选择中间位置左边的数字作为根节点</span></span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            root = TreeNode(nums[mid])</span><br><span class="line">            root.left = helper(left, mid - <span class="number">1</span>)</span><br><span class="line">            root.right = helper(mid + <span class="number">1</span>, right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;108-Convert-Sorted-Array-to-Binary-Search-Tree-easy&quot;&gt;&lt;a href=&quot;#108-Convert-Sorted-Array-to-Binary-Search-Tree-easy&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>100. Same Tree(easy)</title>
    <link href="http://example.com/2022/10/02/100/"/>
    <id>http://example.com/2022/10/02/100/</id>
    <published>2022-10-02T20:19:30.000Z</published>
    <updated>2022-10-02T20:23:48.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="100-Same-Tree-easy"><a href="#100-Same-Tree-easy" class="headerlink" title="100. Same Tree(easy)"></a>100. Same Tree(easy)</h1><h2 id="Given-the-roots-of-two-binary-trees-p-and-q-write-a-function-to-check-if-they-are-the-same-or-not"><a href="#Given-the-roots-of-two-binary-trees-p-and-q-write-a-function-to-check-if-they-are-the-same-or-not" class="headerlink" title="Given the roots of two binary trees p and q, write a function to check if they are the same or not."></a>Given the roots of two binary trees p and q, write a function to check if they are the same or not.</h2><h2 id="Two-binary-trees-are-considered-the-same-if-they-are-structurally-identical-and-the-nodes-have-the-same-value"><a href="#Two-binary-trees-are-considered-the-same-if-they-are-structurally-identical-and-the-nodes-have-the-same-value" class="headerlink" title="Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."></a>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: p = [1,2,3], q = [1,2,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Recursion递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span>(<span class="params">self, p: <span class="type">Optional</span>[TreeNode], q: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q <span class="keyword">or</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val!=q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.right,q.right) <span class="keyword">and</span> self.isSameTree(p.left,q.left)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;100-Same-Tree-easy&quot;&gt;&lt;a href=&quot;#100-Same-Tree-easy&quot; class=&quot;headerlink&quot; title=&quot;100. Same Tree(easy)&quot;&gt;&lt;/a&gt;100. Same Tree(easy)&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>94. Binary Tree Inorder Traversal(easy)</title>
    <link href="http://example.com/2022/10/02/94/"/>
    <id>http://example.com/2022/10/02/94/</id>
    <published>2022-10-02T20:04:34.000Z</published>
    <updated>2022-10-02T20:21:26.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="94-Binary-Tree-Inorder-Traversal-easy"><a href="#94-Binary-Tree-Inorder-Traversal-easy" class="headerlink" title="94. Binary Tree Inorder Traversal(easy)"></a>94. Binary Tree Inorder Traversal(easy)</h1><h2 id="Given-the-root-of-a-binary-tree-return-the-inorder-traversal-of-its-nodes’-values"><a href="#Given-the-root-of-a-binary-tree-return-the-inorder-traversal-of-its-nodes’-values" class="headerlink" title="Given the root of a binary tree, return the inorder traversal of its nodes’ values."></a>Given the root of a binary tree, return the inorder traversal of its nodes’ values.</h2><p>二叉树的中序遍历</p><p>递归遍历</p><p>前序遍历：打印 - 左 - 右<br>中序遍历：左 - 打印 - 右<br>后序遍历：左 - 右 - 打印<br>题目要求的是中序遍历，那就按照 左-打印-右这种顺序遍历树就可以了，递归函数实现</p><p>终止条件：当前节点为空时<br>函数内：递归的调用左节点，打印当前节点，再递归调用右节点<br>时间复杂度：O(n)<br>空间复杂度：O(h)，h 是树的高度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res=[]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;94-Binary-Tree-Inorder-Traversal-easy&quot;&gt;&lt;a href=&quot;#94-Binary-Tree-Inorder-Traversal-easy&quot; class=&quot;headerlink&quot; title=&quot;94. Binary Tree In</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
    <category term="Recursion" scheme="http://example.com/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>70. Climbing Stairs(easy)</title>
    <link href="http://example.com/2022/10/02/70/"/>
    <id>http://example.com/2022/10/02/70/</id>
    <published>2022-10-02T19:51:38.000Z</published>
    <updated>2022-10-02T20:06:10.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="70-Climbing-Stairs-easy"><a href="#70-Climbing-Stairs-easy" class="headerlink" title="70. Climbing Stairs(easy)"></a>70. Climbing Stairs(easy)</h1><h2 id="You-are-climbing-a-staircase-It-takes-n-steps-to-reach-the-top"><a href="#You-are-climbing-a-staircase-It-takes-n-steps-to-reach-the-top" class="headerlink" title="You are climbing a staircase. It takes n steps to reach the top."></a>You are climbing a staircase. It takes n steps to reach the top.</h2><h2 id="Each-time-you-can-either-climb-1-or-2-steps-In-how-many-distinct-ways-can-you-climb-to-the-top"><a href="#Each-time-you-can-either-climb-1-or-2-steps-In-how-many-distinct-ways-can-you-climb-to-the-top" class="headerlink" title="Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"></a>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><p>一道经典DP题</p><p>状态转移方程：dp[i]=dp[i−1]+dp[i−2]<br>f(1) = 1  f(2) = 2  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def climbStairs(self, n: int) -&gt; int:</span><br><span class="line">        if n&lt;=2:</span><br><span class="line">            return n</span><br><span class="line">        before_last=1</span><br><span class="line">        last=2</span><br><span class="line">        for i in range(2,n):</span><br><span class="line">            current=before_last+last</span><br><span class="line">            before_last=last</span><br><span class="line">            last = current</span><br><span class="line">        return last</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;70-Climbing-Stairs-easy&quot;&gt;&lt;a href=&quot;#70-Climbing-Stairs-easy&quot; class=&quot;headerlink&quot; title=&quot;70. Climbing Stairs(easy)&quot;&gt;&lt;/a&gt;70. Climbing St</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>67. Add Binary(easy)</title>
    <link href="http://example.com/2022/10/02/67/"/>
    <id>http://example.com/2022/10/02/67/</id>
    <published>2022-10-02T19:39:22.000Z</published>
    <updated>2022-10-02T20:06:21.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="67-Add-Binary-easy"><a href="#67-Add-Binary-easy" class="headerlink" title="67. Add Binary(easy)"></a>67. Add Binary(easy)</h1><h2 id="Given-two-binary-strings-a-and-b-return-their-sum-as-a-binary-string"><a href="#Given-two-binary-strings-a-and-b-return-their-sum-as-a-binary-string" class="headerlink" title="Given two binary strings a and b, return their sum as a binary string."></a>Given two binary strings a and b, return their sum as a binary string.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><p>实现二进制加法<br><a href="https://leetcode.com/problems/add-binary/solutions/414426/add-binary/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span>(<span class="params">self, a, b</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        n = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b))</span><br><span class="line">        a, b = a.zfill(n), b.zfill(n)</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> carry % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                answer.append(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                answer.append(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            carry //= <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            answer.append(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        answer.reverse()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(answer)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;67-Add-Binary-easy&quot;&gt;&lt;a href=&quot;#67-Add-Binary-easy&quot; class=&quot;headerlink&quot; title=&quot;67. Add Binary(easy)&quot;&gt;&lt;/a&gt;67. Add Binary(easy)&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>66. Plus One(easy)</title>
    <link href="http://example.com/2022/10/02/66/"/>
    <id>http://example.com/2022/10/02/66/</id>
    <published>2022-10-02T19:35:59.000Z</published>
    <updated>2022-10-02T20:06:40.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="66-Plus-One-easy"><a href="#66-Plus-One-easy" class="headerlink" title="66. Plus One(easy)"></a>66. Plus One(easy)</h1><h2 id="You-are-given-a-large-integer-represented-as-an-integer-array-digits-where-each-digits-i-is-the-ith-digit-of-the-integer-The-digits-are-ordered-from-most-significant-to-least-significant-in-left-to-right-order-The-large-integer-does-not-contain-any-leading-0’s"><a href="#You-are-given-a-large-integer-represented-as-an-integer-array-digits-where-each-digits-i-is-the-ith-digit-of-the-integer-The-digits-are-ordered-from-most-significant-to-least-significant-in-left-to-right-order-The-large-integer-does-not-contain-any-leading-0’s" class="headerlink" title="You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s."></a>You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s.</h2><h2 id="Increment-the-large-integer-by-one-and-return-the-resulting-array-of-digits"><a href="#Increment-the-large-integer-by-one-and-return-the-resulting-array-of-digits" class="headerlink" title="Increment the large integer by one and return the resulting array of digits."></a>Increment the large integer by one and return the resulting array of digits.</h2><p>这道题可以用数学方法分类去算，但也可以先把digits转换为一整个数字，加1后，再转换回数组</p><pre><code class="python">class Solution:    def plusOne(self, digits: List[int]) -&gt; List[int]:                res=&quot;&quot;.join(str(digit) for digit in digits)        res= int(res)+1        return str(res)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;66-Plus-One-easy&quot;&gt;&lt;a href=&quot;#66-Plus-One-easy&quot; class=&quot;headerlink&quot; title=&quot;66. Plus One(easy)&quot;&gt;&lt;/a&gt;66. Plus One(easy)&lt;/h1&gt;&lt;h2 id=&quot;You-a</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>58. Length of Last Word(easy)</title>
    <link href="http://example.com/2022/10/02/58/"/>
    <id>http://example.com/2022/10/02/58/</id>
    <published>2022-10-02T19:18:19.000Z</published>
    <updated>2022-10-02T20:06:54.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="58-Length-of-Last-Word-easy"><a href="#58-Length-of-Last-Word-easy" class="headerlink" title="58. Length of Last Word(easy)"></a>58. Length of Last Word(easy)</h1><h2 id="Given-a-string-s-consisting-of-words-and-spaces-return-the-length-of-the-last-word-in-the-string"><a href="#Given-a-string-s-consisting-of-words-and-spaces-return-the-length-of-the-last-word-in-the-string" class="headerlink" title="Given a string s consisting of words and spaces, return the length of the last word in the string."></a>Given a string s consisting of words and spaces, return the length of the last word in the string.</h2><h2 id="A-word-is-a-maximal-substring-consisting-of-non-space-characters-only"><a href="#A-word-is-a-maximal-substring-consisting-of-non-space-characters-only" class="headerlink" title="A word is a maximal substring consisting of non-space characters only."></a>A word is a maximal substring consisting of non-space characters only.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l=s.split()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(l[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;58-Length-of-Last-Word-easy&quot;&gt;&lt;a href=&quot;#58-Length-of-Last-Word-easy&quot; class=&quot;headerlink&quot; title=&quot;58. Length of Last Word(easy)&quot;&gt;&lt;/a&gt;58.</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>35. Search Insert Position(easy)</title>
    <link href="http://example.com/2022/10/02/35/"/>
    <id>http://example.com/2022/10/02/35/</id>
    <published>2022-10-02T19:06:08.000Z</published>
    <updated>2022-10-02T20:07:19.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-it-would-be-if-it-were-inserted-in-order"><a href="#Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-it-would-be-if-it-were-inserted-in-order" class="headerlink" title="Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."></a>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</h2><h2 id="You-must-write-an-algorithm-with-O-log-n-runtime-complexity"><a href="#You-must-write-an-algorithm-with-O-log-n-runtime-complexity" class="headerlink" title="You must write an algorithm with O(log n) runtime complexity."></a>You must write an algorithm with O(log n) runtime complexity.</h2><p>基础做法，遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> target&gt;nums[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> target&gt;nums[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i]&gt;=target:</span><br><span class="line">                res=i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        length=<span class="built_in">len</span>(nums)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = length</span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            mid = <span class="built_in">int</span>(left + (right - left) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid]&lt;target:</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right= mid</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-a-sorted-array-of-distinct-integers-and-a-target-value-return-the-index-if-the-target-is-found-If-not-return-the-index-where-i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>14. Longest Common Prefix(easy)</title>
    <link href="http://example.com/2022/10/02/14/"/>
    <id>http://example.com/2022/10/02/14/</id>
    <published>2022-10-02T18:51:47.000Z</published>
    <updated>2022-10-02T20:07:08.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-Longest-Common-Prefix-easy"><a href="#14-Longest-Common-Prefix-easy" class="headerlink" title="14. Longest Common Prefix(easy)"></a>14. Longest Common Prefix(easy)</h1><h2 id="Write-a-function-to-find-the-longest-common-prefix-string-amongst-an-array-of-strings"><a href="#Write-a-function-to-find-the-longest-common-prefix-string-amongst-an-array-of-strings" class="headerlink" title="Write a function to find the longest common prefix string amongst an array of strings."></a>Write a function to find the longest common prefix string amongst an array of strings.</h2><h2 id="If-there-is-no-common-prefix-return-an-empty-string-“”"><a href="#If-there-is-no-common-prefix-return-an-empty-string-“”" class="headerlink" title="If there is no common prefix, return an empty string “”."></a>If there is no common prefix, return an empty string “”.</h2><p><a href="https://leetcode.cn/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/">官方题解</a></p><p>纵向扫描<br>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。另一种方法是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        length, count = <span class="built_in">len</span>(strs[<span class="number">0</span>]), <span class="built_in">len</span>(strs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            c = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(i == <span class="built_in">len</span>(strs[j]) <span class="keyword">or</span> strs[j][i] != c <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, count)):</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;14-Longest-Common-Prefix-easy&quot;&gt;&lt;a href=&quot;#14-Longest-Common-Prefix-easy&quot; class=&quot;headerlink&quot; title=&quot;14. Longest Common Prefix(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="LCP" scheme="http://example.com/tags/LCP/"/>
    
  </entry>
  
  <entry>
    <title>1480. Running Sum of 1d Array(easy)</title>
    <link href="http://example.com/2022/10/02/1480/"/>
    <id>http://example.com/2022/10/02/1480/</id>
    <published>2022-10-02T18:25:28.000Z</published>
    <updated>2022-10-02T20:07:41.323Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).</p><p>Return the running sum of nums.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line">Output: [1,3,6,10]</span><br><span class="line">Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].</span><br></pre></td></tr></table></figure><p>其实这题就是前缀和数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def runningSum(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line">        res=[0]*len(nums)</span><br><span class="line">        res[0]=nums[0]</span><br><span class="line">        for i in range(1,len(nums)):</span><br><span class="line">            res[i]=nums[i]+res[i-1]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).&lt;/p&gt;
&lt;p&gt;Return the running sum of nums.&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>231. Power of Two(easy)</title>
    <link href="http://example.com/2022/10/01/231/"/>
    <id>http://example.com/2022/10/01/231/</id>
    <published>2022-10-02T03:45:11.000Z</published>
    <updated>2022-10-02T20:07:56.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="231-Power-of-Two-easy"><a href="#231-Power-of-Two-easy" class="headerlink" title="231. Power of Two(easy)"></a>231. Power of Two(easy)</h1><h2 id="Given-an-integer-n-return-true-if-it-is-a-power-of-two-Otherwise-return-false"><a href="#Given-an-integer-n-return-true-if-it-is-a-power-of-two-Otherwise-return-false" class="headerlink" title="Given an integer n, return true if it is a power of two. Otherwise, return false."></a>Given an integer n, return true if it is a power of two. Otherwise, return false.</h2><h2 id="An-integer-n-is-a-power-of-two-if-there-exists-an-integer-x-such-that-n-2-x"><a href="#An-integer-n-is-a-power-of-two-if-there-exists-an-integer-x-such-that-n-2-x" class="headerlink" title="An integer n is a power of two, if there exists an integer x such that n == 2^x."></a>An integer n is a power of two, if there exists an integer x such that n == 2^x.</h2><p>How to get / isolate the rightmost 1-bit : x &amp; (-x).</p><p>How to turn off (= set to 0) the rightmost 1-bit : x &amp; (x - 1).<br><a href="https://leetcode.com/problems/power-of-two/solutions/360718/power-of-two/">官方题解</a></p><p>Approach 1: Bitwise Operators : Get the Rightmost 1-bit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;231-Power-of-Two-easy&quot;&gt;&lt;a href=&quot;#231-Power-of-Two-easy&quot; class=&quot;headerlink&quot; title=&quot;231. Power of Two(easy)&quot;&gt;&lt;/a&gt;231. Power of Two(eas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>260. Single Number III(medium)</title>
    <link href="http://example.com/2022/10/01/260/"/>
    <id>http://example.com/2022/10/01/260/</id>
    <published>2022-10-02T03:33:57.000Z</published>
    <updated>2022-10-02T03:44:31.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="260-Single-Number-III-medium"><a href="#260-Single-Number-III-medium" class="headerlink" title="260. Single Number III(medium)"></a>260. Single Number III(medium)</h1><h2 id="Given-an-integer-array-nums-in-which-exactly-two-elements-appear-only-once-and-all-the-other-elements-appear-exactly-twice-Find-the-two-elements-that-appear-only-once-You-can-return-the-answer-in-any-order"><a href="#Given-an-integer-array-nums-in-which-exactly-two-elements-appear-only-once-and-all-the-other-elements-appear-exactly-twice-Find-the-two-elements-that-appear-only-once-You-can-return-the-answer-in-any-order" class="headerlink" title="Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order."></a>Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.</h2><h2 id="You-must-write-an-algorithm-that-runs-in-linear-runtime-complexity-and-uses-only-constant-extra-space"><a href="#You-must-write-an-algorithm-that-runs-in-linear-runtime-complexity-and-uses-only-constant-extra-space" class="headerlink" title="You must write an algorithm that runs in linear runtime complexity and uses only constant extra space."></a>You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,1,3,2,5]</span><br><span class="line">Output: [3,5]</span><br><span class="line">Explanation:  [5, 3] is also a valid answer.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/single-number-iii/solutions/366935/single-number-iii/">官方题解</a></p><p>Two bitmasks</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;260-Single-Number-III-medium&quot;&gt;&lt;a href=&quot;#260-Single-Number-III-medium&quot; class=&quot;headerlink&quot; title=&quot;260. Single Number III(medium)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>91. Decode Ways(medium)</title>
    <link href="http://example.com/2022/10/01/91/"/>
    <id>http://example.com/2022/10/01/91/</id>
    <published>2022-10-02T03:25:21.000Z</published>
    <updated>2022-10-02T20:08:48.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="91-Decode-Ways-medium"><a href="#91-Decode-Ways-medium" class="headerlink" title="91. Decode Ways(medium)"></a>91. Decode Ways(medium)</h1><h2 id="A-message-containing-letters-from-A-Z-can-be-encoded-into-numbers-using-the-following-mapping"><a href="#A-message-containing-letters-from-A-Z-can-be-encoded-into-numbers-using-the-following-mapping" class="headerlink" title="A message containing letters from A-Z can be encoded into numbers using the following mapping:"></a>A message containing letters from A-Z can be encoded into numbers using the following mapping:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;A&#x27; -&gt; &quot;1&quot;</span><br><span class="line">&#x27;B&#x27; -&gt; &quot;2&quot;</span><br><span class="line">...</span><br><span class="line">&#x27;Z&#x27; -&gt; &quot;26&quot;</span><br></pre></td></tr></table></figure><p>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, “11106” can be mapped into:</p><p>“AAJF” with the grouping (1 1 10 6)<br>“KJF” with the grouping (11 10 6)<br>Note that the grouping (1 11 06) is invalid because “06” cannot be mapped into ‘F’ since “6” is different from “06”.</p><p>Given a string s containing only digits, return the number of ways to decode it.</p><p>The test cases are generated so that the answer fits in a 32-bit integer.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;12&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;226&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6). </span><br></pre></td></tr></table></figure><h3 id="Leetcode-Solution"><a href="#Leetcode-Solution" class="headerlink" title="Leetcode Solution"></a><a href="https://leetcode.com/problems/decode-ways/solutions/525903/decode-ways/">Leetcode Solution</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        two_back = <span class="number">1</span></span><br><span class="line">        one_back = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            current = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> s[i] != <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                current = one_back</span><br><span class="line">            two_digit = <span class="built_in">int</span>(s[i - <span class="number">1</span>: i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> two_digit &gt;= <span class="number">10</span> <span class="keyword">and</span> two_digit &lt;= <span class="number">26</span>:</span><br><span class="line">                current += two_back</span><br><span class="line">            two_back = one_back</span><br><span class="line">            one_back = current</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> one_back</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;91-Decode-Ways-medium&quot;&gt;&lt;a href=&quot;#91-Decode-Ways-medium&quot; class=&quot;headerlink&quot; title=&quot;91. Decode Ways(medium)&quot;&gt;&lt;/a&gt;91. Decode Ways(mediu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>137. Single Number II(medium)</title>
    <link href="http://example.com/2022/10/01/137/"/>
    <id>http://example.com/2022/10/01/137/</id>
    <published>2022-10-01T20:51:38.000Z</published>
    <updated>2022-10-02T20:09:22.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="137-Single-Number-medium"><a href="#137-Single-Number-medium" class="headerlink" title="137. Single Number(medium)"></a>137. Single Number(medium)</h1><h2 id="Given-an-integer-array-nums-where-every-element-appears-three-times-except-for-one-which-appears-exactly-once-Find-the-single-element-and-return-it"><a href="#Given-an-integer-array-nums-where-every-element-appears-three-times-except-for-one-which-appears-exactly-once-Find-the-single-element-and-return-it" class="headerlink" title="Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it."></a>Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.</h2><h2 id="You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space"><a href="#You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space" class="headerlink" title="You must implement a solution with a linear runtime complexity and use only constant extra space."></a>You must implement a solution with a linear runtime complexity and use only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,2,3,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/single-number-ii/solutions/356460/single-number-ii/">官方题解</a></p><p>这里用到了异或<br>XOR</p><p>Let’s start from XOR operator which could be used to detect the bit which appears odd number of times: 1, 3, 5, etc.</p><p>XOR of zero and a bit results in that bit</p><p>0⊕x=x</p><p>XOR of two equal bits (even if they are zeros) results in a zero</p><p>x⊕x=0</p><p>and so on and so forth, i.e. one could see the bit in a bitmask only if it appears odd number of times.<br>That’s already great, so one could detect the bit which appears once, and the bit which appears three times. The problem is to distinguish between these two situations.</p><p>AND and NOT</p><p>To separate number that appears once from a number that appears three times let’s use two bitmasks instead of one: seen_once and seen_twice.</p><p>The idea is to</p><p>change seen_once only if seen_twice is unchanged</p><p>change seen_twice only if seen_once is unchanged</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        seen_once = seen_twice = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="comment"># first appearance: </span></span><br><span class="line">            <span class="comment"># add num to seen_once </span></span><br><span class="line">            <span class="comment"># don&#x27;t add to seen_twice because of presence in seen_once</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># second appearance: </span></span><br><span class="line">            <span class="comment"># remove num from seen_once </span></span><br><span class="line">            <span class="comment"># add num to seen_twice</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># third appearance: </span></span><br><span class="line">            <span class="comment"># don&#x27;t add to seen_once because of presence in seen_twice</span></span><br><span class="line">            <span class="comment"># remove num from seen_twice</span></span><br><span class="line">            seen_once = ~seen_twice &amp; (seen_once ^ num)</span><br><span class="line">            seen_twice = ~seen_once &amp; (seen_twice ^ num)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> seen_once</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;137-Single-Number-medium&quot;&gt;&lt;a href=&quot;#137-Single-Number-medium&quot; class=&quot;headerlink&quot; title=&quot;137. Single Number(medium)&quot;&gt;&lt;/a&gt;137. Single </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>136. Single Number(easy)</title>
    <link href="http://example.com/2022/09/30/136/"/>
    <id>http://example.com/2022/09/30/136/</id>
    <published>2022-09-30T15:28:13.000Z</published>
    <updated>2022-10-02T20:09:30.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="136-Single-Number-easy"><a href="#136-Single-Number-easy" class="headerlink" title="136. Single Number(easy)"></a>136. Single Number(easy)</h1><h2 id="Given-a-non-empty-array-of-integers-nums-every-element-appears-twice-except-for-one-Find-that-single-one"><a href="#Given-a-non-empty-array-of-integers-nums-every-element-appears-twice-except-for-one-Find-that-single-one" class="headerlink" title="Given a non-empty array of integers nums, every element appears twice except for one. Find that single one."></a>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.</h2><h2 id="You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space"><a href="#You-must-implement-a-solution-with-a-linear-runtime-complexity-and-use-only-constant-extra-space" class="headerlink" title="You must implement a solution with a linear runtime complexity and use only constant extra space."></a>You must implement a solution with a linear runtime complexity and use only constant extra space.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p>这道题的关键在于异或运算，异或也叫半加运算，其运算法则相当于不带进位的二进制加法：二进制下用1表示真，0表示假，则异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0</p><p>假设数组中有 2m+1 个数，其中有 m 个数各出现两次，一个数出现一次。<br>a1⊕a1⊕a2⊕a2⊕a3⊕a3⊕a4⊕a4⊕a5⊕a5⋯⋯⋯⊕am⊕am⊕am+1<br>=0⊕0⊕0⊕0⊕0⊕0⊕0⊕0⊕am+1=am+1<br>​</p><p>因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x ^ y, nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python-reduce"><a href="#python-reduce" class="headerlink" title="python reduce"></a><a href="https://thepythonguru.com/python-builtin-functions/reduce/">python reduce</a></h3><p>The reduce() function accepts a function and a sequence and returns a single value calculated as follows:</p><p>Initially, the function is called with the first two items from the sequence and the result is returned.<br>The function is then called again with the result obtained in step 1 and the next value in the sequence. This process keeps repeating until there are items in the sequence.<br>The syntax of the reduce() function is as follows:</p><p>Syntax: reduce(function, sequence[, initial]) -&gt; value</p><p>When the initial value is provided, the function is called with the initial value and the first item from the sequence.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;136-Single-Number-easy&quot;&gt;&lt;a href=&quot;#136-Single-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;136. Single Number(easy)&quot;&gt;&lt;/a&gt;136. Single Number</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
</feed>
