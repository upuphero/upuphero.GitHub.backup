<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-21T03:19:13.934Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>206. Reverse Linked List(easy)</title>
    <link href="http://example.com/2022/07/20/206/"/>
    <id>http://example.com/2022/07/20/206/</id>
    <published>2022-07-20T22:21:02.000Z</published>
    <updated>2022-07-21T03:19:13.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="206-Reverse-Linked-List-easy"><a href="#206-Reverse-Linked-List-easy" class="headerlink" title="206. Reverse Linked List(easy)"></a>206. Reverse Linked List(easy)</h1><h2 id="Given-the-head-of-a-singly-linked-list-reverse-the-list-and-return-the-reversed-list"><a href="#Given-the-head-of-a-singly-linked-list-reverse-the-list-and-return-the-reversed-list" class="headerlink" title="Given the head of a singly linked list, reverse the list, and return the reversed list."></a>Given the head of a singly linked list, reverse the list, and return the reversed list.</h2><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"></p><p>反转数组，还是用双指针，另外设置了一个临时变量tmp记录current的下一个值<br>图例可以看这个<a href="https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">回答</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        current = head</span><br><span class="line">        <span class="keyword">while</span> current !=<span class="literal">None</span>:</span><br><span class="line">            tmp = current.<span class="built_in">next</span></span><br><span class="line">            current.<span class="built_in">next</span> = pre</span><br><span class="line">            pre = current</span><br><span class="line">            current = tmp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;206-Reverse-Linked-List-easy&quot;&gt;&lt;a href=&quot;#206-Reverse-Linked-List-easy&quot; class=&quot;headerlink&quot; title=&quot;206. Reverse Linked List(easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>160. Intersection of Two Linked Lists (Easy)</title>
    <link href="http://example.com/2022/07/20/160/"/>
    <id>http://example.com/2022/07/20/160/</id>
    <published>2022-07-20T21:41:56.000Z</published>
    <updated>2022-07-20T22:39:38.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="160-Intersection-of-Two-Linked-Lists-Easy"><a href="#160-Intersection-of-Two-Linked-Lists-Easy" class="headerlink" title="160. Intersection of Two Linked Lists (Easy)"></a>160. Intersection of Two Linked Lists (Easy)</h1><h2 id="Given-the-heads-of-two-singly-linked-lists-headA-and-headB-return-the-node-at-which-the-two-lists-intersect-If-the-two-linked-lists-have-no-intersection-at-all-return-null"><a href="#Given-the-heads-of-two-singly-linked-lists-headA-and-headB-return-the-node-at-which-the-two-lists-intersect-If-the-two-linked-lists-have-no-intersection-at-all-return-null" class="headerlink" title="Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null."></a>Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.</h2><h2 id="For-example-the-following-two-linked-lists-begin-to-intersect-at-node-c1"><a href="#For-example-the-following-two-linked-lists-begin-to-intersect-at-node-c1" class="headerlink" title="For example, the following two linked lists begin to intersect at node c1:"></a>For example, the following two linked lists begin to intersect at node c1:</h2><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"></p><h2 id="The-test-cases-are-generated-such-that-there-are-no-cycles-anywhere-in-the-entire-linked-structure"><a href="#The-test-cases-are-generated-such-that-there-are-no-cycles-anywhere-in-the-entire-linked-structure" class="headerlink" title="The test cases are generated such that there are no cycles anywhere in the entire linked structure."></a>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</h2><h2 id="Note-that-the-linked-lists-must-retain-their-original-structure-after-the-function-returns"><a href="#Note-that-the-linked-lists-must-retain-their-original-structure-after-the-function-returns" class="headerlink" title="Note that the linked lists must retain their original structure after the function returns."></a>Note that the linked lists must retain their original structure after the function returns.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-inputs-to-the-judge-are-given-as-follows-your-program-is-not-given-these-inputs"><a href="#The-inputs-to-the-judge-are-given-as-follows-your-program-is-not-given-these-inputs" class="headerlink" title="The inputs to the judge are given as follows (your program is not given these inputs):"></a>The inputs to the judge are given as follows (your program is not given these inputs):</h2><h4 id="intersectVal-The-value-of-the-node-where-the-intersection-occurs-This-is-0-if-there-is-no-intersected-node"><a href="#intersectVal-The-value-of-the-node-where-the-intersection-occurs-This-is-0-if-there-is-no-intersected-node" class="headerlink" title="intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node."></a>intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.</h4><h4 id="listA-The-first-linked-list"><a href="#listA-The-first-linked-list" class="headerlink" title="listA - The first linked list."></a>listA - The first linked list.</h4><h4 id="listB-The-second-linked-list"><a href="#listB-The-second-linked-list" class="headerlink" title="listB - The second linked list."></a>listB - The second linked list.</h4><h4 id="skipA-The-number-of-nodes-to-skip-ahead-in-listA-starting-from-the-head-to-get-to-the-intersected-node"><a href="#skipA-The-number-of-nodes-to-skip-ahead-in-listA-starting-from-the-head-to-get-to-the-intersected-node" class="headerlink" title="skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node."></a>skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.</h4><h4 id="skipB-The-number-of-nodes-to-skip-ahead-in-listB-starting-from-the-head-to-get-to-the-intersected-node"><a href="#skipB-The-number-of-nodes-to-skip-ahead-in-listB-starting-from-the-head-to-get-to-the-intersected-node" class="headerlink" title="skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node."></a>skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.</h4><h3 id="The-judge-will-then-create-the-linked-structure-based-on-these-inputs-and-pass-the-two-heads-headA-and-headB-to-your-program-If-you-correctly-return-the-intersected-node-then-your-solution-will-be-accepted"><a href="#The-judge-will-then-create-the-linked-structure-based-on-these-inputs-and-pass-the-two-heads-headA-and-headB-to-your-program-If-you-correctly-return-the-intersected-node-then-your-solution-will-be-accepted" class="headerlink" title="The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted."></a>The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.</h3><h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><p>这道题可以通过双指针的方法解决，一开始想的是通过两个链表的公共部分从后往前，但是该题题解里有个思路很好：<br><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/intersection-of-two-linked-lists-shuang-zhi-zhen-l/">160. 相交链表（双指针，清晰图解）</a></p><p>ListA 头节点 headA 到 公共node 前，共有 a - c 个节点；<br>ListB 头节点 headB 到 公共node 前，共有 b - c 个节点；</p><p>考虑构建两个节点指针 A​ , B 分别指向两链表头节点 headA , headB ，做如下操作：</p><p>指针 A 先遍历完链表 headA ，再开始遍历链表 headB ，当走到 公共node 时，共走步数为：<br>a + (b - c) = a + b - c</p><p>指针 B 先遍历完链表 headB ，再开始遍历链表 headA ，当走到 公共node 时，共走步数为：<br>b + (a - c) = a + b - c</p><p>所以这就有可以操作的地方了</p><p>如下式所示，此时指针 A , B 重合，并有两种情况：</p><p>a + (b - c) = b + (a - c)</p><p>若两链表 有 公共尾部 (即 c &gt; 0 ) ：指针 A , B 同时指向「第一个公共节点」node 。<br>若两链表 无 公共尾部 (即 c = 0 ) ：指针 A , B 同时指向 null 。</p><p>其实就是两边互相换家走一遍，相当于从一开始的头结点开始，指针A,B都走一遍list A和list B</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        A, B = headA, headB</span><br><span class="line">        <span class="keyword">while</span> A != B:</span><br><span class="line">            A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br><span class="line">            B = B.<span class="built_in">next</span> <span class="keyword">if</span> B <span class="keyword">else</span> headA</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = A.<span class="built_in">next</span> <span class="keyword">if</span> A <span class="keyword">else</span> headB</span><br></pre></td></tr></table></figure><p>其实没看懂实现逻辑（基础不牢固），后来搜了一下是python的一个条件表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">It&#x27;s a conditional expression:</span><br><span class="line"></span><br><span class="line">A if PREDICATE else B</span><br><span class="line">A is yielded if PREDICATE is true, otherwise B is yielded.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#x27;A&#x27; if 1 &lt; 2 else &#x27;B&#x27;</span><br><span class="line">&#x27;A&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;A&#x27; if 1 &gt; 2 else &#x27;B&#x27;</span><br><span class="line">&#x27;B&#x27;</span><br></pre></td></tr></table></figure><p>换成完整版就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 1 &lt; 2:</span><br><span class="line">    &#x27;A&#x27;</span><br><span class="line">else: &#x27;B&#x27;</span><br></pre></td></tr></table></figure><p>所以题解里的写法其实可以写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span>(<span class="params">self, headA: ListNode, headB: ListNode</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        a,b= headA,headB</span><br><span class="line">        <span class="keyword">while</span> a!=b:</span><br><span class="line">            <span class="keyword">if</span> a:</span><br><span class="line">                a =a.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>: a= headB</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> b:</span><br><span class="line">                b =b.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>: b = headA</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;160-Intersection-of-Two-Linked-Lists-Easy&quot;&gt;&lt;a href=&quot;#160-Intersection-of-Two-Linked-Lists-Easy&quot; class=&quot;headerlink&quot; title=&quot;160. Inter</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode12-Tree</title>
    <link href="http://example.com/2022/07/20/LeetCode12-Tree/"/>
    <id>http://example.com/2022/07/20/LeetCode12-Tree/</id>
    <published>2022-07-20T21:37:08.000Z</published>
    <updated>2022-07-20T21:38:55.172Z</updated>
    
    <content type="html"><![CDATA[<p>链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。</p><p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-题解-链表&quot;&gt;&lt;a href=&quot;#Leetcode-题解-链表&quot; class=&quot;headerlink&quot; title=&quot;L</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>2. Add Two Numbers(medium)</title>
    <link href="http://example.com/2022/07/15/2/"/>
    <id>http://example.com/2022/07/15/2/</id>
    <published>2022-07-15T20:30:53.000Z</published>
    <updated>2022-07-15T20:32:10.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Add-Two-Numbers-medium"><a href="#2-Add-Two-Numbers-medium" class="headerlink" title="2. Add Two Numbers(medium)"></a>2. Add Two Numbers(medium)</h1><h2 id="You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-digits-are-stored-in-reverse-order-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list"><a href="#You-are-given-two-non-empty-linked-lists-representing-two-non-negative-integers-The-digits-are-stored-in-reverse-order-and-each-of-their-nodes-contains-a-single-digit-Add-the-two-numbers-and-return-the-sum-as-a-linked-list" class="headerlink" title="You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."></a>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</h2><h2 id="You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself"><a href="#You-may-assume-the-two-numbers-do-not-contain-any-leading-zero-except-the-number-0-itself" class="headerlink" title="You may assume the two numbers do not contain any leading zero, except the number 0 itself."></a>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</h2><p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-Add-Two-Numbers-medium&quot;&gt;&lt;a href=&quot;#2-Add-Two-Numbers-medium&quot; class=&quot;headerlink&quot; title=&quot;2. Add Two Numbers(medium)&quot;&gt;&lt;/a&gt;2. Add Two N</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode11-Linked list</title>
    <link href="http://example.com/2022/07/15/LeetCode11-Linked%20list/"/>
    <id>http://example.com/2022/07/15/LeetCode11-Linked%20list/</id>
    <published>2022-07-15T19:54:06.000Z</published>
    <updated>2022-07-15T20:14:59.556Z</updated>
    
    <content type="html"><![CDATA[<p>链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。</p><p>参考：</p><h2 id="Leetcode-题解-链表"><a href="#Leetcode-题解-链表" class="headerlink" title="Leetcode 题解 - 链表"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E9%93%BE%E8%A1%A8.md">Leetcode 题解 - 链表</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/linked-list/">leetcode tag</a></h2><p>如果说数据结构是算法的基础，那么数组和链表就是数据结构的基础。因为像堆，栈，树，图等比较复杂的数组结基本上都可以由数组和链表来表示，所以掌握数组和链表的基本操作十分重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-题解-链表&quot;&gt;&lt;a href=&quot;#Leetcode-题解-链表&quot; class=&quot;headerlink&quot; title=&quot;L</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode10-Backtracking</title>
    <link href="http://example.com/2022/07/14/LeetCode10-Backtracking/"/>
    <id>http://example.com/2022/07/14/LeetCode10-Backtracking/</id>
    <published>2022-07-15T02:56:54.000Z</published>
    <updated>2022-07-15T03:14:35.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯题目总结："><a href="#回溯题目总结：" class="headerlink" title="回溯题目总结："></a>回溯题目总结：</h1><h2 id="Backtracking-Python-problems-solutions-interview-prep"><a href="#Backtracking-Python-problems-solutions-interview-prep" class="headerlink" title="Backtracking Python problems+ solutions- interview prep"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/discuss/780232/Backtracking-Python-problems%2B-solutions-interview-prep">Backtracking Python problems+ solutions- interview prep</a></h2><h2 id="leetcode-tag"><a href="#leetcode-tag" class="headerlink" title="leetcode tag"></a><a href="https://leetcode.com/tag/backtracking/">leetcode tag</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯题目总结：&quot;&gt;&lt;a href=&quot;#回溯题目总结：&quot; class=&quot;headerlink&quot; title=&quot;回溯题目总结：&quot;&gt;&lt;/a&gt;回溯题目总结：&lt;/h1&gt;&lt;h2 id=&quot;Backtracking-Python-problems-solutions-interv</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Backtracking" scheme="http://example.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>17. Letter Combinations of a Phone Number(medium)</title>
    <link href="http://example.com/2022/07/14/17/"/>
    <id>http://example.com/2022/07/14/17/</id>
    <published>2022-07-15T01:55:06.000Z</published>
    <updated>2022-07-15T03:15:36.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-Letter-Combinations-of-a-Phone-Number-medium"><a href="#17-Letter-Combinations-of-a-Phone-Number-medium" class="headerlink" title="17. Letter Combinations of a Phone Number(medium)"></a>17. Letter Combinations of a Phone Number(medium)</h1><h2 id="Given-a-string-containing-digits-from-2-9-inclusive-return-all-possible-letter-combinations-that-the-number-could-represent-Return-the-answer-in-any-order"><a href="#Given-a-string-containing-digits-from-2-9-inclusive-return-all-possible-letter-combinations-that-the-number-could-represent-Return-the-answer-in-any-order" class="headerlink" title="Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order."></a>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</h2><h2 id="A-mapping-of-digits-to-letters-just-like-on-the-telephone-buttons-is-given-below-Note-that-1-does-not-map-to-any-letters"><a href="#A-mapping-of-digits-to-letters-just-like-on-the-telephone-buttons-is-given-below-Note-that-1-does-not-map-to-any-letters" class="headerlink" title="A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."></a>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">phone = &#123;&#x27;2&#x27;:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">                 &#x27;3&#x27;:[&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;],</span><br><span class="line">                 &#x27;4&#x27;:[&#x27;g&#x27;,&#x27;h&#x27;,&#x27;i&#x27;],</span><br><span class="line">                 &#x27;5&#x27;:[&#x27;j&#x27;,&#x27;k&#x27;,&#x27;l&#x27;],</span><br><span class="line">                 &#x27;6&#x27;:[&#x27;m&#x27;,&#x27;n&#x27;,&#x27;o&#x27;],</span><br><span class="line">                 &#x27;7&#x27;:[&#x27;p&#x27;,&#x27;q&#x27;,&#x27;r&#x27;,&#x27;s&#x27;],</span><br><span class="line">                 &#x27;8&#x27;:[&#x27;t&#x27;,&#x27;u&#x27;,&#x27;v&#x27;],</span><br><span class="line">                 &#x27;9&#x27;:[&#x27;w&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;]&#125;</span><br><span class="line">                </span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这题属于是hashmap记录数字和字母的对应关系，然后再用回溯的方法解决</p><h2 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solution/hui-su-dui-lie-tu-jie-by-ml-zimingmeng/">leetcode题解</a></h2><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits: </span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        phone = &#123;<span class="string">&#x27;2&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;3&#x27;</span>:[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;4&#x27;</span>:[<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;5&#x27;</span>:[<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;6&#x27;</span>:[<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;7&#x27;</span>:[<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;8&#x27;</span>:[<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;9&#x27;</span>:[<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]&#125;</span><br><span class="line">                </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">conbination,nextdigit</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(nextdigit) == <span class="number">0</span>:</span><br><span class="line">                res.append(conbination)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> letter <span class="keyword">in</span> phone[nextdigit[<span class="number">0</span>]]:</span><br><span class="line">                    backtrack(conbination + letter,nextdigit[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        backtrack(<span class="string">&#x27;&#x27;</span>,digits)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;17-Letter-Combinations-of-a-Phone-Number-medium&quot;&gt;&lt;a href=&quot;#17-Letter-Combinations-of-a-Phone-Number-medium&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
    <category term="Backtracking" scheme="http://example.com/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>12. Integer to Roman(medium)</title>
    <link href="http://example.com/2022/07/13/12/"/>
    <id>http://example.com/2022/07/13/12/</id>
    <published>2022-07-13T23:45:50.000Z</published>
    <updated>2022-07-15T03:01:42.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Integer-to-Roman-medium"><a href="#12-Integer-to-Roman-medium" class="headerlink" title="12. Integer to Roman(medium)"></a>12. Integer to Roman(medium)</h1><h2 id="Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M"><a href="#Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M" class="headerlink" title="Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."></a>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><h2 id="For-example-2-is-written-as-II-in-Roman-numeral-just-two-one’s-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II"><a href="#For-example-2-is-written-as-II-in-Roman-numeral-just-two-one’s-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II" class="headerlink" title="For example, 2 is written as II in Roman numeral, just two one’s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."></a>For example, 2 is written as II in Roman numeral, just two one’s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</h2><h2 id="Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used"><a href="#Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used" class="headerlink" title="Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"></a>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I can be placed before V (5) and X (10) to make 4 and 9. </span><br><span class="line">X can be placed before L (50) and C (100) to make 40 and 90. </span><br><span class="line">C can be placed before D (500) and M (1000) to make 400 and 900.</span><br><span class="line">Given an integer, convert it to a roman numeral.</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这题和接下来的13题是完全相反的思路，本题（12题）是整数转罗马数字，13题是罗马数字转整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: num = 3</span><br><span class="line">Output: &quot;III&quot;</span><br><span class="line">Explanation: 3 is represented as 3 ones.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: num = 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: L = 50, V = 5, III = 3.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: num = 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><p>罗马数字由 77 个不同的单字母符号组成，每个符号对应一个具体的数值。此外，减法规则（如问题描述中所述）给出了额外的 66 个复合符号。这给了我们总共 1313 个独特的符号（每个符号由 11 个或 22 个字母组成），如下图所示。</p><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/integer-to-roman/solution/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs/">官方题解</a></h2><p><img src="https://assets.leetcode-cn.com/solution-static/12/1.png"></p><p>罗马数字的规则是：对于罗马数字从左到右的每一位，选择尽可能大的符号值。</p><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>根据罗马数字的唯一表示法，为了表示一个给定的整数 num，我们寻找不超过 num 的最大符号值，将 num 减去该符号值，然后继续寻找不超过 num 的最大符号值，将该符号拼接在上一个找到的符号之后，循环直至 num 为 0。最后得到的字符串即为 num 的罗马数字表示。</p><p>编程时，可以建立一个数值-符号对的列表 valueSymbols，按数值从大到小排列。遍历 valueSymbols 中的每个数值-符号对，若当前数值 value 不超过 num，则从 num 中不断减去 value，直至 num 小于 value，然后遍历下一个数值-符号对。若遍历中 num 为 0 则跳出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    VALUE_SYMBOLS = [</span><br><span class="line">        (<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">        (<span class="number">900</span>, <span class="string">&quot;CM&quot;</span>),</span><br><span class="line">        (<span class="number">500</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">        (<span class="number">400</span>, <span class="string">&quot;CD&quot;</span>),</span><br><span class="line">        (<span class="number">100</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">        (<span class="number">90</span>, <span class="string">&quot;XC&quot;</span>),</span><br><span class="line">        (<span class="number">50</span>, <span class="string">&quot;L&quot;</span>),</span><br><span class="line">        (<span class="number">40</span>, <span class="string">&quot;XL&quot;</span>),</span><br><span class="line">        (<span class="number">10</span>, <span class="string">&quot;X&quot;</span>),</span><br><span class="line">        (<span class="number">9</span>, <span class="string">&quot;IX&quot;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;IV&quot;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;I&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        roman = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> Solution.VALUE_SYMBOLS:</span><br><span class="line">            <span class="keyword">while</span> num &gt;= value:</span><br><span class="line">                num -= value</span><br><span class="line">                roman.append(symbol)</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(roman)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># 使用哈希表，按照从大到小顺序排列</span></span><br><span class="line">        hashmap = &#123;<span class="number">1000</span>:<span class="string">&#x27;M&#x27;</span>, <span class="number">900</span>:<span class="string">&#x27;CM&#x27;</span>, <span class="number">500</span>:<span class="string">&#x27;D&#x27;</span>, <span class="number">400</span>:<span class="string">&#x27;CD&#x27;</span>, <span class="number">100</span>:<span class="string">&#x27;C&#x27;</span>, <span class="number">90</span>:<span class="string">&#x27;XC&#x27;</span>, <span class="number">50</span>:<span class="string">&#x27;L&#x27;</span>, <span class="number">40</span>:<span class="string">&#x27;XL&#x27;</span>, <span class="number">10</span>:<span class="string">&#x27;X&#x27;</span>, <span class="number">9</span>:<span class="string">&#x27;IX&#x27;</span>, <span class="number">5</span>:<span class="string">&#x27;V&#x27;</span>, <span class="number">4</span>:<span class="string">&#x27;IV&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;I&#x27;</span>&#125;</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> hashmap:</span><br><span class="line">            <span class="keyword">if</span> num // key != <span class="number">0</span>:</span><br><span class="line">                count = num // key  <span class="comment"># 比如输入4000，count 为 4</span></span><br><span class="line">                res += hashmap[key] * count </span><br><span class="line">                num %= key</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12-Integer-to-Roman-medium&quot;&gt;&lt;a href=&quot;#12-Integer-to-Roman-medium&quot; class=&quot;headerlink&quot; title=&quot;12. Integer to Roman(medium)&quot;&gt;&lt;/a&gt;12. In</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
  </entry>
  
  <entry>
    <title>21. Merge Two Sorted Lists(easy)</title>
    <link href="http://example.com/2022/07/04/21/"/>
    <id>http://example.com/2022/07/04/21/</id>
    <published>2022-07-04T21:24:09.000Z</published>
    <updated>2022-07-21T03:22:02.132Z</updated>
    
    <content type="html"><![CDATA[<ol start="21"><li>Merge Two Sorted Lists(easy)</li></ol><p>You are given the heads of two sorted linked lists list1 and list2.</p><p>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</p><p>Return the head of the merged linked list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list1 <span class="keyword">and</span> <span class="keyword">not</span> list2:</span><br><span class="line">            <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list1 <span class="keyword">or</span> <span class="keyword">not</span> list2:</span><br><span class="line">            <span class="keyword">return</span> list1 <span class="keyword">if</span> <span class="keyword">not</span> list2 <span class="keyword">else</span> list2</span><br><span class="line">        seek, target = (list1, list2) <span class="keyword">if</span> list1.val &lt; list2.val <span class="keyword">else</span> (list2, list1)</span><br><span class="line">        head = seek</span><br><span class="line">        <span class="keyword">while</span> seek <span class="keyword">and</span> target:</span><br><span class="line">            <span class="keyword">while</span> seek.<span class="built_in">next</span> <span class="keyword">and</span> seek.<span class="built_in">next</span>.val &lt; target.val:</span><br><span class="line">                seek = seek.<span class="built_in">next</span></span><br><span class="line">            seek.<span class="built_in">next</span>, target = target, seek.<span class="built_in">next</span></span><br><span class="line">            seek = seek.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;21&quot;&gt;
&lt;li&gt;Merge Two Sorted Lists(easy)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You are given the heads of two sorted linked lists list1 and list2.&lt;/p&gt;
&lt;p&gt;Me</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
    <category term="recursion" scheme="http://example.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>13. Roman to Integer(easy)</title>
    <link href="http://example.com/2022/07/01/13/"/>
    <id>http://example.com/2022/07/01/13/</id>
    <published>2022-07-02T03:22:05.000Z</published>
    <updated>2022-07-15T03:00:24.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-Roman-to-Integer-easy"><a href="#13-Roman-to-Integer-easy" class="headerlink" title="13. Roman to Integer(easy)"></a>13. Roman to Integer(easy)</h1><h2 id="Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M"><a href="#Roman-numerals-are-represented-by-seven-different-symbols-I-V-X-L-C-D-and-M" class="headerlink" title="Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."></a>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</h2><h2 id="For-example-2-is-written-as-II-in-Roman-numeral-just-two-ones-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II"><a href="#For-example-2-is-written-as-II-in-Roman-numeral-just-two-ones-added-together-12-is-written-as-XII-which-is-simply-X-II-The-number-27-is-written-as-XXVII-which-is-XX-V-II" class="headerlink" title="For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."></a>For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</h2><h2 id="Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used"><a href="#Roman-numerals-are-usually-written-largest-to-smallest-from-left-to-right-However-the-numeral-for-four-is-not-IIII-Instead-the-number-four-is-written-as-IV-Because-the-one-is-before-the-five-we-subtract-it-making-four-The-same-principle-applies-to-the-number-nine-which-is-written-as-IX-There-are-six-instances-where-subtraction-is-used" class="headerlink" title="Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"></a>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</h2><h2 id="I-can-be-placed-before-V-5-and-X-10-to-make-4-and-9"><a href="#I-can-be-placed-before-V-5-and-X-10-to-make-4-and-9" class="headerlink" title="I can be placed before V (5) and X (10) to make 4 and 9."></a>I can be placed before V (5) and X (10) to make 4 and 9.</h2><h2 id="X-can-be-placed-before-L-50-and-C-100-to-make-40-and-90"><a href="#X-can-be-placed-before-L-50-and-C-100-to-make-40-and-90" class="headerlink" title="X can be placed before L (50) and C (100) to make 40 and 90."></a>X can be placed before L (50) and C (100) to make 40 and 90.</h2><h2 id="C-can-be-placed-before-D-500-and-M-1000-to-make-400-and-900"><a href="#C-can-be-placed-before-D-500-and-M-1000-to-make-400-and-900" class="headerlink" title="C can be placed before D (500) and M (1000) to make 400 and 900."></a>C can be placed before D (500) and M (1000) to make 400 and 900.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/roman-to-integer/solution/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/">官方题解</a></p><p>这题的特点<br>通常情况下，罗马数字中小的数字在大的数字的右边。若输入的字符串满足该情况，那么可以将每个字符视作一个单独的值，累加每个字符对应的数值即可。</p><p>例如 XXVII 可视作 X+X+V+I+I=10+10+5+1+1=27。</p><p>若存在小的数字在大的数字的左边的情况，根据规则需要减去小的数字。对于这种情况，我们也可以将每个字符视作一个单独的值，若一个数字右侧的数字比它大，则将该数字的符号取反。</p><p>例如 XIV 可视作 X−I+V=10−1+5=14。</p><h3 id="但是评论里有超神思路："><a href="#但是评论里有超神思路：" class="headerlink" title="但是评论里有超神思路："></a>但是评论里有超神思路：</h3><p><a href="https://leetcode.cn/problems/roman-to-integer/solution/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/1060752">从右到左遍历，记录当前遇到的最大的数字，遇到更大的就加，并且更新最大数，遇到小的就减，更好理解吧</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        highestLevel = <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">            level = mapping[ch]</span><br><span class="line">            <span class="keyword">if</span> level &gt;= highestLevel:</span><br><span class="line">                result += level</span><br><span class="line">                highestLevel = level</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result -= level</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;13-Roman-to-Integer-easy&quot;&gt;&lt;a href=&quot;#13-Roman-to-Integer-easy&quot; class=&quot;headerlink&quot; title=&quot;13. Roman to Integer(easy)&quot;&gt;&lt;/a&gt;13. Roman to</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="mapping" scheme="http://example.com/tags/mapping/"/>
    
  </entry>
  
  <entry>
    <title>9. Palindrome Number(easy)</title>
    <link href="http://example.com/2022/07/01/9/"/>
    <id>http://example.com/2022/07/01/9/</id>
    <published>2022-07-02T03:16:17.000Z</published>
    <updated>2022-07-02T03:40:11.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-Palindrome-Number-easy"><a href="#9-Palindrome-Number-easy" class="headerlink" title="9. Palindrome Number(easy)"></a>9. Palindrome Number(easy)</h1><h2 id="Given-an-integer-x-return-true-if-x-is-palindrome-integer"><a href="#Given-an-integer-x-return-true-if-x-is-palindrome-integer" class="headerlink" title="Given an integer x, return true if x is palindrome integer."></a>Given an integer x, return true if x is palindrome integer.</h2><h2 id="An-integer-is-a-palindrome-when-it-reads-the-same-backward-as-forward"><a href="#An-integer-is-a-palindrome-when-it-reads-the-same-backward-as-forward" class="headerlink" title="An integer is a palindrome when it reads the same backward as forward."></a>An integer is a palindrome when it reads the same backward as forward.</h2><h2 id="For-example-121-is-a-palindrome-while-123-is-not"><a href="#For-example-121-is-a-palindrome-while-123-is-not" class="headerlink" title="For example, 121 is a palindrome while 123 is not."></a>For example, 121 is a palindrome while 123 is not.</h2><p>找到回文数</p><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/">官方题解</a></h2><p>反转一半数字<br>思路</p><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p><p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。<br>但是，如果反转后的数字大于 int.MAX，我们将遇到整数溢出问题。</p><p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p><p>例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。</p><p>现在，让我们来考虑如何反转后半部分的数字。</p><p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p><p>现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？</p><p>由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。</p><p>根据官方题解改的python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        revertedNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; revertedNumber:</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber <span class="keyword">or</span> x == revertedNumber // <span class="number">10</span>        </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;9-Palindrome-Number-easy&quot;&gt;&lt;a href=&quot;#9-Palindrome-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;9. Palindrome Number(easy)&quot;&gt;&lt;/a&gt;9. Palindrom</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Palindrome Number" scheme="http://example.com/tags/Palindrome-Number/"/>
    
  </entry>
  
  <entry>
    <title>15. 3Sum(medium)</title>
    <link href="http://example.com/2022/07/01/15/"/>
    <id>http://example.com/2022/07/01/15/</id>
    <published>2022-07-02T03:01:07.000Z</published>
    <updated>2022-07-02T03:40:02.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-3Sum-medium"><a href="#15-3Sum-medium" class="headerlink" title="15. 3Sum(medium)"></a>15. 3Sum(medium)</h1><h2 id="Given-an-integer-array-nums-return-all-the-triplets-nums-i-nums-j-nums-k-such-that-i-j-i-k-and-j-k-and-nums-i-nums-j-nums-k-0"><a href="#Given-an-integer-array-nums-return-all-the-triplets-nums-i-nums-j-nums-k-such-that-i-j-i-k-and-j-k-and-nums-i-nums-j-nums-k-0" class="headerlink" title="Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0."></a>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</h2><h2 id="Notice-that-the-solution-set-must-not-contain-duplicate-triplets"><a href="#Notice-that-the-solution-set-must-not-contain-duplicate-triplets" class="headerlink" title="Notice that the solution set must not contain duplicate triplets."></a>Notice that the solution set must not contain duplicate triplets.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">    nums.sort()</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> left <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">2</span>): <span class="comment"># renamed this to left because this will always be the leftmost pointer in the triplet</span></span><br><span class="line">        <span class="keyword">if</span> left &gt; <span class="number">0</span> <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]: <span class="comment"># this step makes sure that we do not have any duplicates in our result output</span></span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        mid = left + <span class="number">1</span> <span class="comment"># renamed this to mid because this is the pointer that is between the left and right pointers</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> mid &lt; right:</span><br><span class="line">            curr_sum = nums[left] + nums[mid] + nums[right]</span><br><span class="line">            <span class="keyword">if</span> curr_sum &lt; <span class="number">0</span>:</span><br><span class="line">                mid += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">elif</span> curr_sum &gt; <span class="number">0</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append([nums[left], nums[mid], nums[right]])</span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[mid] == nums[mid + <span class="number">1</span>]: <span class="comment"># Another conditional for not calculating duplicates</span></span><br><span class="line">                    mid += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> mid &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]: <span class="comment"># Avoiding duplicates check</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                mid += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;15-3Sum-medium&quot;&gt;&lt;a href=&quot;#15-3Sum-medium&quot; class=&quot;headerlink&quot; title=&quot;15. 3Sum(medium)&quot;&gt;&lt;/a&gt;15. 3Sum(medium)&lt;/h1&gt;&lt;h2 id=&quot;Given-an-inte</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>11. Container With Most Water(medium)</title>
    <link href="http://example.com/2022/07/01/11/"/>
    <id>http://example.com/2022/07/01/11/</id>
    <published>2022-07-01T16:01:52.000Z</published>
    <updated>2022-07-02T03:39:46.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Container-With-Most-Water-medium"><a href="#11-Container-With-Most-Water-medium" class="headerlink" title="11. Container With Most Water(medium)"></a>11. Container With Most Water(medium)</h1><h2 id="You-are-given-an-integer-array-height-of-length-n-There-are-n-vertical-lines-drawn-such-that-the-two-endpoints-of-the-ith-line-are-i-0-and-i-height-i"><a href="#You-are-given-an-integer-array-height-of-length-n-There-are-n-vertical-lines-drawn-such-that-the-two-endpoints-of-the-ith-line-are-i-0-and-i-height-i" class="headerlink" title="You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i])."></a>You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).</h2><h2 id="Find-two-lines-that-together-with-the-x-axis-form-a-container-such-that-the-container-contains-the-most-water"><a href="#Find-two-lines-that-together-with-the-x-axis-form-a-container-such-that-the-container-contains-the-most-water" class="headerlink" title="Find two lines that together with the x-axis form a container, such that the container contains the most water."></a>Find two lines that together with the x-axis form a container, such that the container contains the most water.</h2><h2 id="Return-the-maximum-amount-of-water-a-container-can-store"><a href="#Return-the-maximum-amount-of-water-a-container-can-store" class="headerlink" title="Return the maximum amount of water a container can store."></a>Return the maximum amount of water a container can store.</h2><h2 id="Notice-that-you-may-not-slant-the-container"><a href="#Notice-that-you-may-not-slant-the-container" class="headerlink" title="Notice that you may not slant the container."></a>Notice that you may not slant the container.</h2><p>看了题解，双指针，从两头开始内卷，先卷矮的那头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = <span class="built_in">len</span>(height)-<span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            area = <span class="built_in">min</span>(height[l],height[r])*(r-l)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,area)</span><br><span class="line">            l=</span><br><span class="line">            <span class="keyword">if</span> height[l]&lt;height[r]:</span><br><span class="line">                l+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height</span>):</span></span><br><span class="line">        L, R, width, res = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span>, <span class="built_in">len</span>(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(width, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment">#range(start, stop, step)</span></span><br><span class="line">            <span class="keyword">if</span> height[L] &lt; height[R]:</span><br><span class="line">                res, L = <span class="built_in">max</span>(res, height[L] * w), L + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res, R = <span class="built_in">max</span>(res, height[R] * w), R - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;11-Container-With-Most-Water-medium&quot;&gt;&lt;a href=&quot;#11-Container-With-Most-Water-medium&quot; class=&quot;headerlink&quot; title=&quot;11. Container With Mos</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>3. Longest Substring Without Repeating Characters(medium)</title>
    <link href="http://example.com/2022/07/01/3/"/>
    <id>http://example.com/2022/07/01/3/</id>
    <published>2022-07-01T15:31:22.000Z</published>
    <updated>2022-07-01T23:16:01.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-Longest-Substring-Without-Repeating-Characters-medium"><a href="#3-Longest-Substring-Without-Repeating-Characters-medium" class="headerlink" title="3. Longest Substring Without Repeating Characters(medium)"></a>3. Longest Substring Without Repeating Characters(medium)</h1><h2 id="Given-a-string-s-find-the-length-of-the-longest-substring-without-repeating-characters"><a href="#Given-a-string-s-find-the-length-of-the-longest-substring-without-repeating-characters" class="headerlink" title="Given a string s, find the length of the longest substring without repeating characters."></a>Given a string s, find the length of the longest substring without repeating characters.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;abcabcbb&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p>这道题第一反应是双指针，通过滑动窗口来解决，但有个需要解决的问题是如果判断substring的字母有重复的。</p><p>利用hashmap查找重复字母<br><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetc-2/376956">leetcode评论</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        k, res, c_dict = -<span class="number">1</span>, <span class="number">0</span>, &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> c_dict <span class="keyword">and</span> c_dict[c] &gt; k:  <span class="comment"># 字符c在字典中 且 上次出现的下标大于当前长度的起始下标</span></span><br><span class="line">                k = c_dict[c]</span><br><span class="line">                c_dict[c] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c_dict[c] = i</span><br><span class="line">                res = <span class="built_in">max</span>(res, i-k)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用队列查找字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        lst = []</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> s[i] <span class="keyword">in</span> lst:</span><br><span class="line">                <span class="keyword">del</span> lst[<span class="number">0</span>]  <span class="comment"># 队首元素出队</span></span><br><span class="line">            lst.append(s[i]) <span class="comment"># 排除重复元素后 新元素入队</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">len</span>(lst))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-Longest-Substring-Without-Repeating-Characters-medium&quot;&gt;&lt;a href=&quot;#3-Longest-Substring-Without-Repeating-Characters-medium&quot; class=&quot;h</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode09-hashmap</title>
    <link href="http://example.com/2022/06/28/LeetCode09-hashmap/"/>
    <id>http://example.com/2022/06/28/LeetCode09-hashmap/</id>
    <published>2022-06-29T03:37:33.000Z</published>
    <updated>2022-07-15T20:17:53.695Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><h2 id="Leetcode-题解-目录-md"><a href="#Leetcode-题解-目录-md" class="headerlink" title="Leetcode 题解 - 目录.md"></a><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%93%88%E5%B8%8C%E8%A1%A8.md">Leetcode 题解 - 目录.md</a></h2><p>hashmap</p><p><a href="https://leetcode.com/tag/hash-table/">官方hashmaptag</a></p><ol start="12"><li>Integer to Roman(medium)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># 使用哈希表，按照从大到小顺序排列</span></span><br><span class="line">        hashmap = &#123;<span class="number">1000</span>:<span class="string">&#x27;M&#x27;</span>, <span class="number">900</span>:<span class="string">&#x27;CM&#x27;</span>, <span class="number">500</span>:<span class="string">&#x27;D&#x27;</span>, <span class="number">400</span>:<span class="string">&#x27;CD&#x27;</span>, <span class="number">100</span>:<span class="string">&#x27;C&#x27;</span>, <span class="number">90</span>:<span class="string">&#x27;XC&#x27;</span>, <span class="number">50</span>:<span class="string">&#x27;L&#x27;</span>, <span class="number">40</span>:<span class="string">&#x27;XL&#x27;</span>, <span class="number">10</span>:<span class="string">&#x27;X&#x27;</span>, <span class="number">9</span>:<span class="string">&#x27;IX&#x27;</span>, <span class="number">5</span>:<span class="string">&#x27;V&#x27;</span>, <span class="number">4</span>:<span class="string">&#x27;IV&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;I&#x27;</span>&#125;</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> hashmap:</span><br><span class="line">            <span class="keyword">if</span> num // key != <span class="number">0</span>:</span><br><span class="line">                count = num // key  <span class="comment"># 比如输入4000，count 为 4</span></span><br><span class="line">                res += hashmap[key] * count </span><br><span class="line">                num %= key</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    VALUE_SYMBOLS = [</span><br><span class="line">        (<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">        (<span class="number">900</span>, <span class="string">&quot;CM&quot;</span>),</span><br><span class="line">        (<span class="number">500</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">        (<span class="number">400</span>, <span class="string">&quot;CD&quot;</span>),</span><br><span class="line">        (<span class="number">100</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">        (<span class="number">90</span>, <span class="string">&quot;XC&quot;</span>),</span><br><span class="line">        (<span class="number">50</span>, <span class="string">&quot;L&quot;</span>),</span><br><span class="line">        (<span class="number">40</span>, <span class="string">&quot;XL&quot;</span>),</span><br><span class="line">        (<span class="number">10</span>, <span class="string">&quot;X&quot;</span>),</span><br><span class="line">        (<span class="number">9</span>, <span class="string">&quot;IX&quot;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;IV&quot;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;I&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        roman = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> Solution.VALUE_SYMBOLS:</span><br><span class="line">            <span class="keyword">while</span> num &gt;= value:</span><br><span class="line">                num -= value</span><br><span class="line">                roman.append(symbol)</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(roman)</span><br></pre></td></tr></table></figure><ol start="13"><li>Roman to Integer(easy)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        highestLevel = <span class="number">1</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">            level = mapping[ch]</span><br><span class="line">            <span class="keyword">if</span> level &gt;= highestLevel:</span><br><span class="line">                result += level</span><br><span class="line">                highestLevel = level</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result -= level</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>从这两题我们可以看出hashmap的基础写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">VALUE_SYMBOLS = [</span><br><span class="line">        (<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">        (<span class="number">900</span>, <span class="string">&quot;CM&quot;</span>),</span><br><span class="line">        (<span class="number">500</span>, <span class="string">&quot;D&quot;</span>),</span><br><span class="line">        (<span class="number">400</span>, <span class="string">&quot;CD&quot;</span>),</span><br><span class="line">        (<span class="number">100</span>, <span class="string">&quot;C&quot;</span>),</span><br><span class="line">        (<span class="number">90</span>, <span class="string">&quot;XC&quot;</span>),</span><br><span class="line">        (<span class="number">50</span>, <span class="string">&quot;L&quot;</span>),</span><br><span class="line">        (<span class="number">40</span>, <span class="string">&quot;XL&quot;</span>),</span><br><span class="line">        (<span class="number">10</span>, <span class="string">&quot;X&quot;</span>),</span><br><span class="line">        (<span class="number">9</span>, <span class="string">&quot;IX&quot;</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;IV&quot;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;I&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">hashmap = &#123;<span class="number">1000</span>:<span class="string">&#x27;M&#x27;</span>, <span class="number">900</span>:<span class="string">&#x27;CM&#x27;</span>, <span class="number">500</span>:<span class="string">&#x27;D&#x27;</span>, <span class="number">400</span>:<span class="string">&#x27;CD&#x27;</span>, <span class="number">100</span>:<span class="string">&#x27;C&#x27;</span>, <span class="number">90</span>:<span class="string">&#x27;XC&#x27;</span>, <span class="number">50</span>:<span class="string">&#x27;L&#x27;</span>, <span class="number">40</span>:<span class="string">&#x27;XL&#x27;</span>, <span class="number">10</span>:<span class="string">&#x27;X&#x27;</span>, <span class="number">9</span>:<span class="string">&#x27;IX&#x27;</span>, <span class="number">5</span>:<span class="string">&#x27;V&#x27;</span>, <span class="number">4</span>:<span class="string">&#x27;IV&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;I&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://githu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode08-动态规划</title>
    <link href="http://example.com/2022/06/28/LeetCode08-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2022/06/28/LeetCode08-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2022-06-29T03:14:48.000Z</published>
    <updated>2022-07-02T02:55:14.753Z</updated>
    
    <content type="html"><![CDATA[<h6 id="具体学习链接-Leetcode-题解-目录-md"><a href="#具体学习链接-Leetcode-题解-目录-md" class="headerlink" title="具体学习链接:Leetcode 题解 - 目录.md"></a>具体学习链接:<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md">Leetcode 题解 - 目录.md</a></h6><h1 id="Leetcode-题解-动态规划"><a href="#Leetcode-题解-动态规划" class="headerlink" title="Leetcode 题解 - 动态规划"></a>Leetcode 题解 - 动态规划</h1><h2 id="素数分解"><a href="#素数分解" class="headerlink" title="素数分解"></a>素数分解</h2><p>每一个数都可以分解成素数的乘积</p><h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>令 x = 2m0 * 3m1 * 5m2 * 7m3 * 11m4 * …</p><p>令 y = 2n0 * 3n1 * 5n2 * 7n3 * 11n4 * …</p><p>如果 x 整除 y（y mod x == 0），则对于所有 i，mi &lt;= ni。</p><h2 id="最大公约数最小公倍数"><a href="#最大公约数最小公倍数" class="headerlink" title="最大公约数最小公倍数"></a>最大公约数最小公倍数</h2><p>x 和 y 的最大公约数为：gcd(x,y) = 2min(m0,n0) * 3min(m1,n1) * 5min(m2,n2) * …</p><p>x 和 y 的最小公倍数为：lcm(x,y) = 2max(m0,n0) * 3max(m1,n1) * 5max(m2,n2) * …</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;具体学习链接-Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#具体学习链接-Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;具体学习链接:Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;具体学习链接:&lt;a hr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>914. X of a Kind in a Deck of Cards</title>
    <link href="http://example.com/2022/06/27/914/"/>
    <id>http://example.com/2022/06/27/914/</id>
    <published>2022-06-27T23:53:57.000Z</published>
    <updated>2022-07-08T20:42:34.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="914-X-of-a-Kind-in-a-Deck-of-Cards"><a href="#914-X-of-a-Kind-in-a-Deck-of-Cards" class="headerlink" title="914. X of a Kind in a Deck of Cards"></a>914. X of a Kind in a Deck of Cards</h1><h2 id="In-a-deck-of-cards-each-card-has-an-integer-written-on-it"><a href="#In-a-deck-of-cards-each-card-has-an-integer-written-on-it" class="headerlink" title="In a deck of cards, each card has an integer written on it."></a>In a deck of cards, each card has an integer written on it.</h2><h2 id="Return-true-if-and-only-if-you-can-choose-X-gt-2-such-that-it-is-possible-to-split-the-entire-deck-into-1-or-more-groups-of-cards-where"><a href="#Return-true-if-and-only-if-you-can-choose-X-gt-2-such-that-it-is-possible-to-split-the-entire-deck-into-1-or-more-groups-of-cards-where" class="headerlink" title="Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:"></a>Return true if and only if you can choose X &gt;= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:</h2><h2 id="Each-group-has-exactly-X-cards"><a href="#Each-group-has-exactly-X-cards" class="headerlink" title="Each group has exactly X cards."></a>Each group has exactly X cards.</h2><h2 id="All-the-cards-in-each-group-have-the-same-integer"><a href="#All-the-cards-in-each-group-have-the-same-integer" class="headerlink" title="All the cards in each group have the same integer."></a>All the cards in each group have the same integer.</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;914-X-of-a-Kind-in-a-Deck-of-Cards&quot;&gt;&lt;a href=&quot;#914-X-of-a-Kind-in-a-Deck-of-Cards&quot; class=&quot;headerlink&quot; title=&quot;914. X of a Kind in a De</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Greatest common divisor " scheme="http://example.com/tags/Greatest-common-divisor/"/>
    
  </entry>
  
  <entry>
    <title>204. Count Primes (Easy)</title>
    <link href="http://example.com/2022/06/27/204/"/>
    <id>http://example.com/2022/06/27/204/</id>
    <published>2022-06-27T21:28:56.000Z</published>
    <updated>2022-07-01T23:14:59.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="204-Count-Primes-Easy"><a href="#204-Count-Primes-Easy" class="headerlink" title="204. Count Primes (Easy)"></a>204. Count Primes (Easy)</h1><h2 id="Given-an-integer-n-return-the-number-of-prime-numbers-that-are-strictly-less-than-n"><a href="#Given-an-integer-n-return-the-number-of-prime-numbers-that-are-strictly-less-than-n" class="headerlink" title="Given an integer n, return the number of prime numbers that are strictly less than n."></a>Given an integer n, return the number of prime numbers that are strictly less than n.</h2><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/">官方题解</a></h2><h3 id="方法一：枚举"><a href="#方法一：枚举" class="headerlink" title="方法一：枚举"></a>方法一：枚举</h3><p>很直观的思路是我们枚举每个数判断其是不是质数。</p><p>考虑质数的定义：在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然数。因此对于每个数 x，我们可以从小到大枚举 [2,x−1] 中的每个数 y，判断 y 是否为 x 的因数。但这样判断一个数是否为质数的时间复杂度最差情况下会到 O(n)，无法通过所有测试数据。</p><h3 id="方法二：埃氏筛"><a href="#方法二：埃氏筛" class="headerlink" title="方法二：埃氏筛"></a>方法二：埃氏筛</h3><p>枚举没有考虑到数与数的关联性，因此难以再继续优化时间复杂度。接下来我们介绍一个常见的算法，该算法由希腊数学家厄拉多塞（Eratosthenes）提出，称为厄拉多塞筛法，简称埃氏筛。</p><p>我们考虑这样一个事实：如果 x 是质数，那么大于 x 的 x 的倍数 2x,3x,… 一定不是质数，因此我们可以从这里入手。</p><p>我们设 isPrime[i] 表示数 i 是不是质数，如果是质数则为 1，否则为 0。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即 0，这样在运行结束的时候我们即能知道质数的个数。</p><p>这种方法的正确性是比较显然的：这种方法显然不会将质数标记成合数；另一方面，当从小到大遍历到数 x 时，倘若它是合数，则它一定是某个小于 x 的质数 yy 的整数倍，故根据此方法的步骤，我们在遍历到 y 时，就一定会在此时将 xx 标记为 isPrime[x]=0。因此，这种方法也不会将合数标记为质数。</p><p>当然这里还可以继续优化，对于一个质数 x，如果按上文说的我们从 2x 开始标记其实是冗余的，应该直接从 x⋅x 开始标记，因为 2x,3x,… 这些数一定在 x 之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。</p><h4 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.com/problems/count-primes/discuss/153528/Python3-99-112-ms-Explained%3A-The-Sieve-of-Eratosthenes-with-optimizations">leetcode题解</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Sieve of Eratosthenes埃氏筛</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We are only interested in numbers LESS than the input number</span></span><br><span class="line">        <span class="comment"># exit early for numbers LESS than 2; (two is prime)</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># create strike list for the input range, initializing all indices to</span></span><br><span class="line">        <span class="comment"># prime (1).</span></span><br><span class="line">        strikes = [<span class="number">1</span>] * n</span><br><span class="line"></span><br><span class="line">        <span class="comment"># we know that 0 and 2 are not prime</span></span><br><span class="line">        strikes[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        strikes[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Now set multiples of remaining numbers that are marked as prime to</span></span><br><span class="line">        <span class="comment"># not prime.  It is safe ignore numbers alreay marked as not prime</span></span><br><span class="line">        <span class="comment"># because there are factor(s) that divide evenly into this number and</span></span><br><span class="line">        <span class="comment"># all its multiples.  Use upper limit of (n**0.5)+1, because:</span></span><br><span class="line">        <span class="comment">#  (a) the smallest factor of a non-prime number will not be &gt; sqrt(n).</span></span><br><span class="line">        <span class="comment">#      Ex. non-prime = 100, </span></span><br><span class="line">        <span class="comment">#           5*20</span></span><br><span class="line">        <span class="comment">#           10*10, </span></span><br><span class="line">        <span class="comment">#           20*5   # !! we have seen 5 before.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>  strikes[i] != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># slow:</span></span><br><span class="line">                <span class="comment">#for j in range(i*i, n, i):</span></span><br><span class="line">                <span class="comment">#    strikes[j] = 0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 3x faster:</span></span><br><span class="line">                <span class="comment"># strikes[i*i:n:i] = [0] * ((n-1-i*i)//i + 1)</span></span><br><span class="line">                <span class="comment"># n = 11</span></span><br><span class="line">                <span class="comment"># i = 2</span></span><br><span class="line">                <span class="comment"># (n-1-i*i)//i + 1</span></span><br><span class="line">                <span class="comment"># (n-1)               # get total # of indicies for n (non-inclusive)</span></span><br><span class="line">                <span class="comment">#     -i*i            # shift to get # of slots in range of interest</span></span><br><span class="line">                <span class="comment">#          //i        # get number of groups</span></span><br><span class="line">                <span class="comment">#              + 1    # get number of slots</span></span><br><span class="line">                <span class="comment"># strikes[2*2:11:2]  = [0] * ((11-1-2*2)//2 + 1</span></span><br><span class="line">                <span class="comment"># strikes[4:11:2]    = [0] * 4</span></span><br><span class="line">                <span class="comment"># s[4], s[6], s[8], s10] = 0, 0, 0, 0</span></span><br><span class="line">                strikes[i*i:n:i] = [<span class="number">0</span>] * ((n-<span class="number">1</span>-i*i)//i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(strikes)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用数组primes[i]表示数字i是否是素数，如果值为True则为素数，</span></span><br><span class="line"><span class="string">        如果值为False则为合数 </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        primes = [<span class="literal">True</span>] * n</span><br><span class="line">        primes[<span class="number">0</span>]=primes[<span class="number">1</span>]=<span class="literal">False</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            <span class="comment"># 如果当前值是素数，就将它倍数标记为合数</span></span><br><span class="line">            <span class="keyword">if</span> primes[i]:</span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">                _power = i * i</span><br><span class="line">                <span class="keyword">if</span> _power &lt; n :</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(_power, n, i):</span><br><span class="line">                        primes[j] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用数组primes[i]表示数字i是否是素数，如果值为True则为素数，</span></span><br><span class="line"><span class="string">        如果值为False则为合数 </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        primes = [<span class="literal">True</span>] * n</span><br><span class="line">        primes[<span class="number">0</span>]= primes[<span class="number">1</span>] = <span class="literal">False</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            <span class="comment"># 如果当前值是素数，就将它倍数标记为合数</span></span><br><span class="line">            <span class="keyword">if</span> primes[i]:</span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">                _power = i * i</span><br><span class="line">                <span class="keyword">if</span> _power &lt; n :</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(_power, n, i):</span><br><span class="line">                        primes[j] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;204-Count-Primes-Easy&quot;&gt;&lt;a href=&quot;#204-Count-Primes-Easy&quot; class=&quot;headerlink&quot; title=&quot;204. Count Primes (Easy)&quot;&gt;&lt;/a&gt;204. Count Primes (E</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="prime number" scheme="http://example.com/tags/prime-number/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode07-数学</title>
    <link href="http://example.com/2022/06/26/LeetCode07-%E6%95%B0%E5%AD%A6/"/>
    <id>http://example.com/2022/06/26/LeetCode07-%E6%95%B0%E5%AD%A6/</id>
    <published>2022-06-27T02:22:25.000Z</published>
    <updated>2022-07-02T02:55:28.413Z</updated>
    
    <content type="html"><![CDATA[<h6 id="具体学习链接-Leetcode-题解-目录-md"><a href="#具体学习链接-Leetcode-题解-目录-md" class="headerlink" title="具体学习链接:Leetcode 题解 - 目录.md"></a>具体学习链接:<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%95%B0%E5%AD%A6.md">Leetcode 题解 - 目录.md</a></h6><h1 id="Leetcode-题解-数学"><a href="#Leetcode-题解-数学" class="headerlink" title="Leetcode 题解 - 数学"></a>Leetcode 题解 - 数学</h1><h2 id="素数分解"><a href="#素数分解" class="headerlink" title="素数分解"></a>素数分解</h2><p>每一个数都可以分解成素数的乘积</p><h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>令 x = 2m0 * 3m1 * 5m2 * 7m3 * 11m4 * …</p><p>令 y = 2n0 * 3n1 * 5n2 * 7n3 * 11n4 * …</p><p>如果 x 整除 y（y mod x == 0），则对于所有 i，mi &lt;= ni。</p><h2 id="最大公约数最小公倍数"><a href="#最大公约数最小公倍数" class="headerlink" title="最大公约数最小公倍数"></a>最大公约数最小公倍数</h2><p>x 和 y 的最大公约数为：gcd(x,y) = 2min(m0,n0) * 3min(m1,n1) * 5min(m2,n2) * …</p><p>x 和 y 的最小公倍数为：lcm(x,y) = 2max(m0,n0) * 3max(m1,n1) * 5max(m2,n2) * …</p><h3 id="1-生成素数序列"><a href="#1-生成素数序列" class="headerlink" title="1. 生成素数序列"></a>1. 生成素数序列</h3><h3 id="2-最大公约数"><a href="#2-最大公约数" class="headerlink" title="2. 最大公约数"></a>2. 最大公约数</h3><h3 id="3-使用位操作和减法求解最大公约数"><a href="#3-使用位操作和减法求解最大公约数" class="headerlink" title="3. 使用位操作和减法求解最大公约数"></a>3. 使用位操作和减法求解最大公约数</h3><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="1-7-进制"><a href="#1-7-进制" class="headerlink" title="1. 7 进制"></a>1. 7 进制</h3><h3 id="2-16-进制"><a href="#2-16-进制" class="headerlink" title="2. 16 进制"></a>2. 16 进制</h3><h3 id="3-26-进制"><a href="#3-26-进制" class="headerlink" title="3. 26 进制"></a>3. 26 进制</h3><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><h3 id="1-统计阶乘尾部有多少个-0"><a href="#1-统计阶乘尾部有多少个-0" class="headerlink" title="1. 统计阶乘尾部有多少个 0"></a>1. 统计阶乘尾部有多少个 0</h3><h2 id="字符串加法减法"><a href="#字符串加法减法" class="headerlink" title="字符串加法减法"></a>字符串加法减法</h2><h3 id="1-二进制加法"><a href="#1-二进制加法" class="headerlink" title="1. 二进制加法"></a>1. 二进制加法</h3><h3 id="2-字符串加法"><a href="#2-字符串加法" class="headerlink" title="2. 字符串加法"></a>2. 字符串加法</h3><h2 id="相遇问题"><a href="#相遇问题" class="headerlink" title="相遇问题"></a>相遇问题</h2><h3 id="1-改变数组元素使所有的数组元素都相等"><a href="#1-改变数组元素使所有的数组元素都相等" class="headerlink" title="1. 改变数组元素使所有的数组元素都相等"></a>1. 改变数组元素使所有的数组元素都相等</h3><h2 id="多数投票问题"><a href="#多数投票问题" class="headerlink" title="多数投票问题"></a>多数投票问题</h2><h3 id="1-数组中出现次数多于-n-2-的元素"><a href="#1-数组中出现次数多于-n-2-的元素" class="headerlink" title="1. 数组中出现次数多于 n / 2 的元素"></a>1. 数组中出现次数多于 n / 2 的元素</h3><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="1-平方数"><a href="#1-平方数" class="headerlink" title="1. 平方数"></a>1. 平方数</h3><h3 id="2-3-的-n-次方"><a href="#2-3-的-n-次方" class="headerlink" title="2. 3 的 n 次方"></a>2. 3 的 n 次方</h3><h3 id="3-乘积数组"><a href="#3-乘积数组" class="headerlink" title="3. 乘积数组"></a>3. 乘积数组</h3><h3 id="4-找出数组中的乘积最大的三个数"><a href="#4-找出数组中的乘积最大的三个数" class="headerlink" title="4. 找出数组中的乘积最大的三个数"></a>4. 找出数组中的乘积最大的三个数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;具体学习链接-Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#具体学习链接-Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;具体学习链接:Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;具体学习链接:&lt;a hr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode06-搜索</title>
    <link href="http://example.com/2022/06/23/LeetCode06-%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2022/06/23/LeetCode06-%E6%90%9C%E7%B4%A2/</id>
    <published>2022-06-24T02:59:51.000Z</published>
    <updated>2022-07-02T02:55:23.234Z</updated>
    
    <content type="html"><![CDATA[<h6 id="具体学习链接-Leetcode-题解-目录-md"><a href="#具体学习链接-Leetcode-题解-目录-md" class="headerlink" title="具体学习链接:Leetcode 题解 - 目录.md"></a>具体学习链接:<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E6%90%9C%E7%B4%A2.md">Leetcode 题解 - 目录.md</a></h6><h1 id="Leetcode-题解-搜索"><a href="#Leetcode-题解-搜索" class="headerlink" title="Leetcode 题解 - 搜索"></a>Leetcode 题解 - 搜索</h1><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="1-计算在网格中从原点到特定点的最短路径长度"><a href="#1-计算在网格中从原点到特定点的最短路径长度" class="headerlink" title="1. 计算在网格中从原点到特定点的最短路径长度"></a>1. 计算在网格中从原点到特定点的最短路径长度</h3><h3 id="2-组成整数的最小平方数数量"><a href="#2-组成整数的最小平方数数量" class="headerlink" title="2. 组成整数的最小平方数数量"></a>2. 组成整数的最小平方数数量</h3><h3 id="3-最短单词路径"><a href="#3-最短单词路径" class="headerlink" title="3. 最短单词路径"></a>3. 最短单词路径</h3><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="1-查找最大的连通面积"><a href="#1-查找最大的连通面积" class="headerlink" title="1. 查找最大的连通面积"></a>1. 查找最大的连通面积</h3><h3 id="2-矩阵中的连通分量数目"><a href="#2-矩阵中的连通分量数目" class="headerlink" title="2. 矩阵中的连通分量数目"></a>2. 矩阵中的连通分量数目</h3><h3 id="3-好友关系的连通分量数目"><a href="#3-好友关系的连通分量数目" class="headerlink" title="3. 好友关系的连通分量数目"></a>3. 好友关系的连通分量数目</h3><h3 id="4-填充封闭区域"><a href="#4-填充封闭区域" class="headerlink" title="4. 填充封闭区域"></a>4. 填充封闭区域</h3><h3 id="5-能到达的太平洋和大西洋的区域"><a href="#5-能到达的太平洋和大西洋的区域" class="headerlink" title="5. 能到达的太平洋和大西洋的区域"></a>5. 能到达的太平洋和大西洋的区域</h3><h2 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2><h3 id="1-数字键盘组合"><a href="#1-数字键盘组合" class="headerlink" title="1. 数字键盘组合"></a>1. 数字键盘组合</h3><h3 id="2-IP-地址划分"><a href="#2-IP-地址划分" class="headerlink" title="2. IP 地址划分"></a>2. IP 地址划分</h3><h3 id="3-在矩阵中寻找字符串"><a href="#3-在矩阵中寻找字符串" class="headerlink" title="3. 在矩阵中寻找字符串"></a>3. 在矩阵中寻找字符串</h3><h3 id="4-输出二叉树中所有从根到叶子的路径"><a href="#4-输出二叉树中所有从根到叶子的路径" class="headerlink" title="4. 输出二叉树中所有从根到叶子的路径"></a>4. 输出二叉树中所有从根到叶子的路径</h3><h3 id="5-排列"><a href="#5-排列" class="headerlink" title="5. 排列"></a>5. 排列</h3><h3 id="6-含有相同元素求排列"><a href="#6-含有相同元素求排列" class="headerlink" title="6. 含有相同元素求排列"></a>6. 含有相同元素求排列</h3><h3 id="7-组合"><a href="#7-组合" class="headerlink" title="7. 组合"></a>7. 组合</h3><h3 id="8-组合求和"><a href="#8-组合求和" class="headerlink" title="8. 组合求和"></a>8. 组合求和</h3><h3 id="9-含有相同元素的组合求和"><a href="#9-含有相同元素的组合求和" class="headerlink" title="9. 含有相同元素的组合求和"></a>9. 含有相同元素的组合求和</h3><h3 id="10-1-9-数字的组合求和"><a href="#10-1-9-数字的组合求和" class="headerlink" title="10. 1-9 数字的组合求和"></a>10. 1-9 数字的组合求和</h3><h3 id="11-子集"><a href="#11-子集" class="headerlink" title="11. 子集"></a>11. 子集</h3><h3 id="12-含有相同元素求子集"><a href="#12-含有相同元素求子集" class="headerlink" title="12. 含有相同元素求子集"></a>12. 含有相同元素求子集</h3><h3 id="13-分割字符串使得每个部分都是回文数"><a href="#13-分割字符串使得每个部分都是回文数" class="headerlink" title="13. 分割字符串使得每个部分都是回文数"></a>13. 分割字符串使得每个部分都是回文数</h3><h3 id="14-数独"><a href="#14-数独" class="headerlink" title="14. 数独"></a>14. 数独</h3><h3 id="15-N-皇后"><a href="#15-N-皇后" class="headerlink" title="15. N 皇后"></a>15. N 皇后</h3><h2 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS"></a>BFS</h2><p>宽度优先搜索算法（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源最短路径算法和Prim最小生成树算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p><p>bfs是按一层一层来访问的，所以适合有目标求最短路的步数，你想想层层搜索每次层就代表了一步。bfs优先访问的是兄弟节点，只有这一层全部访问完才能访问下一层，也就是说bfs第几层就代表当前可以走到的位置(结点).而dfs是按递归来实现的，它优先搜索深度，再回溯，优先访问的是没有访问过的子节点<br>DFS多用于连通性问题因为其运行思想与人脑的思维很相似，故解决连通性问题更自然。BFS多用于解决最短路问题，其运行过程中需要储存每一层的信息，所以其运行时需要储存的信息量较大，如果人脑也可储存大量信息的话，理论上人脑也可运行BFS。<br>总的来说多数情况下运行BFS所需的内存会大于DFS需要的内存(DFS一次访问一条路，BFS一次访问多条路)，DFS容易爆栈(栈不易”控制”)，BFS通过控制队列可以很好解决”爆队列”风险。<br>它们两者间各自的优势需要通过实际的问题来具体分析，根据它们各自的特点来应用于不同的问题中才能获得最优的性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;具体学习链接-Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#具体学习链接-Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;具体学习链接:Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;具体学习链接:&lt;a hr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
