<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-13T00:47:11.960Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>528. Random Pick with Weight(medium)</title>
    <link href="http://example.com/2022/09/12/528/"/>
    <id>http://example.com/2022/09/12/528/</id>
    <published>2022-09-13T00:37:41.000Z</published>
    <updated>2022-09-13T00:47:11.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="528-Random-Pick-with-Weight-medium"><a href="#528-Random-Pick-with-Weight-medium" class="headerlink" title="528. Random Pick with Weight(medium)"></a>528. Random Pick with Weight(medium)</h1><h2 id="You-are-given-a-0-indexed-array-of-positive-integers-w-where-w-i-describes-the-weight-of-the-ith-index"><a href="#You-are-given-a-0-indexed-array-of-positive-integers-w-where-w-i-describes-the-weight-of-the-ith-index" class="headerlink" title="You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index."></a>You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.</h2><h2 id="You-need-to-implement-the-function-pickIndex-which-randomly-picks-an-index-in-the-range-0-w-length-1-inclusive-and-returns-it-The-probability-of-picking-an-index-i-is-w-i-sum-w"><a href="#You-need-to-implement-the-function-pickIndex-which-randomly-picks-an-index-in-the-range-0-w-length-1-inclusive-and-returns-it-The-probability-of-picking-an-index-i-is-w-i-sum-w" class="headerlink" title="You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w)."></a>You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).</h2><h2 id="For-example-if-w-1-3-the-probability-of-picking-index-0-is-1-1-3-0-25-i-e-25-and-the-probability-of-picking-index-1-is-3-1-3-0-75-i-e-75"><a href="#For-example-if-w-1-3-the-probability-of-picking-index-0-is-1-1-3-0-25-i-e-25-and-the-probability-of-picking-index-1-is-3-1-3-0-75-i-e-75" class="headerlink" title="For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%)."></a>For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;528-Random-Pick-with-Weight-medium&quot;&gt;&lt;a href=&quot;#528-Random-Pick-with-Weight-medium&quot; class=&quot;headerlink&quot; title=&quot;528. Random Pick with We</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>567. Permutation in String(medium)</title>
    <link href="http://example.com/2022/09/11/567/"/>
    <id>http://example.com/2022/09/11/567/</id>
    <published>2022-09-12T02:16:46.000Z</published>
    <updated>2022-09-12T02:24:37.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="567-Permutation-in-String-medium"><a href="#567-Permutation-in-String-medium" class="headerlink" title="567. Permutation in String(medium)"></a>567. Permutation in String(medium)</h1><h2 id="Given-two-strings-s1-and-s2-return-true-if-s2-contains-a-permutation-of-s1-or-false-otherwise"><a href="#Given-two-strings-s1-and-s2-return-true-if-s2-contains-a-permutation-of-s1-or-false-otherwise" class="headerlink" title="Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise."></a>Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.</h2><h2 id="In-other-words-return-true-if-one-of-s1’s-permutations-is-the-substring-of-s2"><a href="#In-other-words-return-true-if-one-of-s1’s-permutations-is-the-substring-of-s2" class="headerlink" title="In other words, return true if one of s1’s permutations is the substring of s2."></a>In other words, return true if one of s1’s permutations is the substring of s2.</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;567-Permutation-in-String-medium&quot;&gt;&lt;a href=&quot;#567-Permutation-in-String-medium&quot; class=&quot;headerlink&quot; title=&quot;567. Permutation in String(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>1356. Sort Integers by The Number of 1 Bits(easy)</title>
    <link href="http://example.com/2022/09/11/1356/"/>
    <id>http://example.com/2022/09/11/1356/</id>
    <published>2022-09-11T21:18:32.000Z</published>
    <updated>2022-09-12T02:17:08.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1356-Sort-Integers-by-The-Number-of-1-Bits-easy"><a href="#1356-Sort-Integers-by-The-Number-of-1-Bits-easy" class="headerlink" title="1356. Sort Integers by The Number of 1 Bits(easy)"></a>1356. Sort Integers by The Number of 1 Bits(easy)</h1><h2 id="You-are-given-an-integer-array-arr-Sort-the-integers-in-the-array-in-ascending-order-by-the-number-of-1’s-in-their-binary-representation-and-in-case-of-two-or-more-integers-have-the-same-number-of-1’s-you-have-to-sort-them-in-ascending-order"><a href="#You-are-given-an-integer-array-arr-Sort-the-integers-in-the-array-in-ascending-order-by-the-number-of-1’s-in-their-binary-representation-and-in-case-of-two-or-more-integers-have-the-same-number-of-1’s-you-have-to-sort-them-in-ascending-order" class="headerlink" title="You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1’s in their binary representation and in case of two or more integers have the same number of 1’s you have to sort them in ascending order."></a>You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1’s in their binary representation and in case of two or more integers have the same number of 1’s you have to sort them in ascending order.</h2><h2 id="Return-the-array-after-sorting-it"><a href="#Return-the-array-after-sorting-it" class="headerlink" title="Return the array after sorting it."></a>Return the array after sorting it.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [0,1,2,3,4,5,6,7,8]</span><br><span class="line">Output: [0,1,2,4,8,3,5,6,7]</span><br><span class="line">Explantion: [0] is the only integer with 0 bits.</span><br><span class="line">[1,2,4,8] all have 1 bit.</span><br><span class="line">[3,5,6] have 2 bits.</span><br><span class="line">[7] has 3 bits.</span><br><span class="line">The sorted array by bits is [0,1,2,4,8,3,5,6,7]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="python">class Solution:    def sortByBits(self, arr: List[int]) -&gt; List[int]:        return sorted(arr, key = lambda num : (sum((num &gt;&gt; i) &amp; 1 for i in range(32)), num))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1356-Sort-Integers-by-The-Number-of-1-Bits-easy&quot;&gt;&lt;a href=&quot;#1356-Sort-Integers-by-The-Number-of-1-Bits-easy&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>76. Minimum Window Substring(hard)</title>
    <link href="http://example.com/2022/09/11/76/"/>
    <id>http://example.com/2022/09/11/76/</id>
    <published>2022-09-11T20:55:34.000Z</published>
    <updated>2022-09-11T22:04:12.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="76-Minimum-Window-Substring-hard"><a href="#76-Minimum-Window-Substring-hard" class="headerlink" title="76. Minimum Window Substring(hard)"></a>76. Minimum Window Substring(hard)</h1><h2 id="Given-two-strings-s-and-t-of-lengths-m-and-n-respectively-return-the-minimum-window-substring-of-s-such-that-every-character-in-t-including-duplicates-is-included-in-the-window-If-there-is-no-such-substring-return-the-empty-string-“”"><a href="#Given-two-strings-s-and-t-of-lengths-m-and-n-respectively-return-the-minimum-window-substring-of-s-such-that-every-character-in-t-including-duplicates-is-included-in-the-window-If-there-is-no-such-substring-return-the-empty-string-“”" class="headerlink" title="Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”."></a>Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”.</h2><h2 id="The-testcases-will-be-generated-such-that-the-answer-is-unique"><a href="#The-testcases-will-be-generated-such-that-the-answer-is-unique" class="headerlink" title="The testcases will be generated such that the answer is unique."></a>The testcases will be generated such that the answer is unique.</h2><h2 id="A-substring-is-a-contiguous-sequence-of-characters-within-the-string"><a href="#A-substring-is-a-contiguous-sequence-of-characters-within-the-string" class="headerlink" title="A substring is a contiguous sequence of characters within the string."></a>A substring is a contiguous sequence of characters within the string.</h2><p>这道题是滑动窗口的经典题目，滑动窗口算法的思路是这样：</p><ol><li>我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引左闭右开区间 [left, right) 称为一个「窗口」。</li></ol><p>PS：理论上你可以设计两端都开或者两端都闭的区间，但设计为左闭右开区间是最方便处理的。因为这样初始化 left = right = 0 时区间 [0, 0) 中没有元素，但只要让 right 向右移动（扩大）一位，区间 [0, 1) 就包含一个元素 0 了。如果你设置为两端都开的区间，那么让 right 向右移动一位后开区间 (0, 1) 仍然没有元素；如果你设置为两端都闭的区间，那么初始区间 [0, 0] 就包含了一个元素。这两种情况都会给边界处理带来不必要的麻烦。</p><ol start="2"><li><p>我们先不断地增加 right 指针扩大窗口 [left, right)，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。</p></li><li><p>此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right)，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。</p></li><li><p>重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。</p></li></ol><p>这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。</p><p>下面画图理解一下，needs 和 window 相当于计数器，分别记录 T 中字符出现次数和「窗口」中的相应字符的出现次数。</p><h4 id="C-解法"><a href="#C-解法" class="headerlink" title="C++解法"></a><a href="https://labuladong.github.io/algo/2/20/27/">C++解法</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; need, window;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录最小覆盖子串的起始索引及长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, len = INT_MAX;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        <span class="keyword">char</span> c = s[right];</span><br><span class="line">        <span class="comment">// 扩大窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (window[c] == need[c])</span><br><span class="line">                valid++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (valid == need.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">// 在这里更新最小覆盖子串</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; len) &#123;</span><br><span class="line">                start = left;</span><br><span class="line">                len = right - left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            <span class="keyword">char</span> d = s[left];</span><br><span class="line">            <span class="comment">// 缩小窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span> (need.<span class="built_in">count</span>(d)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (window[d] == need[d])</span><br><span class="line">                    valid--;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;                    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回最小覆盖子串</span></span><br><span class="line">    <span class="keyword">return</span> len == INT_MAX ?</span><br><span class="line">        <span class="string">&quot;&quot;</span> : s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python解法"><a href="#python解法" class="headerlink" title="python解法"></a><a href="https://leetcode.com/problems/minimum-window-substring/discuss/26804/12-lines-Python/1079619">python解法</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># hash table to store the required char frequency</span></span><br><span class="line">        need = collections.Counter(t)            </span><br><span class="line"></span><br><span class="line">        <span class="comment"># total character count we need to care about</span></span><br><span class="line">        missing = <span class="built_in">len</span>(t)                         </span><br><span class="line"></span><br><span class="line">        <span class="comment"># windowStart and windowEnd to be</span></span><br><span class="line">        windowStart, windowEnd = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># iterate over s starting over index 1</span></span><br><span class="line">        <span class="keyword">for</span> j, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s, <span class="number">1</span>): <span class="comment"># j is index,char is value         </span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># if char is required then decrease missing</span></span><br><span class="line">            <span class="keyword">if</span> need[char] &gt; <span class="number">0</span>:                   </span><br><span class="line">                missing -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># decrease the freq of char from need (maybe be negative - which basically denotes</span></span><br><span class="line">            <span class="comment">#   that we have few extra characters which are not required but present in between current window)</span></span><br><span class="line">            need[char] -= <span class="number">1</span>                      </span><br><span class="line"></span><br><span class="line">            <span class="comment"># we found a valid window</span></span><br><span class="line">            <span class="keyword">if</span> missing == <span class="number">0</span>:                     </span><br><span class="line">                <span class="comment"># chars from start to find the real windowStart</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> need[s[i]] &lt; <span class="number">0</span>:  </span><br><span class="line">                    need[s[i]] += <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># if it&#x27;s only one char case or curr window is smaller, then update window</span></span><br><span class="line">                <span class="keyword">if</span> windowEnd == <span class="number">0</span> <span class="keyword">or</span> j-i &lt; windowEnd-windowStart:  </span><br><span class="line">                    windowStart, windowEnd = i, j</span><br><span class="line"></span><br><span class="line">                <span class="comment"># now resetting the window to make it invalid</span></span><br><span class="line">                <span class="comment"># sure the first appearing char satisfies need[char]&gt;0</span></span><br><span class="line">                need[s[i]] += <span class="number">1</span>          </span><br><span class="line"></span><br><span class="line">                <span class="comment"># missed this first char, so add missing by 1</span></span><br><span class="line">                missing += <span class="number">1</span>                     </span><br><span class="line"></span><br><span class="line">                <span class="comment">#update i to windowStart+1 for next window</span></span><br><span class="line">                i += <span class="number">1</span>                          </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s[windowStart:windowEnd]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;76-Minimum-Window-Substring-hard&quot;&gt;&lt;a href=&quot;#76-Minimum-Window-Substring-hard&quot; class=&quot;headerlink&quot; title=&quot;76. Minimum Window Substring</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill8-two_pointers</title>
    <link href="http://example.com/2022/09/11/LeetCode-skill8-two-pointers/"/>
    <id>http://example.com/2022/09/11/LeetCode-skill8-two-pointers/</id>
    <published>2022-09-11T20:34:44.000Z</published>
    <updated>2022-09-12T02:16:19.364Z</updated>
    
    <content type="html"><![CDATA[<p>滑动窗口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滑动窗口算法框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slidingWindow</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; window;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        <span class="keyword">char</span> c = s[right];</span><br><span class="line">        <span class="comment">// 增大窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*** debug 输出的位置 ***/</span></span><br><span class="line">        printf(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right);</span><br><span class="line">        <span class="comment">/********************/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            <span class="keyword">char</span> d = s[left];</span><br><span class="line">            <span class="comment">// 缩小窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slidingWindow</span>(<span class="params">string s</span>):</span></span><br><span class="line">    </span><br><span class="line">    window=&#123;&#125;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> right&lt;<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="comment">#c 是将移入窗口的字符</span></span><br><span class="line">        c=s[right]</span><br><span class="line">        <span class="comment"># 增大窗口</span></span><br><span class="line">        right+=<span class="number">1</span></span><br><span class="line">        <span class="comment"># 进行窗口内数据的一系列更新</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">#*** debug 输出的位置 ***/</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right)</span><br><span class="line">        <span class="comment">#********************/</span></span><br><span class="line">        <span class="comment"># 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (window needs shrink) </span><br><span class="line">            <span class="comment">#d 是将移出窗口的字符</span></span><br><span class="line">            d = s[left]</span><br><span class="line">            <span class="comment">#缩小窗口</span></span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">            <span class="comment">#进行窗口内数据的一系列更新</span></span><br><span class="line">            ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;滑动窗口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>1360. Number of Days Between Two Dates</title>
    <link href="http://example.com/2022/09/09/1360/"/>
    <id>http://example.com/2022/09/09/1360/</id>
    <published>2022-09-09T20:43:14.000Z</published>
    <updated>2022-09-11T20:35:16.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1360-Number-of-Days-Between-Two-Dates-easy"><a href="#1360-Number-of-Days-Between-Two-Dates-easy" class="headerlink" title="1360. Number of Days Between Two Dates(easy)"></a>1360. Number of Days Between Two Dates(easy)</h1><h2 id="Write-a-program-to-count-the-number-of-days-between-two-dates"><a href="#Write-a-program-to-count-the-number-of-days-between-two-dates" class="headerlink" title="Write a program to count the number of days between two dates."></a>Write a program to count the number of days between two dates.</h2><h2 id="The-two-dates-are-given-as-strings-their-format-is-YYYY-MM-DD-as-shown-in-the-examples"><a href="#The-two-dates-are-given-as-strings-their-format-is-YYYY-MM-DD-as-shown-in-the-examples" class="headerlink" title="The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples."></a>The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: date1 = &quot;2019-06-29&quot;, date2 = &quot;2019-06-30&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解:"></a><a href="https://leetcode.com/problems/number-of-days-between-two-dates/discuss/517582/Python-Magical-Formula">官方题解</a>:</h3><p>When m=1 or m=2 (January or February), we let m=13 or m=14 and let y decreased by 1. Imagine it is 13th or 14th month of the last year. By doing that, we let the magical formula also work for those two months. (153 * m + 8) // 5 is just a carefully designed way to record the days of each month. More specifically, it is designed to record the difference of days between two months. Suppose we have March 1st and April 1st, (153 * 3 + 8) // 5 = 93 while (153 * 4 + 8) // 5 = 124, the difference is 31 which is the number of days in March. Suppose we have April 1st to May 1st, (153 * 4 + 8) // 5 = 124 and (153 * 5 + 8) // 5 = 154, the difference is now 30 which is the number of days in April. You can also check other months.</p><p>I learned this formula somewhere else before. It is not something to come up with in minutes.<br>首先把1月2月加12当作13和14月，这样使得他们也可以套用公式<br>这里有一个关键的函数(153 * m + 8) // 5，通过前后月代入以后的相减，可以区分不同月份的长度，确实是非常神奇</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span>(<span class="params">self, date1: <span class="built_in">str</span>, date2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">date</span>):</span></span><br><span class="line">            y, m, d = <span class="built_in">map</span>(<span class="built_in">int</span>, date.split(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> m &lt; <span class="number">3</span>:</span><br><span class="line">                m += <span class="number">12</span></span><br><span class="line">                y -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">365</span> * y + y // <span class="number">4</span> + y // <span class="number">400</span> - y // <span class="number">100</span> + d + (<span class="number">153</span> * m + <span class="number">8</span>) // <span class="number">5</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(f(date1) - f(date2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1360-Number-of-Days-Between-Two-Dates-easy&quot;&gt;&lt;a href=&quot;#1360-Number-of-Days-Between-Two-Dates-easy&quot; class=&quot;headerlink&quot; title=&quot;1360. Nu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>practicecodesignal4</title>
    <link href="http://example.com/2022/09/05/practicecodesignal4/"/>
    <id>http://example.com/2022/09/05/practicecodesignal4/</id>
    <published>2022-09-06T00:31:02.000Z</published>
    <updated>2022-09-06T00:42:43.655Z</updated>
    
    <content type="html"><![CDATA[<p>def samesign(a,b):<br>    if a/abs(a) == b/abs(b):<br>        return True<br>    else:<br>        return False</p><p>def countSawSubarrays(arr):<br>    n = len(arr)</p><pre><code>if n&lt;2:    return 0s = 0e = 1count = 0while(e&lt;n):    sign = arr[e] - arr[s]    while(e&lt;n and arr[e] != arr[e-1] and samesign(arr[e] - arr[e-1], sign)):        sign = -1*sign        e+=1    size = e-s    if (size==1):        e+=1    count += (size*(size-1))//2    s = e-1    e = s+1return count</code></pre><p>arr1 = [9,8,7,6,5]<br>print(countSawSubarrays(arr1))<br>arr2 = [1,2,1,3,4,-2]<br>print(countSawSubarrays(arr2))<br>arr3 = [1,2,1,2,1]<br>print(countSawSubarrays(arr3))<br>arr4 = [10,10,10]<br>print(countSawSubarrays(arr4))</p><p>def solution(matrix, a, b):<br>    if a + b - 1 &gt; min(len(matrix), len(matrix[0])):<br>        return 0</p><pre><code>ret = 0for w, h in ((a, b), (b, a)):    # for every possible leftmost axb/bxa rectangle...    for start in range(min(len(matrix), len(matrix[0])) - (a + b - 1) + 1):        i = start        cur = 0        deques = []        j1 = j2 = w - 1        # build the rectangle         while j1 &lt;= j2:            for k in range(j1, j2 + 1):                cur += matrix[i][k]            deques.append((j1, j2))             j1 += (-1 if i - start &lt; w - 1 else 1)            j2 += (1 if i - start &lt; h - 1 else -1)            i += 1                stop = False        # slide it to the right until you can&#39;t anymore        while True:            ret = max(ret, cur)                        for ind, tup in enumerate(deques):                j1, j2 = tup                i = start + ind                if j2 == len(matrix[0]) - 1:                    stop = True                    break                j2 += 1                cur += matrix[i][j2] - matrix[i][j1]                j1 += 1                deques[ind] = (j1, j2)            if stop:                breakreturn ret</code></pre><p>You are given an array of integers numbers and two integers left and right. You task is to calculate a boolean array result, where result[i] = true if there exists an integer x, such that numbers[i] = (i + 1) * x and left ≤ x ≤ right. Otherwise, result[i] should be set to false.</p><p>You are given two strings - pattern and source. The first string pattern contains only the symbols 0 and 1, and the second string source contains only lowercase English letters.</p><p>Let’s say that pattern matches a substring source[l..r] of source if the following three conditions are met:<br>they have equal length,<br>for each 0 in pattern the corresponding letter in the substring is a vowel,<br>for each 1 in pattern the corresponding letter is a consonant.<br>Your task is to calculate the number of substrings of source that match pattern.</p><p>Note: In this task we define the vowels as ‘a’, ‘e’, ‘i’, ‘o’, ‘u’, and ‘y’. All other letters are consonants.</p><p>Given a matrix of integers, we’d like to consider the sum of the elements within the area of a 45° rotated rectangle. More formally, the area is bounded by two diagonals parallel to the main diagonal and two diagonals parallel to the secondary diagonal. The dimensions of the rotated rectangle are defined by the number of elements along the borders of the rectangle.</p><p>A sawtooth sequence is a sequence of numbers that alternate between increasing and decreasing. In other words, each element is either strictly greater than its neighbouring elements or strictly less than its neighbouring elements.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;def samesign(a,b):&lt;br&gt;    if a/abs(a) == b/abs(b):&lt;br&gt;        return True&lt;br&gt;    else:&lt;br&gt;        return False&lt;/p&gt;
&lt;p&gt;def countSawSubarra</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-skill7-box_blur</title>
    <link href="http://example.com/2022/09/03/LeetCode-skill7-box-blur/"/>
    <id>http://example.com/2022/09/03/LeetCode-skill7-box-blur/</id>
    <published>2022-09-03T20:40:41.000Z</published>
    <updated>2022-09-03T20:41:23.975Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_matrix</span>(<span class="params">square</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; This function will calculate the value x</span></span><br><span class="line"><span class="string">(i.e. blurred pixel value) for each 3 * 3 blur image.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tot_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate sum of all the pixels in 3 * 3 matrix</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">tot_sum += square[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tot_sum // <span class="number">9</span> <span class="comment"># return the average of the sum of pixels</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boxBlur</span>(<span class="params">image</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This function will calculate the blurred</span></span><br><span class="line"><span class="string">image for given n * n image.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">square = [] <span class="comment"># This will store the 3 * 3 matrix</span></span><br><span class="line"><span class="comment"># which will be used to find its blurred pixel</span></span><br><span class="line"></span><br><span class="line">square_row = [] <span class="comment"># This will store one row of a 3 * 3 matrix and</span></span><br><span class="line"><span class="comment"># will be appended in square</span></span><br><span class="line"></span><br><span class="line">blur_row = [] <span class="comment"># Here we will store the resulting blurred</span></span><br><span class="line"><span class="comment"># pixels possible in one row</span></span><br><span class="line"><span class="comment"># and will append this in the blur_img</span></span><br><span class="line"></span><br><span class="line">blur_img = [] <span class="comment"># This is the resulting blurred image</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># number of rows in the given image</span></span><br><span class="line">n_rows = <span class="built_in">len</span>(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># number of columns in the given image</span></span><br><span class="line">n_col = <span class="built_in">len</span>(image[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># rp is row pointer and cp is column pointer</span></span><br><span class="line">rp, cp = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This while loop will be used to</span></span><br><span class="line"><span class="comment"># calculate all the blurred pixel in the first row</span></span><br><span class="line"><span class="keyword">while</span> rp &lt;= n_rows - <span class="number">3</span>:</span><br><span class="line"><span class="keyword">while</span> cp &lt;= n_col-<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rp, rp + <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cp, cp + <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># append all the pixels in a row of 3 * 3 matrix</span></span><br><span class="line">square_row.append(image[i][j])</span><br><span class="line"></span><br><span class="line"><span class="comment"># append the row in the square i.e. 3 * 3 matrix</span></span><br><span class="line">square.append(square_row)</span><br><span class="line">square_row = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate the blurred pixel for given 3 * 3 matrix</span></span><br><span class="line"><span class="comment"># i.e. square and append it in blur_row</span></span><br><span class="line">blur_row.append(square_matrix(square))</span><br><span class="line">square = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># increase the column pointer</span></span><br><span class="line">cp = cp + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append the blur_row in blur_image</span></span><br><span class="line">blur_img.append(blur_row)</span><br><span class="line">blur_row = []</span><br><span class="line">rp = rp + <span class="number">1</span> <span class="comment"># increase row pointer</span></span><br><span class="line">cp = <span class="number">0</span> <span class="comment"># start column pointer from 0 again</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Return the resulting pixel matrix</span></span><br><span class="line"><span class="keyword">return</span> blur_img</span><br><span class="line"></span><br><span class="line"><span class="comment"># Driver code</span></span><br><span class="line">image = [[<span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">6</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(boxBlur(image))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>codesignal-reverseInParentheses</title>
    <link href="http://example.com/2022/09/02/codesignal-reverseInParentheses/"/>
    <id>http://example.com/2022/09/02/codesignal-reverseInParentheses/</id>
    <published>2022-09-02T15:42:48.000Z</published>
    <updated>2022-09-02T19:40:29.927Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">inputString</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Reverse the strings contained in each pair of matching parentheses,</span></span><br><span class="line"><span class="string">    starting from the innermost pair. The results string should not contain</span></span><br><span class="line"><span class="string">    any parentheses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_parentheses(&#x27;a(bc)de&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;acbde&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_parentheses(</span></span><br><span class="line"><span class="string">    ...     &#x27;The ((quick (brown) (fox) jumps over the lazy) dog)&#x27;</span></span><br><span class="line"><span class="string">    ... )</span></span><br><span class="line"><span class="string">    &#x27;The god quick nworb xof jumps over the lazy&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    chars = <span class="built_in">list</span>(inputString)</span><br><span class="line">    open_bracket_indexes = []</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(chars):</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            open_bracket_indexes.append(i)</span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            j = open_bracket_indexes.pop()</span><br><span class="line">            chars[j:i] = chars[i:j:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> open_bracket_indexes:</span><br><span class="line">        <span class="keyword">raise</span> ArgumentError(<span class="string">&#x27;Unclosed parenthesis&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> chars <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;()&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="python function" scheme="http://example.com/tags/python-function/"/>
    
  </entry>
  
  <entry>
    <title>485. Max Consecutive Ones(easy)</title>
    <link href="http://example.com/2022/09/01/485/"/>
    <id>http://example.com/2022/09/01/485/</id>
    <published>2022-09-02T02:43:39.000Z</published>
    <updated>2022-09-02T02:51:09.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="485-Max-Consecutive-Ones-easy"><a href="#485-Max-Consecutive-Ones-easy" class="headerlink" title="485. Max Consecutive Ones(easy)"></a>485. Max Consecutive Ones(easy)</h1><h2 id="Given-a-binary-array-nums-return-the-maximum-number-of-consecutive-1’s-in-the-array"><a href="#Given-a-binary-array-nums-return-the-maximum-number-of-consecutive-1’s-in-the-array" class="headerlink" title="Given a binary array nums, return the maximum number of consecutive 1’s in the array."></a>Given a binary array nums, return the maximum number of consecutive 1’s in the array.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,0,1,1,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.</span><br></pre></td></tr></table></figure><p>这题没什么好说的，比较简单，设置两个独立变量然后遍历就行了</p><pre><code class="python">class Solution:    def findMaxConsecutiveOnes(self, nums: List[int]) -&gt; int:        cnt=0        ans=0        for num in nums:            if num==1:                cnt+=1                ans = max(ans,cnt)            elif num==0:                cnt=0        return ans</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;485-Max-Consecutive-Ones-easy&quot;&gt;&lt;a href=&quot;#485-Max-Consecutive-Ones-easy&quot; class=&quot;headerlink&quot; title=&quot;485. Max Consecutive Ones(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>1909. Remove One Element to Make the Array Strictly Increasing(easy)</title>
    <link href="http://example.com/2022/09/01/1909/"/>
    <id>http://example.com/2022/09/01/1909/</id>
    <published>2022-09-01T17:02:19.000Z</published>
    <updated>2022-09-02T02:50:59.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy"><a href="#1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy" class="headerlink" title="1909. Remove One Element to Make the Array Strictly Increasing(easy)"></a>1909. Remove One Element to Make the Array Strictly Increasing(easy)</h1><h2 id="Given-a-0-indexed-integer-array-nums-return-true-if-it-can-be-made-strictly-increasing-after-removing-exactly-one-element-or-false-otherwise-If-the-array-is-already-strictly-increasing-return-true"><a href="#Given-a-0-indexed-integer-array-nums-return-true-if-it-can-be-made-strictly-increasing-after-removing-exactly-one-element-or-false-otherwise-If-the-array-is-already-strictly-increasing-return-true" class="headerlink" title="Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true."></a>Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.</h2><h2 id="The-array-nums-is-strictly-increasing-if-nums-i-1-lt-nums-i-for-each-index-1-lt-i-lt-nums-length"><a href="#The-array-nums-is-strictly-increasing-if-nums-i-1-lt-nums-i-for-each-index-1-lt-i-lt-nums-length" class="headerlink" title="The array nums is strictly increasing if nums[i - 1] &lt; nums[i] for each index (1 &lt;= i &lt; nums.length)."></a>The array nums is strictly increasing if nums[i - 1] &lt; nums[i] for each index (1 &lt;= i &lt; nums.length).</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,10,5,7]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].</span><br><span class="line">[1,2,5,7] is strictly increasing, so return true.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canBeIncreasing</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># 检查数组 nums 在删去下标为 idx 的元素后是否严格递增</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">idx: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">                prev, curr = i - <span class="number">1</span>, i</span><br><span class="line">                <span class="keyword">if</span> prev &gt;= idx:</span><br><span class="line">                    prev += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curr &gt;= idx:</span><br><span class="line">                    curr += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nums[curr] &lt;= nums[prev]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="comment"># 寻找非递增相邻下标对</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> check(i) <span class="keyword">or</span> check(i - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode.cn/problems/remove-one-element-to-make-the-array-strictly-increasing/solution/shan-chu-yi-ge-yuan-su-shi-shu-zu-yan-ge-tnr7/">https://leetcode.cn/problems/remove-one-element-to-make-the-array-strictly-increasing/solution/shan-chu-yi-ge-yuan-su-shi-shu-zu-yan-ge-tnr7/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy&quot;&gt;&lt;a href=&quot;#1909-Remove-One-Element-to-Make-the-Array-Strictly-Inc</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>59. Spiral Matrix II(medium)</title>
    <link href="http://example.com/2022/08/31/59/"/>
    <id>http://example.com/2022/08/31/59/</id>
    <published>2022-08-31T21:58:01.000Z</published>
    <updated>2022-09-01T03:30:12.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="59-Spiral-Matrix-II-medium"><a href="#59-Spiral-Matrix-II-medium" class="headerlink" title="59. Spiral Matrix II(medium)"></a>59. Spiral Matrix II(medium)</h1><h2 id="Given-a-positive-integer-n-generate-an-n-x-n-matrix-filled-with-elements-from-1-to-n2-in-spiral-order"><a href="#Given-a-positive-integer-n-generate-an-n-x-n-matrix-filled-with-elements-from-1-to-n2-in-spiral-order" class="headerlink" title="Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order."></a>Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.</h2><p>这道题和54. Spiral Matrix(medium)几乎一模一样<br><a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/">leetcode官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        matrix = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                matrix[top][col] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                matrix[row][right] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    matrix[bottom][col] = num</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    matrix[row][left] = num</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">            top += <span class="number">1</span></span><br><span class="line">            bottom -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;59-Spiral-Matrix-II-medium&quot;&gt;&lt;a href=&quot;#59-Spiral-Matrix-II-medium&quot; class=&quot;headerlink&quot; title=&quot;59. Spiral Matrix II(medium)&quot;&gt;&lt;/a&gt;59. Sp</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Spiral" scheme="http://example.com/tags/Spiral/"/>
    
    <category term="Traversal" scheme="http://example.com/tags/Traversal/"/>
    
  </entry>
  
  <entry>
    <title>151. Reverse Words in a String(medium)</title>
    <link href="http://example.com/2022/08/31/151/"/>
    <id>http://example.com/2022/08/31/151/</id>
    <published>2022-08-31T21:24:18.000Z</published>
    <updated>2022-08-31T21:31:58.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="151-Reverse-Words-in-a-String-medium"><a href="#151-Reverse-Words-in-a-String-medium" class="headerlink" title="151. Reverse Words in a String(medium)"></a>151. Reverse Words in a String(medium)</h1><h2 id="Given-an-input-string-s-reverse-the-order-of-the-words"><a href="#Given-an-input-string-s-reverse-the-order-of-the-words" class="headerlink" title="Given an input string s, reverse the order of the words."></a>Given an input string s, reverse the order of the words.</h2><h2 id="A-word-is-defined-as-a-sequence-of-non-space-characters-The-words-in-s-will-be-separated-by-at-least-one-space"><a href="#A-word-is-defined-as-a-sequence-of-non-space-characters-The-words-in-s-will-be-separated-by-at-least-one-space" class="headerlink" title="A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space."></a>A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.</h2><h2 id="Return-a-string-of-the-words-in-reverse-order-concatenated-by-a-single-space"><a href="#Return-a-string-of-the-words-in-reverse-order-concatenated-by-a-single-space" class="headerlink" title="Return a string of the words in reverse order concatenated by a single space."></a>Return a string of the words in reverse order concatenated by a single space.</h2><h2 id="Note-that-s-may-contain-leading-or-trailing-spaces-or-multiple-spaces-between-two-words-The-returned-string-should-only-have-a-single-space-separating-the-words-Do-not-include-any-extra-spaces"><a href="#Note-that-s-may-contain-leading-or-trailing-spaces-or-multiple-spaces-between-two-words-The-returned-string-should-only-have-a-single-space-separating-the-words-Do-not-include-any-extra-spaces" class="headerlink" title="Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces."></a>Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;the sky is blue&quot;</span><br><span class="line">Output: &quot;blue is sky the&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/solution/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/">官方题解</a></h3><p>很多语言对字符串提供了 split（拆分），reverse（翻转）和 join（连接）等方法，因此我们可以简单的调用内置的 API 完成操作：</p><p>使用 split 将字符串按空格分割成字符串数组；<br>使用 reverse 将字符串数组进行反转；<br>使用 join 方法将字符串数组拼成一个字符串。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">reversed</span>(s.split()))</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(n)O(n)，其中 nn 为输入字符串的长度。</p><p>空间复杂度：O(n)O(n)，用来存储字符串分割之后的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;151-Reverse-Words-in-a-String-medium&quot;&gt;&lt;a href=&quot;#151-Reverse-Words-in-a-String-medium&quot; class=&quot;headerlink&quot; title=&quot;151. Reverse Words i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>54. Spiral Matrix(medium)</title>
    <link href="http://example.com/2022/08/31/54/"/>
    <id>http://example.com/2022/08/31/54/</id>
    <published>2022-08-31T20:34:17.000Z</published>
    <updated>2022-08-31T21:36:02.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="54-Spiral-Matrix-medium"><a href="#54-Spiral-Matrix-medium" class="headerlink" title="54. Spiral Matrix(medium)"></a>54. Spiral Matrix(medium)</h1><h2 id="Given-an-m-x-n-matrix-return-all-elements-of-the-matrix-in-spiral-order"><a href="#Given-an-m-x-n-matrix-return-all-elements-of-the-matrix-in-spiral-order" class="headerlink" title="Given an m x n matrix, return all elements of the matrix in spiral order."></a>Given an m x n matrix, return all elements of the matrix in spiral order.</h2><h3 id="leetcode官方题解"><a href="#leetcode官方题解" class="headerlink" title="leetcode官方题解"></a><a href="https://leetcode.cn/problems/spiral-matrix/solution/luo-xuan-ju-zhen-by-leetcode-solution/">leetcode官方题解</a></h3><p>方法二：按层模拟<br>可以将矩阵看成若干层，首先输出最外层的元素，其次输出次外层的元素，直到输出最内层的元素。</p><p>定义矩阵的第 kk 层是到最近边界距离为 kk 的所有顶点。例如，下图矩阵最外层元素都是第 11 层，次外层元素都是第 22 层，剩下的元素都是第 33 层。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[1, 1, 1, 1, 1, 1, 1],</span><br><span class="line"> [1, 2, 2, 2, 2, 2, 1],</span><br><span class="line"> [1, 2, 3, 3, 3, 2, 1],</span><br><span class="line"> [1, 2, 2, 2, 2, 2, 1],</span><br><span class="line"> [1, 1, 1, 1, 1, 1, 1]]</span><br></pre></td></tr></table></figure><p>对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 (top,left)，右下角位于 (bottom,right)，按照如下顺序遍历当前层的元素。</p><p>从左到右遍历上侧元素，依次为 (top,left) 到 (top,right)。</p><p>从上到下遍历右侧元素，依次为 (top+1,right) 到 (bottom,right)。</p><p>如果 left &lt; right 且 top &lt; bottom，则从右到左遍历下侧元素，依次为 (bottom,right−1) 到 (bottom,left+1)，以及从下到上遍历左侧元素，依次为 (bottom,left) 到 (top+1,left)。</p><p>遍历完当前层的元素之后，将 left 和 top 分别增加 1，将 right 和 bottom 分别减少 1，进入下一层继续遍历，直到遍历完所有元素为止。<br><img src="https://assets.leetcode-cn.com/solution-static/54/54_fig1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        order = <span class="built_in">list</span>()</span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, columns - <span class="number">1</span>, <span class="number">0</span>, rows - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[top][column])</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[row][right])</span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[bottom][column])</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[row][left])</span><br><span class="line">            left, right, top, bottom = left + <span class="number">1</span>, right - <span class="number">1</span>, top + <span class="number">1</span>, bottom - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;54-Spiral-Matrix-medium&quot;&gt;&lt;a href=&quot;#54-Spiral-Matrix-medium&quot; class=&quot;headerlink&quot; title=&quot;54. Spiral Matrix(medium)&quot;&gt;&lt;/a&gt;54. Spiral Matr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Spiral" scheme="http://example.com/tags/Spiral/"/>
    
    <category term="Traversal" scheme="http://example.com/tags/Traversal/"/>
    
  </entry>
  
  <entry>
    <title>36. Valid Sudoku(medium)</title>
    <link href="http://example.com/2022/08/31/36/"/>
    <id>http://example.com/2022/08/31/36/</id>
    <published>2022-08-31T18:52:00.000Z</published>
    <updated>2022-08-31T21:31:41.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="36-Valid-Sudoku-medium"><a href="#36-Valid-Sudoku-medium" class="headerlink" title="36. Valid Sudoku(medium)"></a>36. Valid Sudoku(medium)</h1><h2 id="Determine-if-a-9-x-9-Sudoku-board-is-valid-Only-the-filled-cells-need-to-be-validated-according-to-the-following-rules"><a href="#Determine-if-a-9-x-9-Sudoku-board-is-valid-Only-the-filled-cells-need-to-be-validated-according-to-the-following-rules" class="headerlink" title="Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:"></a>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</h2><ol><li>Each row must contain the digits 1-9 without repetition.</li><li>Each column must contain the digits 1-9 without repetition.</li><li>Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.<h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3></li></ol><h4 id="A-Sudoku-board-partially-filled-could-be-valid-but-is-not-necessarily-solvable"><a href="#A-Sudoku-board-partially-filled-could-be-valid-but-is-not-necessarily-solvable" class="headerlink" title="A Sudoku board (partially filled) could be valid but is not necessarily solvable."></a>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</h4><h4 id="Only-the-filled-cells-need-to-be-validated-according-to-the-mentioned-rules"><a href="#Only-the-filled-cells-need-to-be-validated-according-to-the-mentioned-rules" class="headerlink" title="Only the filled cells need to be validated according to the mentioned rules."></a>Only the filled cells need to be validated according to the mentioned rules.</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        N = <span class="number">9</span></span><br><span class="line">        <span class="comment"># Use binary number to check previous occurrence</span></span><br><span class="line">        rows = [<span class="number">0</span>] * N</span><br><span class="line">        cols = [<span class="number">0</span>] * N</span><br><span class="line">        boxes = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="comment"># Check if the position is filled with number</span></span><br><span class="line">                <span class="keyword">if</span> board[r][c] == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                pos = <span class="built_in">int</span>(board[r][c]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the row</span></span><br><span class="line">                <span class="keyword">if</span> rows[r] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                rows[r] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the column</span></span><br><span class="line">                <span class="keyword">if</span> cols[c] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                cols[c] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the box</span></span><br><span class="line">                idx = (r // <span class="number">3</span>) * <span class="number">3</span> + c // <span class="number">3</span></span><br><span class="line">                <span class="keyword">if</span> boxes[idx] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                boxes[idx] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/valid-sudoku/solution/er-xu-cheng-ming-jiu-xu-zui-python3ha-xi-szko/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line"></span><br><span class="line">        row = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        col = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        block = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    num = <span class="built_in">int</span>(board[i][j]) - <span class="number">1</span></span><br><span class="line">                    b = (i // <span class="number">3</span>) * <span class="number">3</span> + j // <span class="number">3</span></span><br><span class="line">                    <span class="keyword">if</span> row[i][num] <span class="keyword">or</span> col[j][num] <span class="keyword">or</span> block[b][num]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row[i][num] = col[j][num] = block[b][num] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;36-Valid-Sudoku-medium&quot;&gt;&lt;a href=&quot;#36-Valid-Sudoku-medium&quot; class=&quot;headerlink&quot; title=&quot;36. Valid Sudoku(medium)&quot;&gt;&lt;/a&gt;36. Valid Sudoku(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>48. Rotate Image(medium)</title>
    <link href="http://example.com/2022/08/30/48/"/>
    <id>http://example.com/2022/08/30/48/</id>
    <published>2022-08-30T21:26:38.000Z</published>
    <updated>2022-08-31T00:18:14.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="48-Rotate-Image-medium"><a href="#48-Rotate-Image-medium" class="headerlink" title="48. Rotate Image(medium)"></a>48. Rotate Image(medium)</h1><h2 id="You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise"><a href="#You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise" class="headerlink" title="You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise)."></a>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</h2><h2 id="You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation"><a href="#You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation" class="headerlink" title="You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."></a>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p>这题有一个非常巧妙的用翻转代替旋转的方法，<br>作为例子，<br>$$<br> \begin{bmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{bmatrix} \tag{1}<br>$$<br>先将其通过水平轴翻转得到：</p><p>$$<br> \begin{bmatrix}<br>   7 &amp; 8 &amp; 9 \<br>   4 &amp; 5 &amp; 6 \<br>   1 &amp; 2 &amp; 3<br>  \end{bmatrix} \tag{2}<br>$$  </p><p>再根据主对角线翻转得到：<br>$$<br> \begin{bmatrix}<br>   7 &amp; 4 &amp; 1 \<br>   8 &amp; 5 &amp; 2 \<br>   9 &amp; 6 &amp; 3<br>  \end{bmatrix} \tag{3}<br>$$  </p><p>这样就可以看出来了，clockwise旋转90°就相当于先水平翻转再根据主对角线翻转</p><p><a href="https://leetcode.cn/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                matrix[i][j],matrix[n-i-<span class="number">1</span>][j]=matrix[n-i-<span class="number">1</span>][j],matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;48-Rotate-Image-medium&quot;&gt;&lt;a href=&quot;#48-Rotate-Image-medium&quot; class=&quot;headerlink&quot; title=&quot;48. Rotate Image(medium)&quot;&gt;&lt;/a&gt;48. Rotate Image(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1094. Car Pooling(medium)</title>
    <link href="http://example.com/2022/08/30/1094/"/>
    <id>http://example.com/2022/08/30/1094/</id>
    <published>2022-08-30T21:04:57.000Z</published>
    <updated>2022-08-31T00:18:00.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1094-Car-Pooling-medium"><a href="#1094-Car-Pooling-medium" class="headerlink" title="1094. Car Pooling(medium)"></a>1094. Car Pooling(medium)</h1><h2 id="There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west"><a href="#There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west" class="headerlink" title="There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west)."></a>There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</h2><h2 id="You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location"><a href="#You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location" class="headerlink" title="You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location."></a>You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location.</h2><h2 id="Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise"><a href="#Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise" class="headerlink" title="Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise."></a>Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>差分数组经典题</p><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/car-pooling/solution/1094-pin-che-python-chai-fen-shu-zu-by-f-yvh7/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">carPooling</span>(<span class="params">self, trips: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], capacity: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="comment"># 确定最多有几站-&gt;数组长度</span></span><br><span class="line">        stations = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> change_list <span class="keyword">in</span> trips:</span><br><span class="line">            <span class="keyword">if</span> change_list[<span class="number">2</span>]+<span class="number">1</span> &gt; stations:</span><br><span class="line">                stations = change_list[<span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 原数组，不接客时每站人数</span></span><br><span class="line">        ori = [<span class="number">0</span>] * stations </span><br><span class="line">        <span class="comment"># 核心步骤1. 构造差分数组</span></span><br><span class="line">        diff = [<span class="number">0</span>] * stations</span><br><span class="line">        <span class="comment"># 核心步骤2. 差分数组记录修改</span></span><br><span class="line">        <span class="keyword">for</span> cnt, start, end <span class="keyword">in</span> trips:</span><br><span class="line">            diff[start] += cnt</span><br><span class="line">            <span class="comment"># diff下标为区间终点+1，因为修改区间为[start, end-1]，所以diff下表为end</span></span><br><span class="line">            <span class="keyword">if</span> end &lt; stations:</span><br><span class="line">                diff[end] -= cnt</span><br><span class="line">        <span class="comment"># 核心步骤3. 差分数组推出修改后的数组，并判断修改后的数组中是否有超载的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stations):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i:</span><br><span class="line">                res_i_1 = <span class="number">0</span></span><br><span class="line">            res_i = res_i_1 + diff[i]   <span class="comment"># 第i站人数</span></span><br><span class="line">            res_i_1 = res_i</span><br><span class="line">            <span class="keyword">if</span> res_i &gt; capacity:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1094-Car-Pooling-medium&quot;&gt;&lt;a href=&quot;#1094-Car-Pooling-medium&quot; class=&quot;headerlink&quot; title=&quot;1094. Car Pooling(medium)&quot;&gt;&lt;/a&gt;1094. Car Pooli</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1109. Corporate Flight Bookings(medium)</title>
    <link href="http://example.com/2022/08/30/1109/"/>
    <id>http://example.com/2022/08/30/1109/</id>
    <published>2022-08-30T19:46:08.000Z</published>
    <updated>2022-08-31T00:17:48.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1109-Corporate-Flight-Bookings-medium"><a href="#1109-Corporate-Flight-Bookings-medium" class="headerlink" title="1109. Corporate Flight Bookings(medium)"></a>1109. Corporate Flight Bookings(medium)</h1><h2 id="There-are-n-flights-that-are-labeled-from-1-to-n"><a href="#There-are-n-flights-that-are-labeled-from-1-to-n" class="headerlink" title="There are n flights that are labeled from 1 to n."></a>There are n flights that are labeled from 1 to n.</h2><h2 id="You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range"><a href="#You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range" class="headerlink" title="You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range."></a>You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.</h2><h2 id="Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i"><a href="#Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i" class="headerlink" title="Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i."></a>Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.</h2><p>这道题又是一个标准的差分数组题，与370题几乎一模一样，差别在于length是0-4还是1-5</p><pre><code class="python">class Solution:    def corpFlightBookings(self, bookings: List[List[int]], n: int) -&gt; List[int]:        res = [0]*(n+1)        for booking in bookings:            start,end,v = booking            s=start-1            e=end-1                        res[s]+=v            res[e+1]-=v        for i in range(1,n):            res[i] += res[i-1]        return res[:-1]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1109-Corporate-Flight-Bookings-medium&quot;&gt;&lt;a href=&quot;#1109-Corporate-Flight-Bookings-medium&quot; class=&quot;headerlink&quot; title=&quot;1109. Corporate Fl</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>370. Range Addition(medium)</title>
    <link href="http://example.com/2022/08/30/370/"/>
    <id>http://example.com/2022/08/30/370/</id>
    <published>2022-08-30T19:13:36.000Z</published>
    <updated>2022-08-31T00:17:26.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="370-Range-Addition-medium"><a href="#370-Range-Addition-medium" class="headerlink" title="370. Range Addition(medium)"></a>370. Range Addition(medium)</h1><h2 id="You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci"><a href="#You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci" class="headerlink" title="You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci]."></a>You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci].</h2><h2 id="You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci"><a href="#You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci" class="headerlink" title="You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci."></a>You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci.</h2><h2 id="Return-arr-after-applying-all-the-updates"><a href="#Return-arr-after-applying-all-the-updates" class="headerlink" title="Return arr after applying all the updates."></a>Return arr after applying all the updates.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]</span><br><span class="line">Output: [-2,0,3,5,3]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/range-addition/discuss/84220/O(n%2Bk)-Python-Solution">leetcode题解</a></p><p>差分数组经典题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>]*length</span><br><span class="line">        <span class="keyword">for</span> update <span class="keyword">in</span> updates:</span><br><span class="line">            start, end, inc = update</span><br><span class="line">            res[start]+=inc</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> end+<span class="number">1</span>&lt;=length -<span class="number">1</span>:<span class="comment">#if endIdx + 1 is not out of range. If it is out of range, we don&#x27;t do anything</span></span><br><span class="line">                res[end+<span class="number">1</span>]-=inc</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="built_in">sum</span>+= res[i]</span><br><span class="line">            res[i]=<span class="built_in">sum</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>其实这个方法并不是差分数组，还是前缀和数组，也就是说差分数组和前缀和数组可以相互替换？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>] * (length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> s, e, v <span class="keyword">in</span> updates:</span><br><span class="line">            res[s] += v</span><br><span class="line">            res[e+<span class="number">1</span>] -= v</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):<span class="comment">#加上前面的数字</span></span><br><span class="line">            res[i] += res[i-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[:-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;370-Range-Addition-medium&quot;&gt;&lt;a href=&quot;#370-Range-Addition-medium&quot; class=&quot;headerlink&quot; title=&quot;370. Range Addition(medium)&quot;&gt;&lt;/a&gt;370. Rang</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill6-stack</title>
    <link href="http://example.com/2022/08/30/LeetCode-skill6-stack/"/>
    <id>http://example.com/2022/08/30/LeetCode-skill6-stack/</id>
    <published>2022-08-30T18:46:58.000Z</published>
    <updated>2022-08-31T00:17:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1. 栈的定义"></a>1. 栈的定义</h1><p>栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部完成。<br>压栈：即栈添加成员，在栈的尾部完成<br>弹栈：即栈删除成员，在栈的尾部完成<br>在创建栈时，如果以数组的数据结构为基础时，以数组的尾部为栈的尾部；<br>在创建栈时，如果以链表的数据结构为基础时，以链表的头部为栈的尾部；</p><h1 id="2-栈的功能成员函数"><a href="#2-栈的功能成员函数" class="headerlink" title="2. 栈的功能成员函数"></a>2. 栈的功能成员函数</h1><p>push(): 在栈的尾部添加成员<br>pop(): 在栈的尾部删除成员<br>top(): 返回栈的头部成员<br>is_Empty(): 检测栈是否为空，若为空，则返回True， 否则返回False<br>length(): 返回栈的成员数量<br>travel(): 遍历栈的所有成员</p><h2 id="常见栈的函数操作包括"><a href="#常见栈的函数操作包括" class="headerlink" title="常见栈的函数操作包括"></a>常见栈的函数操作包括</h2><p>empty() – 返回栈是否为空 – Time Complexity : O(1)</p><p>size() – 返回栈的长度 – Time Complexity : O(1)</p><p>top() – 查看栈顶元素 – Time Complexity : O(1)</p><p>push(g) – 向栈顶添加元素 – Time Complexity : O(1)</p><p>pop() – 删除栈顶元素 – Time Complexity : O(1)</p><p>python中栈可以用以下三种方法实现：</p><p>１)list</p><p>２)collections.deque</p><p>３)queue.LifoQueue</p><p>使用列表实现栈</p><p>python的内置数据结构list可以用来实现栈，用append()向栈顶添加元素, pop() 可以以后进先出的顺序删除元素</p><p>但是列表本身有一些缺点，主要问题就是当列表不断扩大的时候会遇到速度瓶颈．列表是动态数组，因此往其中添加新元素而没有空间保存新的元素时，它会自动重新分配内存块，并将原来的内存中的值复制到新的内存块中．这就导致了一些append()操作会消耗更多的时间</p><p>使用collections.deque实现栈</p><p>python中栈也可以用deque类实现，当我们想要在实现在容器两端更快速地进行append和pop操作时，deque比列表更合适．deque可以提供O(1)时间的append和pop操作，而列表则需要O(n)时间.</p><p>使用queue module实现栈</p><p>Queue模块有LIFO queue，也就是栈结构．用put()和get()操作从Queue中添加和获得数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-栈的定义&quot;&gt;&lt;a href=&quot;#1-栈的定义&quot; class=&quot;headerlink&quot; title=&quot;1. 栈的定义&quot;&gt;&lt;/a&gt;1. 栈的定义&lt;/h1&gt;&lt;p&gt;栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
  </entry>
  
</feed>
