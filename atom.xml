<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-30T21:57:43.526Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>48. Rotate Image(medium)</title>
    <link href="http://example.com/2022/08/30/48/"/>
    <id>http://example.com/2022/08/30/48/</id>
    <published>2022-08-30T21:26:38.000Z</published>
    <updated>2022-08-30T21:57:43.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="48-Rotate-Image-medium"><a href="#48-Rotate-Image-medium" class="headerlink" title="48. Rotate Image(medium)"></a>48. Rotate Image(medium)</h1><h2 id="You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise"><a href="#You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise" class="headerlink" title="You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise)."></a>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</h2><h2 id="You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation"><a href="#You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation" class="headerlink" title="You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."></a>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p>这题有一个非常巧妙的用翻转代替旋转的方法，<br>作为例子，<br>$$<br> \begin{bmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{bmatrix} \tag{1}<br>$$<br>先将其通过水平轴翻转得到：</p><p>$$<br> \begin{bmatrix}<br>   7 &amp; 8 &amp; 9 \<br>   4 &amp; 5 &amp; 6 \<br>   1 &amp; 2 &amp; 3<br>  \end{bmatrix} \tag{2}<br>$$  </p><p>再根据主对角线翻转得到：<br>$$<br> \begin{bmatrix}<br>   7 &amp; 4 &amp; 1 \<br>   8 &amp; 5 &amp; 2 \<br>   9 &amp; 6 &amp; 3<br>  \end{bmatrix} \tag{3}<br>$$  </p><p>这样就可以看出来了，clockwise旋转90°就相当于先水平翻转再根据主对角线翻转</p><p><a href="https://leetcode.cn/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                matrix[i][j],matrix[n-i-<span class="number">1</span>][j]=matrix[n-i-<span class="number">1</span>][j],matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;48-Rotate-Image-medium&quot;&gt;&lt;a href=&quot;#48-Rotate-Image-medium&quot; class=&quot;headerlink&quot; title=&quot;48. Rotate Image(medium)&quot;&gt;&lt;/a&gt;48. Rotate Image(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1094. Car Pooling(medium)</title>
    <link href="http://example.com/2022/08/30/1094/"/>
    <id>http://example.com/2022/08/30/1094/</id>
    <published>2022-08-30T21:04:57.000Z</published>
    <updated>2022-08-30T21:20:00.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1094-Car-Pooling-medium"><a href="#1094-Car-Pooling-medium" class="headerlink" title="1094. Car Pooling(medium)"></a>1094. Car Pooling(medium)</h1><h2 id="There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west"><a href="#There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west" class="headerlink" title="There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west)."></a>There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</h2><h2 id="You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location"><a href="#You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location" class="headerlink" title="You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location."></a>You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location.</h2><h2 id="Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise"><a href="#Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise" class="headerlink" title="Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise."></a>Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>差分数组经典题</p><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/car-pooling/solution/1094-pin-che-python-chai-fen-shu-zu-by-f-yvh7/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">carPooling</span>(<span class="params">self, trips: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], capacity: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="comment"># 确定最多有几站-&gt;数组长度</span></span><br><span class="line">        stations = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> change_list <span class="keyword">in</span> trips:</span><br><span class="line">            <span class="keyword">if</span> change_list[<span class="number">2</span>]+<span class="number">1</span> &gt; stations:</span><br><span class="line">                stations = change_list[<span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 原数组，不接客时每站人数</span></span><br><span class="line">        ori = [<span class="number">0</span>] * stations </span><br><span class="line">        <span class="comment"># 核心步骤1. 构造差分数组</span></span><br><span class="line">        diff = [<span class="number">0</span>] * stations</span><br><span class="line">        <span class="comment"># 核心步骤2. 差分数组记录修改</span></span><br><span class="line">        <span class="keyword">for</span> cnt, start, end <span class="keyword">in</span> trips:</span><br><span class="line">            diff[start] += cnt</span><br><span class="line">            <span class="comment"># diff下标为区间终点+1，因为修改区间为[start, end-1]，所以diff下表为end</span></span><br><span class="line">            <span class="keyword">if</span> end &lt; stations:</span><br><span class="line">                diff[end] -= cnt</span><br><span class="line">        <span class="comment"># 核心步骤3. 差分数组推出修改后的数组，并判断修改后的数组中是否有超载的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stations):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i:</span><br><span class="line">                res_i_1 = <span class="number">0</span></span><br><span class="line">            res_i = res_i_1 + diff[i]   <span class="comment"># 第i站人数</span></span><br><span class="line">            res_i_1 = res_i</span><br><span class="line">            <span class="keyword">if</span> res_i &gt; capacity:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1094-Car-Pooling-medium&quot;&gt;&lt;a href=&quot;#1094-Car-Pooling-medium&quot; class=&quot;headerlink&quot; title=&quot;1094. Car Pooling(medium)&quot;&gt;&lt;/a&gt;1094. Car Pooli</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1109. Corporate Flight Bookings(medium)</title>
    <link href="http://example.com/2022/08/30/1109/"/>
    <id>http://example.com/2022/08/30/1109/</id>
    <published>2022-08-30T19:46:08.000Z</published>
    <updated>2022-08-30T21:03:58.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1109-Corporate-Flight-Bookings-medium"><a href="#1109-Corporate-Flight-Bookings-medium" class="headerlink" title="1109. Corporate Flight Bookings(medium)"></a>1109. Corporate Flight Bookings(medium)</h1><h2 id="There-are-n-flights-that-are-labeled-from-1-to-n"><a href="#There-are-n-flights-that-are-labeled-from-1-to-n" class="headerlink" title="There are n flights that are labeled from 1 to n."></a>There are n flights that are labeled from 1 to n.</h2><h2 id="You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range"><a href="#You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range" class="headerlink" title="You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range."></a>You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.</h2><h2 id="Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i"><a href="#Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i" class="headerlink" title="Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i."></a>Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.</h2><p>这道题又是一个标准的差分数组题，与370题几乎一模一样，差别在于length是0-4还是1-5</p><pre><code class="python">class Solution:    def corpFlightBookings(self, bookings: List[List[int]], n: int) -&gt; List[int]:        res = [0]*(n+1)        for booking in bookings:            start,end,v = booking            s=start-1            e=end-1                        res[s]+=v            res[e+1]-=v        for i in range(1,n):            res[i] += res[i-1]        return res[:-1]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1109-Corporate-Flight-Bookings-medium&quot;&gt;&lt;a href=&quot;#1109-Corporate-Flight-Bookings-medium&quot; class=&quot;headerlink&quot; title=&quot;1109. Corporate Fl</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>370. Range Addition(medium)</title>
    <link href="http://example.com/2022/08/30/370/"/>
    <id>http://example.com/2022/08/30/370/</id>
    <published>2022-08-30T19:13:36.000Z</published>
    <updated>2022-08-30T20:52:56.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="370-Range-Addition-medium"><a href="#370-Range-Addition-medium" class="headerlink" title="370. Range Addition(medium)"></a>370. Range Addition(medium)</h1><h2 id="You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci"><a href="#You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci" class="headerlink" title="You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci]."></a>You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci].</h2><h2 id="You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci"><a href="#You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci" class="headerlink" title="You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci."></a>You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci.</h2><h2 id="Return-arr-after-applying-all-the-updates"><a href="#Return-arr-after-applying-all-the-updates" class="headerlink" title="Return arr after applying all the updates."></a>Return arr after applying all the updates.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]</span><br><span class="line">Output: [-2,0,3,5,3]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/range-addition/discuss/84220/O(n%2Bk)-Python-Solution">leetcode题解</a></p><p>差分数组经典题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>]*length</span><br><span class="line">        <span class="keyword">for</span> update <span class="keyword">in</span> updates:</span><br><span class="line">            start, end, inc = update</span><br><span class="line">            res[start]+=inc</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> end+<span class="number">1</span>&lt;=length -<span class="number">1</span>:<span class="comment">#if endIdx + 1 is not out of range. If it is out of range, we don&#x27;t do anything</span></span><br><span class="line">                res[end+<span class="number">1</span>]-=inc</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="built_in">sum</span>+= res[i]</span><br><span class="line">            res[i]=<span class="built_in">sum</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>其实这个方法并不是差分数组，还是前缀和数组，也就是说差分数组和前缀和数组可以相互替换？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>] * (length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> s, e, v <span class="keyword">in</span> updates:</span><br><span class="line">            res[s] += v</span><br><span class="line">            res[e+<span class="number">1</span>] -= v</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):<span class="comment">#加上前面的数字</span></span><br><span class="line">            res[i] += res[i-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[:-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;370-Range-Addition-medium&quot;&gt;&lt;a href=&quot;#370-Range-Addition-medium&quot; class=&quot;headerlink&quot; title=&quot;370. Range Addition(medium)&quot;&gt;&lt;/a&gt;370. Rang</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill6-stack</title>
    <link href="http://example.com/2022/08/30/LeetCode-skill6-stack/"/>
    <id>http://example.com/2022/08/30/LeetCode-skill6-stack/</id>
    <published>2022-08-30T18:46:58.000Z</published>
    <updated>2022-08-30T18:53:12.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1. 栈的定义"></a>1. 栈的定义</h1><p>栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部完成。<br>压栈：即栈添加成员，在栈的尾部完成<br>弹栈：即栈删除成员，在栈的尾部完成<br>在创建栈时，如果以数组的数据结构为基础时，以数组的尾部为栈的尾部；<br>在创建栈时，如果以链表的数据结构为基础时，以链表的头部为栈的尾部；</p><h1 id="2-栈的功能成员函数"><a href="#2-栈的功能成员函数" class="headerlink" title="2. 栈的功能成员函数"></a>2. 栈的功能成员函数</h1><p>push(): 在栈的尾部添加成员<br>pop(): 在栈的尾部删除成员<br>top(): 返回栈的头部成员<br>is_Empty(): 检测栈是否为空，若为空，则返回True， 否则返回False<br>length(): 返回栈的成员数量<br>travel(): 遍历栈的所有成员</p><h2 id="常见栈的函数操作包括"><a href="#常见栈的函数操作包括" class="headerlink" title="常见栈的函数操作包括"></a>常见栈的函数操作包括</h2><p>empty() – 返回栈是否为空 – Time Complexity : O(1)</p><p>size() – 返回栈的长度 – Time Complexity : O(1)</p><p>top() – 查看栈顶元素 – Time Complexity : O(1)</p><p>push(g) – 向栈顶添加元素 – Time Complexity : O(1)</p><p>pop() – 删除栈顶元素 – Time Complexity : O(1)</p><p>python中栈可以用以下三种方法实现：</p><p>１)list</p><p>２)collections.deque</p><p>３)queue.LifoQueue</p><p>使用列表实现栈</p><p>python的内置数据结构list可以用来实现栈，用append()向栈顶添加元素, pop() 可以以后进先出的顺序删除元素</p><p>但是列表本身有一些缺点，主要问题就是当列表不断扩大的时候会遇到速度瓶颈．列表是动态数组，因此往其中添加新元素而没有空间保存新的元素时，它会自动重新分配内存块，并将原来的内存中的值复制到新的内存块中．这就导致了一些append()操作会消耗更多的时间</p><p>使用collections.deque实现栈</p><p>python中栈也可以用deque类实现，当我们想要在实现在容器两端更快速地进行append和pop操作时，deque比列表更合适．deque可以提供O(1)时间的append和pop操作，而列表则需要O(n)时间.</p><p>使用queue module实现栈</p><p>Queue模块有LIFO queue，也就是栈结构．用put()和get()操作从Queue中添加和获得数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-栈的定义&quot;&gt;&lt;a href=&quot;#1-栈的定义&quot; class=&quot;headerlink&quot; title=&quot;1. 栈的定义&quot;&gt;&lt;/a&gt;1. 栈的定义&lt;/h1&gt;&lt;p&gt;栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
  </entry>
  
  <entry>
    <title>20. Valid Parentheses(easy)</title>
    <link href="http://example.com/2022/08/30/20/"/>
    <id>http://example.com/2022/08/30/20/</id>
    <published>2022-08-30T17:32:42.000Z</published>
    <updated>2022-08-30T19:13:43.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-Valid-Parentheses-easy"><a href="#20-Valid-Parentheses-easy" class="headerlink" title="20. Valid Parentheses(easy)"></a>20. Valid Parentheses(easy)</h1><h2 id="Given-a-string-s-containing-just-the-characters-‘-‘-‘-’-‘-‘-‘-’-‘-‘-and-‘-’-determine-if-the-input-string-is-valid"><a href="#Given-a-string-s-containing-just-the-characters-‘-‘-‘-’-‘-‘-‘-’-‘-‘-and-‘-’-determine-if-the-input-string-is-valid" class="headerlink" title="Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid."></a>Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</h2><h2 id="An-input-string-is-valid-if"><a href="#An-input-string-is-valid-if" class="headerlink" title="An input string is valid if:"></a>An input string is valid if:</h2><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Every close bracket has a corresponding open bracket of the same type.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode-solution/">官方题解</a></h3><p>判断括号的有效性可以使用「栈」这一数据结构来解决。</p><p>我们遍历给定的字符串 s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。</p><p>当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串 s 无效，返回 False。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。</p><p>在遍历结束后，如果栈中没有左括号，说明我们将字符串 s 中的所有左括号闭合，返回 True，否则返回 False。</p><p>注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 False，省去后续的遍历判断过程。</p><p><a href="https://leetcode.cn/problems/valid-parentheses/solution/valid-parentheses-fu-zhu-zhan-fa-by-jin407891080/">题解1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,  <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;?&#x27;</span>&#125;</span><br><span class="line">        stack = [<span class="string">&#x27;?&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic: stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c: <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode-solution/">题解2</a>        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        pairs = &#123;</span><br><span class="line">            <span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>,</span><br><span class="line">            <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        stack = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">in</span> pairs:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">or</span> stack[-<span class="number">1</span>] != pairs[ch]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(ch)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20-Valid-Parentheses-easy&quot;&gt;&lt;a href=&quot;#20-Valid-Parentheses-easy&quot; class=&quot;headerlink&quot; title=&quot;20. Valid Parentheses(easy)&quot;&gt;&lt;/a&gt;20. Valid</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill5-difference-array</title>
    <link href="http://example.com/2022/08/29/LeetCode-skill5-difference-array/"/>
    <id>http://example.com/2022/08/29/LeetCode-skill5-difference-array/</id>
    <published>2022-08-29T21:39:00.000Z</published>
    <updated>2022-08-30T19:33:48.909Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。</p><p>比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nums[0..4] 全部加 2，再给…</p><p>一通操作猛如虎，然后问你，最后 nums 数组的值是什么？</p><p>常规的思路很容易，你让我给区间 nums[i..j] 加上 val，那我就一个 for 循环给它们都加上呗，还能咋样？这种思路的时间复杂度是 O(N)，由于这个场景下对 nums 的修改非常频繁，所以效率会很低下。</p><p>这里就需要差分数组的技巧，类似前缀和技巧构造的 prefix 数组，我们先对 nums 数组构造一个 diff 差分数组，diff[i] 就是 nums[i] 和 nums[i-1] 之差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"><span class="comment">// 构造差分数组</span></span><br><span class="line">diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这个 diff 差分数组是可以反推出原始数组 nums 的，代码逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line"><span class="comment">// 根据差分数组构造结果数组</span></span><br><span class="line">res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">    res[i] = res[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理很简单，回想 diff 数组反推 nums 数组的过程，diff[i] += 3 意味着给 nums[i..] 所有的元素都加了 3，然后 diff[j+1] -= 3 又意味着对于 nums[j+1..] 所有元素再减 3，那综合起来，是不是就是对 nums[i..j] 中的所有元素都加 3 了？</p><p>只要花费 O(1) 的时间修改 diff 数组，就相当于给 nums 的整个区间做了修改。多次修改 diff，然后通过 diff 数组反推，即可得到 nums 修改后的结果。</p><p>现在我们把差分数组抽象成一个类，包含 increment 方法和 result 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Difference</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.diff = self.make_diff(self.nums)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_diff</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        diff = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            diff[i] = nums[i] - nums[i-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给闭区间[i,j]增加val</span></span><br><span class="line">    <span class="comment"># 原理很简单，回想diff数组反推nums数组的过程，diff[i] += 3意味着给nums[i..]所有的元素都加了 3，然后diff[j+1] -= 3又意味着对于nums[j+1..]所有元素再减 3，那综合起来，是不是就是对nums[i..j]中的所有元素都加 3 了？</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">self, i, j, val</span>):</span></span><br><span class="line">        self.diff[i] += val</span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt; <span class="built_in">len</span>(self.diff):</span><br><span class="line">            self.diff[j + <span class="number">1</span>] -= val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">self</span>):</span></span><br><span class="line">        rdiff = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.diff))]</span><br><span class="line">        rdiff[<span class="number">0</span>] = self.diff[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(self.nums)):</span><br><span class="line">            rdiff[i] = rdiff[i-<span class="number">1</span>] + self.diff[i]</span><br><span class="line">        <span class="keyword">return</span> rdiff</span><br></pre></td></tr></table></figure><p>difference = Difference([8,5,9,6,1])<br>print(difference.diff)<br>rdiff = difference.recover()<br>print(rdiff)<br>difference.increment(2,3,1)<br>print(difference.diff)<br>rdiff = difference.recover()<br>print(rdiff)</p><hr><p>【python刷题】差分数组<br><a href="https://blog.51cto.com/u_15127632/3275175">https://blog.51cto.com/u_15127632/3275175</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。&lt;/p&gt;
&lt;p&gt;比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode15-DFS</title>
    <link href="http://example.com/2022/08/29/LeetCode15-DFS/"/>
    <id>http://example.com/2022/08/29/LeetCode15-DFS/</id>
    <published>2022-08-29T21:06:58.000Z</published>
    <updated>2022-08-29T21:07:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。</p><p>本文将以岛屿问题为例，展示网格类问题 DFS 通用思路，以及如何让代码变得简洁。</p><p>在 LeetCode 中，「岛屿问题」是一个系列系列问题，比如：</p><p>L200. 岛屿数量 （Easy）<br>463. 岛屿的周长 （Easy）<br>695. 岛屿的最大面积 （Medium）<br>827. 最大人工岛 （Hard）</p><p>作者：nettee<br>链接：<a href="https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode14-BFS</title>
    <link href="http://example.com/2022/08/29/LeetCode14-BFS/"/>
    <id>http://example.com/2022/08/29/LeetCode14-BFS/</id>
    <published>2022-08-29T21:06:51.000Z</published>
    <updated>2022-08-29T21:07:24.717Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>5. Longest Palindromic Substring(medium)</title>
    <link href="http://example.com/2022/08/29/5/"/>
    <id>http://example.com/2022/08/29/5/</id>
    <published>2022-08-29T20:40:18.000Z</published>
    <updated>2022-08-29T21:03:22.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Longest-Palindromic-Substring-medium"><a href="#5-Longest-Palindromic-Substring-medium" class="headerlink" title="5. Longest Palindromic Substring(medium)"></a>5. Longest Palindromic Substring(medium)</h1><h2 id="Given-a-string-s-return-the-longest-palindromic-substring-in-s"><a href="#Given-a-string-s-return-the-longest-palindromic-substring-in-s" class="headerlink" title="Given a string s, return the longest palindromic substring in s."></a>Given a string s, return the longest palindromic substring in s.</h2><p>substring和subsequence：<br>substring是子串。例如，‘wee’ 是 ‘helloween’的substring，‘hwn’ 不是 ‘helloween’的substring。取子串的时候不能隔着字符取。<br>subsequence是子序列。例如，‘wee’ 和 ‘hwn’ 都是 ‘helloween’的subsequence。取子序列的时候可以隔着字符取。<br>palindromic substring 是回文子串，例如‘soebeos’ 是 ‘absoebeostge’ 的回文子串。回文的意思是正过来念和反过来念都一样的字符串，比如“上海自来水来自海上”。</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandAroundCenter</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            left1, right1 = self.expandAroundCenter(s, i, i)</span><br><span class="line">            left2, right2 = self.expandAroundCenter(s, i, i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> right1 - left1 &gt; end - start:</span><br><span class="line">                start, end = left1, right1</span><br><span class="line">            <span class="keyword">if</span> right2 - left2 &gt; end - start:</span><br><span class="line">                start, end = left2, right2</span><br><span class="line">        <span class="keyword">return</span> s[start: end + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;5-Longest-Palindromic-Substring-medium&quot;&gt;&lt;a href=&quot;#5-Longest-Palindromic-Substring-medium&quot; class=&quot;headerlink&quot; title=&quot;5. Longest Palin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>344. Reverse String(easy)</title>
    <link href="http://example.com/2022/08/29/344/"/>
    <id>http://example.com/2022/08/29/344/</id>
    <published>2022-08-29T20:22:40.000Z</published>
    <updated>2022-08-29T20:43:03.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="344-Reverse-String-easy"><a href="#344-Reverse-String-easy" class="headerlink" title="344. Reverse String(easy)"></a>344. Reverse String(easy)</h1><h2 id="Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s"><a href="#Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s" class="headerlink" title="Write a function that reverses a string. The input string is given as an array of characters s."></a>Write a function that reverses a string. The input string is given as an array of characters s.</h2><h2 id="You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="You must do this by modifying the input array in-place with O(1) extra memory."></a>You must do this by modifying the input array in-place with O(1) extra memory.</h2><p>反转字符串，其实还是反转数组，双指针一左一右来回替换就行了，要注意的是在本体上变换</p><pre><code class="python">class Solution:    def reverseString(self, s: List[str]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify s in-place instead.        &quot;&quot;&quot;        left = 0        right = len(s)-1        while left&lt;right:            tmp =s[left]            s[left]=s[right]            s[right]=tmp            left+=1            right-=1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;344-Reverse-String-easy&quot;&gt;&lt;a href=&quot;#344-Reverse-String-easy&quot; class=&quot;headerlink&quot; title=&quot;344. Reverse String(easy)&quot;&gt;&lt;/a&gt;344. Reverse St</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>704. Binary Search(easy)</title>
    <link href="http://example.com/2022/08/29/704/"/>
    <id>http://example.com/2022/08/29/704/</id>
    <published>2022-08-29T19:22:20.000Z</published>
    <updated>2022-08-29T20:42:41.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="704-Binary-Search-easy"><a href="#704-Binary-Search-easy" class="headerlink" title="704. Binary Search(easy)"></a>704. Binary Search(easy)</h1><h2 id="Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1"><a href="#Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1" class="headerlink" title="Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1."></a>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</h2><h2 id="You-must-write-an-algorithm-with-O-log-n-runtime-complexity"><a href="#You-must-write-an-algorithm-with-O-log-n-runtime-complexity" class="headerlink" title="You must write an algorithm with O(log n) runtime complexity."></a>You must write an algorithm with O(log n) runtime complexity.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p>二分查找模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left =<span class="number">0</span></span><br><span class="line">        right=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right):</span><br><span class="line">            mid =left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;704-Binary-Search-easy&quot;&gt;&lt;a href=&quot;#704-Binary-Search-easy&quot; class=&quot;headerlink&quot; title=&quot;704. Binary Search(easy)&quot;&gt;&lt;/a&gt;704. Binary Search</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode13-Array</title>
    <link href="http://example.com/2022/08/29/LeetCode13-Array/"/>
    <id>http://example.com/2022/08/29/LeetCode13-Array/</id>
    <published>2022-08-29T19:07:36.000Z</published>
    <updated>2022-08-30T20:48:21.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-快慢指针"><a href="#1-快慢指针" class="headerlink" title="1. 快慢指针"></a>1. 快慢指针</h1><h1 id="2-左右指针"><a href="#2-左右指针" class="headerlink" title="2. 左右指针"></a>2. 左右指针</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h1 id="Leetcode-题解-二分查找"><a href="#Leetcode-题解-二分查找" class="headerlink" title="Leetcode 题解 - 二分查找"></a>Leetcode 题解 - 二分查找</h1><h2 id="1-求开方"><a href="#1-求开方" class="headerlink" title="1. 求开方"></a>1. 求开方</h2><h2 id="2-大于给定元素的最小元素"><a href="#2-大于给定元素的最小元素" class="headerlink" title="2. 大于给定元素的最小元素"></a>2. 大于给定元素的最小元素</h2><h2 id="3-有序数组的-Single-Element"><a href="#3-有序数组的-Single-Element" class="headerlink" title="3. 有序数组的 Single Element"></a>3. 有序数组的 Single Element</h2><h2 id="4-第一个错误的版本"><a href="#4-第一个错误的版本" class="headerlink" title="4. 第一个错误的版本"></a>4. 第一个错误的版本</h2><h2 id="5-旋转数组的最小数字"><a href="#5-旋转数组的最小数字" class="headerlink" title="5. 旋转数组的最小数字"></a>5. 旋转数组的最小数字</h2><h2 id="6-查找区间"><a href="#6-查找区间" class="headerlink" title="6. 查找区间"></a>6. 查找区间</h2><p>二分查找 binary search algorithm</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>二分查找也称为折半查找，每次都能将查找区间减半，这种折半特性的算法时间复杂度为 O(logN)。</p><h2 id="m-计算"><a href="#m-计算" class="headerlink" title="m 计算"></a>m 计算</h2><p>有两种计算中值 m 的方式：</p><p>m = (l + h) / 2<br>m = l + (h - l) / 2<br>l + h 可能出现加法溢出，也就是说加法的结果大于整型能够表示的范围。但是 l 和 h 都为正数，因此 h - l 不会出现加法溢出问题。所以，最好使用第二种计算法方法。</p><h2 id="未成功查找的返回值"><a href="#未成功查找的返回值" class="headerlink" title="未成功查找的返回值"></a>未成功查找的返回值</h2><p>循环退出时如果仍然没有查找到 key，那么表示查找失败。可以有两种返回值：</p><p>-1：以一个错误码表示没有查找到 key<br>l：将 key 插入到 nums 中的正确位置</p><p>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一左一右两个指针相向而行</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left =<span class="number">0</span></span><br><span class="line">        right=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right):</span><br><span class="line">            mid =left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if 判断条件1:</span><br><span class="line">   执行语句1……</span><br><span class="line">elif 判断条件2:</span><br><span class="line">   执行语句2……</span><br><span class="line">elif 判断条件3:</span><br><span class="line">   执行语句3……</span><br><span class="line">else:</span><br><span class="line">   执行语句4……</span><br></pre></td></tr></table></figure><p>print(a[0:-1])<br>python array:<br>从位置0到位置-1之前的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面两个结果一样</span></span><br><span class="line">a = <span class="string">&#x27;1234568910’</span></span><br><span class="line"><span class="string">print(a[:-1])   </span></span><br><span class="line"><span class="string">print(a[0:-1])</span></span><br><span class="line"><span class="string">#result:a = &#x27;</span><span class="number">123456891</span>’</span><br><span class="line"><span class="comment">#result:a = &#x27;123456891’</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-快慢指针&quot;&gt;&lt;a href=&quot;#1-快慢指针&quot; class=&quot;headerlink&quot; title=&quot;1. 快慢指针&quot;&gt;&lt;/a&gt;1. 快慢指针&lt;/h1&gt;&lt;h1 id=&quot;2-左右指针&quot;&gt;&lt;a href=&quot;#2-左右指针&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>283. Move Zeroes(easy)</title>
    <link href="http://example.com/2022/08/29/283/"/>
    <id>http://example.com/2022/08/29/283/</id>
    <published>2022-08-29T15:18:04.000Z</published>
    <updated>2022-08-29T20:42:27.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="283-Move-Zeroes-easy"><a href="#283-Move-Zeroes-easy" class="headerlink" title="283. Move Zeroes(easy)"></a>283. Move Zeroes(easy)</h1><h2 id="Given-an-integer-array-nums-move-all-0’s-to-the-end-of-it-while-maintaining-the-relative-order-of-the-non-zero-elements"><a href="#Given-an-integer-array-nums-move-all-0’s-to-the-end-of-it-while-maintaining-the-relative-order-of-the-non-zero-elements" class="headerlink" title="Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements."></a>Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</h2><h2 id="Note-that-you-must-do-this-in-place-without-making-a-copy-of-the-array"><a href="#Note-that-you-must-do-this-in-place-without-making-a-copy-of-the-array" class="headerlink" title="Note that you must do this in-place without making a copy of the array."></a>Note that you must do this in-place without making a copy of the array.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p>这道题和26. Remove Duplicates from Sorted Array(easy) 差不多，还是双指针，重复数字改成了0，把非零数字写入数组前面，然后空位补0</p><pre><code class="python">class Solution:    def moveZeroes(self, nums: List[int]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify nums in-place instead.        &quot;&quot;&quot;        slow = 0        fast = 0        while fast&lt;len(nums):            if nums[fast]!=0:                nums[slow]=nums[fast]                slow+=1                            fast+=1        if slow&lt;len(nums):            for i in range(slow,len(nums)):                nums[i]=0        return nums</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;283-Move-Zeroes-easy&quot;&gt;&lt;a href=&quot;#283-Move-Zeroes-easy&quot; class=&quot;headerlink&quot; title=&quot;283. Move Zeroes(easy)&quot;&gt;&lt;/a&gt;283. Move Zeroes(easy)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>27. Remove Element(easy)</title>
    <link href="http://example.com/2022/08/29/27/"/>
    <id>http://example.com/2022/08/29/27/</id>
    <published>2022-08-29T15:15:32.000Z</published>
    <updated>2022-08-29T20:42:14.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="27-Remove-Element-easy"><a href="#27-Remove-Element-easy" class="headerlink" title="27. Remove Element(easy)"></a>27. Remove Element(easy)</h1><h2 id="Given-an-integer-array-nums-and-an-integer-val-remove-all-occurrences-of-val-in-nums-in-place-The-relative-order-of-the-elements-may-be-changed"><a href="#Given-an-integer-array-nums-and-an-integer-val-remove-all-occurrences-of-val-in-nums-in-place-The-relative-order-of-the-elements-may-be-changed" class="headerlink" title="Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed."></a>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.</h2><h2 id="Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements"><a href="#Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements" class="headerlink" title="Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."></a>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</h2><h2 id="Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums"><a href="#Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums" class="headerlink" title="Return k after placing the final result in the first k slots of nums."></a>Return k after placing the final result in the first k slots of nums.</h2><h2 id="Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."></a>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-judge-will-test-your-solution-with-the-following-code"><a href="#The-judge-will-test-your-solution-with-the-following-code" class="headerlink" title="The judge will test your solution with the following code:"></a>The judge will test your solution with the following code:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="If-all-assertions-pass-then-your-solution-will-be-accepted"><a href="#If-all-assertions-pass-then-your-solution-will-be-accepted" class="headerlink" title="If all assertions pass, then your solution will be accepted."></a>If all assertions pass, then your solution will be accepted.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>这道题和26. Remove Duplicates from Sorted Array(easy)几乎一模一样，其实数组是否有序没有任何影响，所以设置快慢指针可解决问题，慢指针 slow 走在后面，快指针 fast 走在前面探路，找到一个不相同的元素就赋值给 slow 并让 slow 前进一步。这样，就保证了 nums[0..slow] 都是不相同的元素，当 fast 指针遍历完整个数组 nums 后，nums[0..slow] 就是整个数组不相同val之后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        slow, fast=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast&lt;<span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[fast]!=val:</span><br><span class="line">                nums[slow]=nums[fast]</span><br><span class="line">                slow+=<span class="number">1</span></span><br><span class="line">            fast+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;27-Remove-Element-easy&quot;&gt;&lt;a href=&quot;#27-Remove-Element-easy&quot; class=&quot;headerlink&quot; title=&quot;27. Remove Element(easy)&quot;&gt;&lt;/a&gt;27. Remove Element</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>26. Remove Duplicates from Sorted Array(easy)</title>
    <link href="http://example.com/2022/08/29/26/"/>
    <id>http://example.com/2022/08/29/26/</id>
    <published>2022-08-29T15:00:06.000Z</published>
    <updated>2022-08-29T20:41:54.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="26-Remove-Duplicates-from-Sorted-Array-easy"><a href="#26-Remove-Duplicates-from-Sorted-Array-easy" class="headerlink" title="26. Remove Duplicates from Sorted Array(easy)"></a>26. Remove Duplicates from Sorted Array(easy)</h1><h2 id="Given-an-integer-array-nums-sorted-in-non-decreasing-order-remove-the-duplicates-in-place-such-that-each-unique-element-appears-only-once-The-relative-order-of-the-elements-should-be-kept-the-same"><a href="#Given-an-integer-array-nums-sorted-in-non-decreasing-order-remove-the-duplicates-in-place-such-that-each-unique-element-appears-only-once-The-relative-order-of-the-elements-should-be-kept-the-same" class="headerlink" title="Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same."></a>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</h2><h2 id="Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements"><a href="#Since-it-is-impossible-to-change-the-length-of-the-array-in-some-languages-you-must-instead-have-the-result-be-placed-in-the-first-part-of-the-array-nums-More-formally-if-there-are-k-elements-after-removing-the-duplicates-then-the-first-k-elements-of-nums-should-hold-the-final-result-It-does-not-matter-what-you-leave-beyond-the-first-k-elements" class="headerlink" title="Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."></a>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</h2><h2 id="Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums"><a href="#Return-k-after-placing-the-final-result-in-the-first-k-slots-of-nums" class="headerlink" title="Return k after placing the final result in the first k slots of nums."></a>Return k after placing the final result in the first k slots of nums.</h2><h2 id="Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#Do-not-allocate-extra-space-for-another-array-You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."></a>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</h2><h2 id="Custom-Judge"><a href="#Custom-Judge" class="headerlink" title="Custom Judge:"></a>Custom Judge:</h2><h2 id="The-judge-will-test-your-solution-with-the-following-code"><a href="#The-judge-will-test-your-solution-with-the-following-code" class="headerlink" title="The judge will test your solution with the following code:"></a>The judge will test your solution with the following code:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="If-all-assertions-pass-then-your-solution-will-be-accepted"><a href="#If-all-assertions-pass-then-your-solution-will-be-accepted" class="headerlink" title="If all assertions pass, then your solution will be accepted."></a>If all assertions pass, then your solution will be accepted.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,2]</span><br><span class="line">Output: 2, nums = [1,2,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>这道题并不难，因为只能在原数组上操作，所以设置快慢指针可解决问题，慢指针 slow 走在后面，快指针 fast 走在前面探路，找到一个不重复的元素就赋值给 slow 并让 slow 前进一步。这样，就保证了 nums[0..slow] 都是无重复的元素，当 fast 指针遍历完整个数组 nums 后，nums[0..slow] 就是整个数组去重之后的结果</p><pre><code class="python">class Solution:    def removeDuplicates(self, nums: List[int]) -&gt; int:        if len(nums)==0:            return 0        slow = 0        fast = 0        while fast&lt;len(nums):            if nums[fast]!=nums[slow]:                slow+=1                nums[slow]=nums[fast]            fast+=1        return slow+1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;26-Remove-Duplicates-from-Sorted-Array-easy&quot;&gt;&lt;a href=&quot;#26-Remove-Duplicates-from-Sorted-Array-easy&quot; class=&quot;headerlink&quot; title=&quot;26. Re</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill4-python-loop</title>
    <link href="http://example.com/2022/08/28/LeetCode-skill4-python-loop/"/>
    <id>http://example.com/2022/08/28/LeetCode-skill4-python-loop/</id>
    <published>2022-08-28T19:22:03.000Z</published>
    <updated>2022-08-28T19:22:40.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>for i in range(n)</p><p>range(n)输出的区间为 [ 0 , n − 1 ]，代码如下</p><p>for i in range(5):<br>    print(i)</p><p>输出结果为：0, 1, 2, 3, 4</p><p>for i in range(m, n)</p><p>range(m, n)输出的区间为 [ m , n − 1 ] [m, n - 1][m,n−1]，代码如下</p><p>for i in range(2, 5):<br>    print(i)</p><p>输出结果为： 2, 3, 4</p><p>for i in range(m, n, s)</p><p>参数m,n为左右边界，s为步长<br>range(m, n, s)输出的区间为 ( m , m + s , m + 2 s , ⋯   , n − k s ) (m, m + s, m + 2s, \cdots , n - ks)(m,m+s,m+2s,⋯,n−ks)，代码如下</p><p>for i in range(1,7,2):<br>    print(i)</p><p>输出结果为：1, 3，5</p><p>for _ in range()</p><p>_是一个变量（因为Python中的变量命名能够以下划线开始，单独的下划线也是一个变量），跟i一样，不同点在于，i会在后续的循环体中运用到，而_只是用来实现循环的次数。（因为基本上不会使用单独的下划线来用作变量传值）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;p&gt;for i in range(n)&lt;/p&gt;
&lt;p&gt;range(n)输出的区间为 [ 0 , n − 1 ]，代码如下&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="loop" scheme="http://example.com/tags/loop/"/>
    
  </entry>
  
  <entry>
    <title>25. Reverse Nodes in k-Group(hard)</title>
    <link href="http://example.com/2022/08/28/25/"/>
    <id>http://example.com/2022/08/28/25/</id>
    <published>2022-08-28T18:59:57.000Z</published>
    <updated>2022-08-28T19:41:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="25-Reverse-Nodes-in-k-Group-hard"><a href="#25-Reverse-Nodes-in-k-Group-hard" class="headerlink" title="25. Reverse Nodes in k-Group(hard)"></a>25. Reverse Nodes in k-Group(hard)</h1><h2 id="Given-the-head-of-a-linked-list-reverse-the-nodes-of-the-list-k-at-a-time-and-return-the-modified-list"><a href="#Given-the-head-of-a-linked-list-reverse-the-nodes-of-the-list-k-at-a-time-and-return-the-modified-list" class="headerlink" title="Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list."></a>Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.</h2><h2 id="k-is-a-positive-integer-and-is-less-than-or-equal-to-the-length-of-the-linked-list-If-the-number-of-nodes-is-not-a-multiple-of-k-then-left-out-nodes-in-the-end-should-remain-as-it-is"><a href="#k-is-a-positive-integer-and-is-less-than-or-equal-to-the-length-of-the-linked-list-If-the-number-of-nodes-is-not-a-multiple-of-k-then-left-out-nodes-in-the-end-should-remain-as-it-is" class="headerlink" title="k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is."></a>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</h2><h2 id="You-may-not-alter-the-values-in-the-list’s-nodes-only-nodes-themselves-may-be-changed"><a href="#You-may-not-alter-the-values-in-the-list’s-nodes-only-nodes-themselves-may-be-changed" class="headerlink" title="You may not alter the values in the list’s nodes, only nodes themselves may be changed."></a>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], k = 2</span><br><span class="line">Output: [2,1,4,3,5]</span><br></pre></td></tr></table></figure><p><img src="https://labuladong.github.io/algo/images/kgroup/8.gif"></p><p>我们要实现一个 reverse 函数反转一个区间之内的元素。在此之前我们再简化一下，给定链表头结点，如何反转整个链表？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转以 a 为头结点的链表</span></span><br><span class="line"><span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode a)</span> </span>&#123;</span><br><span class="line">    ListNode pre, cur, nxt;</span><br><span class="line">    pre = <span class="keyword">null</span>; cur = a; nxt = a;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nxt = cur.next;</span><br><span class="line">        <span class="comment">// 逐个结点反转</span></span><br><span class="line">        cur.next = pre;</span><br><span class="line">        <span class="comment">// 更新指针位置</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nxt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回反转后的头结点</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次使用迭代思路来实现的，借助动画理解应该很容易。</p><p>「反转以 a 为头结点的链表」其实就是「反转 a 到 null 之间的结点」，那么如果让你「反转 a 到 b 之间的结点」，你会不会？</p><p>只要更改函数签名，并把上面的代码中 null 改成 b 即可：<br>Java原版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span></span><br><span class="line"><span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode a, ListNode b)</span> </span>&#123;</span><br><span class="line">    ListNode pre, cur, nxt;</span><br><span class="line">    pre = <span class="keyword">null</span>; cur = a; nxt = a;</span><br><span class="line">    <span class="comment">// while 终止的条件改一下就行了</span></span><br><span class="line">    <span class="keyword">while</span> (cur != b) &#123;</span><br><span class="line">        nxt = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = nxt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回反转后的头结点</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 改版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    pre= <span class="literal">None</span></span><br><span class="line">    current =a</span><br><span class="line">    nxt=a</span><br><span class="line">    <span class="keyword">while</span> (current!=b):</span><br><span class="line">        nxt = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = pre</span><br><span class="line">        pre = current</span><br><span class="line">        current = nxt</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们迭代实现了反转部分链表的功能，接下来就按照之前的逻辑编写 reverseKGroup 函数即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 区间 [a, b) 包含 k 个待反转元素</span></span><br><span class="line">    ListNode a, b;</span><br><span class="line">    a = b = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="comment">// 不足 k 个，不需要反转，base case</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        b = b.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转前 k 个元素</span></span><br><span class="line">    ListNode newHead = reverse(a, b);</span><br><span class="line">    <span class="comment">// 递归反转后续链表并连接起来</span></span><br><span class="line">    a.next = reverseKGroup(b, k);</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python 完整版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], k: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">a,b</span>):</span></span><br><span class="line">            pre= <span class="literal">None</span></span><br><span class="line">            current =a</span><br><span class="line">            nxt=a</span><br><span class="line">            <span class="keyword">while</span> (current!=b):</span><br><span class="line">                nxt = current.<span class="built_in">next</span></span><br><span class="line">                current.<span class="built_in">next</span> = pre</span><br><span class="line">                pre = current</span><br><span class="line">                current = nxt</span><br><span class="line">            <span class="keyword">return</span> pre</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        a= head</span><br><span class="line">        b = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="keyword">if</span> b ==<span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> head</span><br><span class="line">            b=b.<span class="built_in">next</span></span><br><span class="line">        newHead = reverse(a,b)</span><br><span class="line">        a.<span class="built_in">next</span> = self.reverseKGroup(b,k)</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;25-Reverse-Nodes-in-k-Group-hard&quot;&gt;&lt;a href=&quot;#25-Reverse-Nodes-in-k-Group-hard&quot; class=&quot;headerlink&quot; title=&quot;25. Reverse Nodes in k-Group</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
    <category term="recursion" scheme="http://example.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>92. Reverse Linked List II(medium)</title>
    <link href="http://example.com/2022/08/27/92/"/>
    <id>http://example.com/2022/08/27/92/</id>
    <published>2022-08-28T03:18:09.000Z</published>
    <updated>2022-08-28T03:41:11.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="92-Reverse-Linked-List-II-medium"><a href="#92-Reverse-Linked-List-II-medium" class="headerlink" title="92. Reverse Linked List II(medium)"></a>92. Reverse Linked List II(medium)</h1><h2 id="Given-the-head-of-a-singly-linked-list-and-two-integers-left-and-right-where-left-lt-right-reverse-the-nodes-of-the-list-from-position-left-to-position-right-and-return-the-reversed-list"><a href="#Given-the-head-of-a-singly-linked-list-and-two-integers-left-and-right-where-left-lt-right-reverse-the-nodes-of-the-list-from-position-left-to-position-right-and-return-the-reversed-list" class="headerlink" title="Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list."></a>Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list.</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span>(<span class="params">self, head: ListNode, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 设置 dummyNode 是这一类问题的一般做法</span></span><br><span class="line">        dummy_node = ListNode(-<span class="number">1</span>)</span><br><span class="line">        dummy_node.<span class="built_in">next</span> = head</span><br><span class="line">        pre = dummy_node</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left - <span class="number">1</span>):</span><br><span class="line">            pre = pre.<span class="built_in">next</span></span><br><span class="line">        cur = pre.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(right - left):</span><br><span class="line">            <span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> = <span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span>.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy_node.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>第一步<br><img src="https://pic.leetcode-cn.com/1615105296-bmiPxl-image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">cur.<span class="built_in">next</span> = <span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"><span class="built_in">next</span>.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">pre.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步<br><img src="https://pic.leetcode-cn.com/1615105340-UBnTBZ-image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;92-Reverse-Linked-List-II-medium&quot;&gt;&lt;a href=&quot;#92-Reverse-Linked-List-II-medium&quot; class=&quot;headerlink&quot; title=&quot;92. Reverse Linked List II(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
  <entry>
    <title>142. Linked List Cycle II(medium)</title>
    <link href="http://example.com/2022/08/27/142/"/>
    <id>http://example.com/2022/08/27/142/</id>
    <published>2022-08-27T21:52:08.000Z</published>
    <updated>2022-08-28T03:40:55.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="142-Linked-List-Cycle-II-medium"><a href="#142-Linked-List-Cycle-II-medium" class="headerlink" title="142. Linked List Cycle II(medium)"></a>142. Linked List Cycle II(medium)</h1><h3 id="快慢指针-leetcode题解"><a href="#快慢指针-leetcode题解" class="headerlink" title="快慢指针-leetcode题解"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/">快慢指针-leetcode题解</a></h3><p><img src="https://cdn.staticaly.com/gh/upuphero/image-hosting@master/142_fig1.4mi7jkj5o2g0.webp" alt="142"></p><p>思路与算法</p><p>我们使用两个指针，fast 与 slow。它们起始都位于链表的头部。随后，slow 指针每次向后移动一个位置，而 fast 指针向后移动两个位置。如果链表中存在环，则 fast 指针最终将再次与 slow 指针在环中相遇。</p><p>如下图所示，设链表中环外部分的长度为 a。slow 指针进入环后，又走了 bb 的距离与 fast 相遇。此时，fast 指针已经走完了环的 nn 圈，因此它走过的总距离为 a+n(b+c)+b=a+(n+1)b+nc。</p><p>根据题意，任意时刻，fast 指针走过的距离都为 slow 指针的 2 倍。因此，我们有</p><p>a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)</p><p>a=c+(n−1)(b+c)<br>有了 a=c+(n−1)(b+c) 的等量关系，我们会发现：从相遇点到入环点的距离加上 n−1 圈的环长，恰好等于从链表头部到入环点的距离。</p><p>因此，当发现 slow 与 fast 相遇时，我们再额外使用一个指针 ptr。起始，它指向链表头部；随后，它和 slow 每次向后移动一个位置。最终，它们会在入环点相遇。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        fast = head</span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> fast.<span class="built_in">next</span>:</span><br><span class="line">                fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> fast == slow:</span><br><span class="line">                ptr = head</span><br><span class="line">                <span class="keyword">while</span> ptr!=slow:</span><br><span class="line">                    ptr=ptr.<span class="built_in">next</span></span><br><span class="line">                    slow = slow.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> ptr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;142-Linked-List-Cycle-II-medium&quot;&gt;&lt;a href=&quot;#142-Linked-List-Cycle-II-medium&quot; class=&quot;headerlink&quot; title=&quot;142. Linked List Cycle II(medi</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Linked list" scheme="http://example.com/tags/Linked-list/"/>
    
  </entry>
  
</feed>
