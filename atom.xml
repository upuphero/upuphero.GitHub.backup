<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-05T19:34:27.205Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>409. Longest Palindrome(easy)</title>
    <link href="http://example.com/2022/11/05/409/"/>
    <id>http://example.com/2022/11/05/409/</id>
    <published>2022-11-05T19:32:25.000Z</published>
    <updated>2022-11-05T19:34:27.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="409-Longest-Palindrome-easy"><a href="#409-Longest-Palindrome-easy" class="headerlink" title="409. Longest Palindrome(easy)"></a>409. Longest Palindrome(easy)</h1><h2 id="Given-a-string-s-which-consists-of-lowercase-or-uppercase-letters-return-the-length-of-the-longest-palindrome-that-can-be-built-with-those-letters"><a href="#Given-a-string-s-which-consists-of-lowercase-or-uppercase-letters-return-the-length-of-the-longest-palindrome-that-can-be-built-with-those-letters" class="headerlink" title="Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters."></a>Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.</h2><h2 id="Letters-are-case-sensitive-for-example-“Aa”-is-not-considered-a-palindrome-here"><a href="#Letters-are-case-sensitive-for-example-“Aa”-is-not-considered-a-palindrome-here" class="headerlink" title="Letters are case sensitive, for example, “Aa” is not considered a palindrome here."></a>Letters are case sensitive, for example, “Aa” is not considered a palindrome here.</h2><p>这道题就是利用hashmap计数，然后偶数直接加到结果，奇数分情况讨论，只有一个的情况那就放到最后加在结果里，如果大于1的奇数，就在结果加上数量减1 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        result=Counter(s)</span><br><span class="line">        cnt=<span class="number">0</span></span><br><span class="line">        sums=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> cha <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">if</span> result[cha]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                sums+=result[cha]</span><br><span class="line">            <span class="keyword">elif</span> result[cha]%<span class="number">2</span>!=<span class="number">0</span> <span class="keyword">and</span> result[cha]&gt;<span class="number">2</span>:</span><br><span class="line">                sums+=result[cha]-<span class="number">1</span></span><br><span class="line">                cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt!=<span class="number">0</span>:</span><br><span class="line">            sums+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sums</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;409-Longest-Palindrome-easy&quot;&gt;&lt;a href=&quot;#409-Longest-Palindrome-easy&quot; class=&quot;headerlink&quot; title=&quot;409. Longest Palindrome(easy)&quot;&gt;&lt;/a&gt;409</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="Counter" scheme="http://example.com/tags/Counter/"/>
    
  </entry>
  
  <entry>
    <title>412. Fizz Buzz(easy)</title>
    <link href="http://example.com/2022/11/05/412/"/>
    <id>http://example.com/2022/11/05/412/</id>
    <published>2022-11-05T19:23:22.000Z</published>
    <updated>2022-11-05T19:24:36.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="412-Fizz-Buzz"><a href="#412-Fizz-Buzz" class="headerlink" title="412. Fizz Buzz"></a>412. Fizz Buzz</h1><h2 id="Given-an-integer-n-return-a-string-array-answer-1-indexed-where"><a href="#Given-an-integer-n-return-a-string-array-answer-1-indexed-where" class="headerlink" title="Given an integer n, return a string array answer (1-indexed) where:"></a>Given an integer n, return a string array answer (1-indexed) where:</h2><p>answer[i] == “FizzBuzz” if i is divisible by 3 and 5.<br>answer[i] == “Fizz” if i is divisible by 3.<br>answer[i] == “Buzz” if i is divisible by 5.<br>answer[i] == i (as a string) if none of the above conditions are true.</p><p>这道题是hackerrank一开始遇到的题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fizzBuzz</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        result=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">3</span> ==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;FizzBuzz&quot;</span>)                </span><br><span class="line">            <span class="keyword">elif</span> i%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;Fizz&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;Buzz&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;412-Fizz-Buzz&quot;&gt;&lt;a href=&quot;#412-Fizz-Buzz&quot; class=&quot;headerlink&quot; title=&quot;412. Fizz Buzz&quot;&gt;&lt;/a&gt;412. Fizz Buzz&lt;/h1&gt;&lt;h2 id=&quot;Given-an-integer-n-</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>1636. Sort Array by Increasing Frequency(easy)</title>
    <link href="http://example.com/2022/10/31/1636/"/>
    <id>http://example.com/2022/10/31/1636/</id>
    <published>2022-11-01T01:50:56.000Z</published>
    <updated>2022-11-01T02:08:08.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1636-Sort-Array-by-Increasing-Frequency-easy"><a href="#1636-Sort-Array-by-Increasing-Frequency-easy" class="headerlink" title="1636. Sort Array by Increasing Frequency(easy)"></a>1636. Sort Array by Increasing Frequency(easy)</h1><h2 id="Given-an-array-of-integers-nums-sort-the-array-in-increasing-order-based-on-the-frequency-of-the-values-If-multiple-values-have-the-same-frequency-sort-them-in-decreasing-order"><a href="#Given-an-array-of-integers-nums-sort-the-array-in-increasing-order-based-on-the-frequency-of-the-values-If-multiple-values-have-the-same-frequency-sort-them-in-decreasing-order" class="headerlink" title="Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order."></a>Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</h2><h2 id="Return-the-sorted-array"><a href="#Return-the-sorted-array" class="headerlink" title="Return the sorted array."></a>Return the sorted array.</h2><p>对hashmap的value进行升序排序，简单但有用<br>当frequency相同时，数值按降序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frequencySort</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        cnt=Counter(nums)</span><br><span class="line">        nums.sort(key=<span class="keyword">lambda</span> x:(cnt[x],-x) )</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例：<br>输入nums = [2,3,1,3,2]<br>得到 cnt : Counter({2: 2, 3: 2, 1: 1})</p><p>无参的 sort() 会依次对nums的值升序排序<br>而 sort(key) 会先把nums的值传给表达式key,按照key返回的值大小再给对应的nums排序<br>第1次传2，(cnt[2], -2)) 得到 (2,-2)<br>第2次传3，(cnt[3], -3)) 得到 (2,-3)<br>第3次传1，(cnt[1], -1)) 得到 (1,-1)<br>第4次传3，(cnt[3], -3)) 得到 (2,-3)<br>第5次传2，(cnt[2], -2)) 得到 (2,-2)<br>排序顺序为(1,-1),(2,-3),(2,-3),(2,-2),(2,-2)<br>对应的nums的值为1,3,3,2,2</p><p>sort是针对于列表的排列方法。默认升序排序。key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。此处传入的是一个元组，先以第一个字段进行排列。第一个字段一样，再以第二个字段进行排序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1636-Sort-Array-by-Increasing-Frequency-easy&quot;&gt;&lt;a href=&quot;#1636-Sort-Array-by-Increasing-Frequency-easy&quot; class=&quot;headerlink&quot; title=&quot;1636</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>8. String to Integer (atoi)(medium)</title>
    <link href="http://example.com/2022/10/19/8/"/>
    <id>http://example.com/2022/10/19/8/</id>
    <published>2022-10-19T20:41:22.000Z</published>
    <updated>2022-10-19T21:37:33.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-String-to-Integer-atoi-medium"><a href="#8-String-to-Integer-atoi-medium" class="headerlink" title="8. String to Integer (atoi)(medium)"></a>8. String to Integer (atoi)(medium)</h1><h2 id="Implement-the-myAtoi-string-s-function-which-converts-a-string-to-a-32-bit-signed-integer-similar-to-C-C-’s-atoi-function"><a href="#Implement-the-myAtoi-string-s-function-which-converts-a-string-to-a-32-bit-signed-integer-similar-to-C-C-’s-atoi-function" class="headerlink" title="Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++’s atoi function)."></a>Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++’s atoi function).</h2><h2 id="The-algorithm-for-myAtoi-string-s-is-as-follows"><a href="#The-algorithm-for-myAtoi-string-s-is-as-follows" class="headerlink" title="The algorithm for myAtoi(string s) is as follows:"></a>The algorithm for myAtoi(string s) is as follows:</h2><p>Read in and ignore any leading whitespace.<br>Check if the next character (if not already at the end of the string) is ‘-‘ or ‘+’. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.<br>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.<br>Convert these digits into an integer (i.e. “123” -&gt; 123, “0032” -&gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).<br>If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.<br>Return the integer as the final result.</p><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;42&quot;</span><br><span class="line">输出：42</span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;42&quot;（读入 &quot;42&quot;）</span><br><span class="line">           ^</span><br><span class="line">解析得到整数 42 。</span><br><span class="line">由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br></pre></td></tr></table></figure><h3 id="方法一：正则表达式"><a href="#方法一：正则表达式" class="headerlink" title="方法一：正则表达式"></a>方法一：<a href="https://leetcode.cn/problems/string-to-integer-atoi/solution/python-1xing-zheng-ze-biao-da-shi-by-knifezhu/">正则表达式</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(<span class="built_in">int</span>(*re.findall(<span class="string">&#x27;^[\+\-]?\d+&#x27;</span>, s.lstrip())), <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>), -<span class="number">2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正则表达re模块</span><br><span class="line">re.findall</span><br><span class="line">返回string中所有与pattern匹配的全部字符串,返回形式为数组。</span><br><span class="line">^：匹配字符串开头</span><br><span class="line">[\+\-]：代表一个+字符或-字符</span><br><span class="line">?：前面一个字符可有可无</span><br><span class="line">\d：一个数字</span><br><span class="line">+：前面一个字符的一个或多个</span><br><span class="line">\D：一个非数字字符</span><br><span class="line">*：前面一个字符的0个或多个</span><br><span class="line">Python lstrip() 方法用于截掉字符串左边的空格或指定字符</span><br></pre></td></tr></table></figure><p>详细版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        INT_MAX = <span class="number">2147483647</span>    </span><br><span class="line">        INT_MIN = -<span class="number">2147483648</span></span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>.lstrip()      <span class="comment">#清除左边多余的空格</span></span><br><span class="line">        num_re = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[\+\-]?\d+&#x27;</span>)   <span class="comment">#设置正则规则</span></span><br><span class="line">        num = num_re.findall(<span class="built_in">str</span>)   <span class="comment">#查找匹配的内容</span></span><br><span class="line">        num = <span class="built_in">int</span>(*num) <span class="comment">#由于返回的是个列表，解包并且转换成整数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(num,INT_MAX),INT_MIN)    <span class="comment">#返回值</span></span><br></pre></td></tr></table></figure><h3 id="方法二：有限状态机"><a href="#方法二：有限状态机" class="headerlink" title="方法二：有限状态机"></a>方法二：<a href="https://leetcode.cn/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/">有限状态机</a></h3><p>准确地说，这是确定有限状态机（deterministic finite automaton, DFA）。</p><p>我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 s’ 的表格即可解决题目中的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span></span><br><span class="line">INT_MIN = -<span class="number">2</span> ** <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.state = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        self.sign = <span class="number">1</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.table = &#123;</span><br><span class="line">            <span class="string">&#x27;start&#x27;</span>: [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;signed&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;signed&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;in_number&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;end&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_col</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">if</span> c.isspace():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c.isdigit():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        self.state = self.table[self.state][self.get_col(c)]</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;in_number&#x27;</span>:</span><br><span class="line">            self.ans = self.ans * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, INT_MAX) <span class="keyword">if</span> self.sign == <span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(self.ans, -INT_MIN)</span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;signed&#x27;</span>:</span><br><span class="line">            self.sign = <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        automaton = Automaton()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            automaton.get(c)</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;8-String-to-Integer-atoi-medium&quot;&gt;&lt;a href=&quot;#8-String-to-Integer-atoi-medium&quot; class=&quot;headerlink&quot; title=&quot;8. String to Integer (atoi)(me</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="DFA" scheme="http://example.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode16-deterministic-finite-automaton</title>
    <link href="http://example.com/2022/10/19/LeetCode16-deterministic-finite-automaton/"/>
    <id>http://example.com/2022/10/19/LeetCode16-deterministic-finite-automaton/</id>
    <published>2022-10-19T20:36:03.000Z</published>
    <updated>2022-10-20T01:11:32.338Z</updated>
    
    <content type="html"><![CDATA[<p>确定有限状态机（deterministic finite automaton, DFA）。</p><p>我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 s’ 的表格即可解决题目中的问题。</p><ol start="8"><li><p>String to Integer (atoi)(medium)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span></span><br><span class="line">INT_MIN = -<span class="number">2</span> ** <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.state = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        self.sign = <span class="number">1</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.table = &#123;</span><br><span class="line">            <span class="string">&#x27;start&#x27;</span>: [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;signed&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;signed&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;in_number&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;end&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_col</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">if</span> c.isspace():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c.isdigit():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        self.state = self.table[self.state][self.get_col(c)]</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;in_number&#x27;</span>:</span><br><span class="line">            self.ans = self.ans * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, INT_MAX) <span class="keyword">if</span> self.sign == <span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(self.ans, -INT_MIN)</span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;signed&#x27;</span>:</span><br><span class="line">            self.sign = <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        automaton = Automaton()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            automaton.get(c)</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans</span><br></pre></td></tr></table></figure></li><li><p>有效数字</p></li><li><p>UTF-8 Validation</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;确定有限状态机（deterministic finite automaton, DFA）。&lt;/p&gt;
&lt;p&gt;我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="DFA" scheme="http://example.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>692. Top K Frequent Words</title>
    <link href="http://example.com/2022/10/18/692/"/>
    <id>http://example.com/2022/10/18/692/</id>
    <published>2022-10-19T03:12:48.000Z</published>
    <updated>2022-10-19T20:47:41.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings"><a href="#Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings" class="headerlink" title="Given an array of strings words and an integer k, return the k most frequent strings."></a>Given an array of strings words and an integer k, return the k most frequent strings.</h2><h2 id="Return-the-answer-sorted-by-the-frequency-from-highest-to-lowest-Sort-the-words-with-the-same-frequency-by-their-lexicographical-order"><a href="#Return-the-answer-sorted-by-the-frequency-from-highest-to-lowest-Sort-the-words-with-the-same-frequency-by-their-lexicographical-order" class="headerlink" title="Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order."></a>Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.</h2><p>Top K问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: words = [&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;,&quot;i&quot;,&quot;love&quot;,&quot;coding&quot;], k = 2</span><br><span class="line">Output: [&quot;i&quot;,&quot;love&quot;]</span><br><span class="line">Explanation: &quot;i&quot; and &quot;love&quot; are the two most frequent words.</span><br><span class="line">Note that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-words/solution/by-sunguodong-3tov/">Leetcode题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        counter = Counter(words)</span><br><span class="line">        occur = <span class="built_in">list</span>(counter.items())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.heapify(occur, i, k)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(occur)):</span><br><span class="line">            <span class="keyword">if</span> occur[i][<span class="number">1</span>] &gt; occur[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">or</span> occur[i][<span class="number">1</span>] == occur[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">and</span> occur[i][<span class="number">0</span>] &lt; occur[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">                occur[i], occur[<span class="number">0</span>] = occur[<span class="number">0</span>], occur[i]</span><br><span class="line">                self.heapify(occur, <span class="number">0</span>, k)</span><br><span class="line">        ans = deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            ans.appendleft(occur[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            occur[<span class="number">0</span>] = occur[k - <span class="number">1</span> - i]</span><br><span class="line">            self.heapify(occur, <span class="number">0</span>, k - <span class="number">1</span> - i)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(ans)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span>(<span class="params">self, heap: <span class="type">List</span>[<span class="type">Tuple</span>], root: <span class="built_in">int</span>, length: <span class="built_in">int</span></span>):</span></span><br><span class="line">        smallest = root</span><br><span class="line">        left = <span class="number">2</span> * root + <span class="number">1</span></span><br><span class="line">        right = left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; length <span class="keyword">and</span> (heap[left][<span class="number">1</span>] &lt; heap[smallest][<span class="number">1</span>] <span class="keyword">or</span> heap[left][<span class="number">1</span>] == heap[smallest][<span class="number">1</span>] <span class="keyword">and</span> heap[left][<span class="number">0</span>] &gt; heap[smallest][<span class="number">0</span>]):</span><br><span class="line">            smallest = left</span><br><span class="line">        <span class="keyword">if</span> right &lt; length <span class="keyword">and</span> (heap[right][<span class="number">1</span>] &lt; heap[smallest][<span class="number">1</span>] <span class="keyword">or</span> heap[right][<span class="number">1</span>] == heap[smallest][<span class="number">1</span>] <span class="keyword">and</span> heap[right][<span class="number">0</span>] &gt; heap[smallest][<span class="number">0</span>]):</span><br><span class="line">            smallest = right</span><br><span class="line">        <span class="keyword">if</span> smallest != root:</span><br><span class="line">            heap[smallest], heap[root] = heap[root], heap[smallest]</span><br><span class="line">            self.heapify(heap, smallest, length)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings&quot;&gt;&lt;a href=&quot;#Given-an-array-of-strings-words-and-a</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>38. Count and Say(medium)</title>
    <link href="http://example.com/2022/10/18/38/"/>
    <id>http://example.com/2022/10/18/38/</id>
    <published>2022-10-18T04:06:16.000Z</published>
    <updated>2022-10-19T20:47:26.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="38-Count-and-Say-medium"><a href="#38-Count-and-Say-medium" class="headerlink" title="38. Count and Say(medium)"></a>38. Count and Say(medium)</h1><h2 id="The-count-and-say-sequence-is-a-sequence-of-digit-strings-defined-by-the-recursive-formula"><a href="#The-count-and-say-sequence-is-a-sequence-of-digit-strings-defined-by-the-recursive-formula" class="headerlink" title="The count-and-say sequence is a sequence of digit strings defined by the recursive formula:"></a>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:</h2><p>countAndSay(1) = “1”</p><h2 id="countAndSay-n-is-the-way-you-would-“say”-the-digit-string-from-countAndSay-n-1-which-is-then-converted-into-a-different-digit-string"><a href="#countAndSay-n-is-the-way-you-would-“say”-the-digit-string-from-countAndSay-n-1-which-is-then-converted-into-a-different-digit-string" class="headerlink" title="countAndSay(n) is the way you would “say” the digit string from countAndSay(n-1), which is then converted into a different digit string."></a>countAndSay(n) is the way you would “say” the digit string from countAndSay(n-1), which is then converted into a different digit string.</h2><h2 id="To-determine-how-you-“say”-a-digit-string-split-it-into-the-minimal-number-of-substrings-such-that-each-substring-contains-exactly-one-unique-digit-Then-for-each-substring-say-the-number-of-digits-then-say-the-digit-Finally-concatenate-every-said-digit"><a href="#To-determine-how-you-“say”-a-digit-string-split-it-into-the-minimal-number-of-substrings-such-that-each-substring-contains-exactly-one-unique-digit-Then-for-each-substring-say-the-number-of-digits-then-say-the-digit-Finally-concatenate-every-said-digit" class="headerlink" title="To determine how you “say” a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit."></a>To determine how you “say” a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</h2><h2 id="For-example-the-saying-and-conversion-for-digit-string-“3322251”"><a href="#For-example-the-saying-and-conversion-for-digit-string-“3322251”" class="headerlink" title="For example, the saying and conversion for digit string “3322251”:"></a>For example, the saying and conversion for digit string “3322251”:</h2><h2 id="Given-a-positive-integer-n-return-the-nth-term-of-the-count-and-say-sequence"><a href="#Given-a-positive-integer-n-return-the-nth-term-of-the-count-and-say-sequence" class="headerlink" title="Given a positive integer n, return the nth term of the count-and-say sequence."></a>Given a positive integer n, return the nth term of the count-and-say sequence.</h2><p>说实话这道题给的例子让人非常疑惑，但其实就是一个类似于斐波那契数列的递归数列,国区题库的题目描述更详细也更准确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">第一项是数字 1 </span><br><span class="line">描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &quot;11&quot;</span><br><span class="line">描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &quot;21&quot;</span><br><span class="line">描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &quot;1211&quot;</span><br><span class="line">描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &quot;111221&quot;</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/count-and-say/solution/wai-guan-shu-lie-by-leetcode-solution-9rt8/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:<span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">        res=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            new_res=[]</span><br><span class="line">            num=<span class="number">1</span></span><br><span class="line">            cur=res[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> res[<span class="number">1</span>:]:</span><br><span class="line">                <span class="keyword">if</span> s ==cur:</span><br><span class="line">                    num+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_res.append(num)</span><br><span class="line">                    new_res.append(cur)</span><br><span class="line">                    num=<span class="number">1</span></span><br><span class="line">                    cur=s</span><br><span class="line">            new_res.append(num)</span><br><span class="line">            new_res.append(cur)</span><br><span class="line">            res=new_res</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,res)))</span><br></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>def square(x) :         # 计算平方数<br>…     return x ** 2<br>…<br>map(square, [1,2,3,4,5])    # 计算列表各个元素的平方</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>list(map(square, [1,2,3,4,5]))   # 使用 list() 转换为列表<br>[1, 4, 9, 16, 25]<br>list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))   # 使用 lambda 匿名函数<br>[1, 4, 9, 16, 25]</p></blockquote></blockquote></blockquote><p>```</p><p>比如n=6,res=[3,1,2,2,1,1],通过map函数list(map(str,res))以后是[‘3’, ‘1’, ‘2’, ‘2’, ‘1’, ‘1’]。<br>再通过’’.join()函数将list里的字符连在一起<br>就这道题而言，转不转换成list都不影响结果，’’.join(map(str,res))也是可以的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;38-Count-and-Say-medium&quot;&gt;&lt;a href=&quot;#38-Count-and-Say-medium&quot; class=&quot;headerlink&quot; title=&quot;38. Count and Say(medium)&quot;&gt;&lt;/a&gt;38. Count and S</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>4. Median of Two Sorted Arrays(hard)</title>
    <link href="http://example.com/2022/10/17/4/"/>
    <id>http://example.com/2022/10/17/4/</id>
    <published>2022-10-17T20:06:08.000Z</published>
    <updated>2022-10-19T20:46:57.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-Median-of-Two-Sorted-Arrays-hard"><a href="#4-Median-of-Two-Sorted-Arrays-hard" class="headerlink" title="4. Median of Two Sorted Arrays(hard)"></a>4. Median of Two Sorted Arrays(hard)</h1><h2 id="Given-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-return-the-median-of-the-two-sorted-arrays"><a href="#Given-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-return-the-median-of-the-two-sorted-arrays" class="headerlink" title="Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays."></a>Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.</h2><h2 id="The-overall-run-time-complexity-should-be-O-log-m-n"><a href="#The-overall-run-time-complexity-should-be-O-log-m-n" class="headerlink" title="The overall run time complexity should be O(log (m+n))."></a>The overall run time complexity should be O(log (m+n)).</h2><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solution/shuang-zhi-zhen-by-powcai/">leetcode题解</a></h3><p>这道题如果时间复杂度没有限定在 O(log(m+n))，我们可以用 O(m+n) 的算法解决，用两个指针分别指向两个数组，比较指针下的元素大小，一共移动次数为 (m+n + 1)/2，便是中位数。</p><p>首先，我们理解什么中位数：指的是该数左右个数相等。</p><p>比如：odd : [1,| 2 |,3]，2 就是这个数组的中位数，左右两边都只要 1 位；</p><p>even: [1,| 2, 3 |,4]，2,3 就是这个数组的中位数，左右两边 1 位；</p><p>那么，现在我们有两个数组：</p><p>num1: [a1,a2,a3,…an]</p><p>nums2: [b1,b2,b3,…bn]</p><p>[nums1[:left1],nums2[:left2] | nums1[left1:], nums2[left2:]]</p><p>只要保证左右两边 个数 相同，中位数就在 | 这个边界旁边产生。</p><p>如何找边界值，我们可以用二分法，我们先确定 num1 取 m1 个数的左半边，那么 num2 取 m2 = (m+n+1)/2 - m1 的左半边，找到合适的 m1，就用二分法找。</p><p>当 [ [a1],[b1,b2,b3] | [a2,..an],[b4,…bn] ]</p><p>我们只需要比较 b3 和 a2 的关系的大小，就可以知道这种分法是不是准确的！</p><p>例如：我们令：</p><p>nums1 = [-1,1,3,5,7,9]</p><p>nums2 =[2,4,6,8,10,12,14,16]</p><p>当 m1 = 4,m2 = 3 ,它的中位数就是median = (num1[m1] + num2[m2])/2</p><p>时间复杂度：O(log(min(m,n)))</p><p>对于代码中边界情况，大家需要自己琢磨。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">        <span class="keyword">if</span> m &gt; n: <span class="keyword">return</span> self.findMedianSortedArrays(nums2, nums1)</span><br><span class="line">        left, right = <span class="number">0</span>, m</span><br><span class="line">        half = (m + n + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            i = (left + right) // <span class="number">2</span></span><br><span class="line">            j = half - i</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[j - <span class="number">1</span>]:</span><br><span class="line">                left = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = i</span><br><span class="line">        i, j = left, half - left</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            mid1 = nums2[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">            mid1 = nums1[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid1 = <span class="built_in">max</span>(nums1[i - <span class="number">1</span>], nums2[j - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> (m + n) &amp; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> mid1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            mid2 = nums2[j]</span><br><span class="line">        <span class="keyword">elif</span> j == n:</span><br><span class="line">            mid2 = nums1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid2 = <span class="built_in">min</span>(nums1[i], nums2[j])</span><br><span class="line">        <span class="keyword">return</span> (mid1 + mid2) / <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-Median-of-Two-Sorted-Arrays-hard&quot;&gt;&lt;a href=&quot;#4-Median-of-Two-Sorted-Arrays-hard&quot; class=&quot;headerlink&quot; title=&quot;4. Median of Two Sorted </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>1832. Check if the Sentence Is Pangram(easy)</title>
    <link href="http://example.com/2022/10/17/1832/"/>
    <id>http://example.com/2022/10/17/1832/</id>
    <published>2022-10-17T19:15:49.000Z</published>
    <updated>2022-10-19T20:46:32.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1832-Check-if-the-Sentence-Is-Pangram-easy"><a href="#1832-Check-if-the-Sentence-Is-Pangram-easy" class="headerlink" title="1832. Check if the Sentence Is Pangram(easy)"></a>1832. Check if the Sentence Is Pangram(easy)</h1><h2 id="A-pangram-is-a-sentence-where-every-letter-of-the-English-alphabet-appears-at-least-once"><a href="#A-pangram-is-a-sentence-where-every-letter-of-the-English-alphabet-appears-at-least-once" class="headerlink" title="A pangram is a sentence where every letter of the English alphabet appears at least once."></a>A pangram is a sentence where every letter of the English alphabet appears at least once.</h2><h2 id="Given-a-string-sentence-containing-only-lowercase-English-letters-return-true-if-sentence-is-a-pangram-or-false-otherwise"><a href="#Given-a-string-sentence-containing-only-lowercase-English-letters-return-true-if-sentence-is-a-pangram-or-false-otherwise" class="headerlink" title="Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise."></a>Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.</h2><p>利用set的特性判断无重复后是否有26个字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPangram</span>(<span class="params">self, sentence: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sentence)&lt;=<span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(sentence))==<span class="number">26</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1832-Check-if-the-Sentence-Is-Pangram-easy&quot;&gt;&lt;a href=&quot;#1832-Check-if-the-Sentence-Is-Pangram-easy&quot; class=&quot;headerlink&quot; title=&quot;1832. Ch</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>7. Reverse Integer(medium)</title>
    <link href="http://example.com/2022/10/16/7/"/>
    <id>http://example.com/2022/10/16/7/</id>
    <published>2022-10-16T21:07:02.000Z</published>
    <updated>2022-10-19T20:43:39.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-Reverse-Integer-medium"><a href="#7-Reverse-Integer-medium" class="headerlink" title="7. Reverse Integer(medium)"></a>7. Reverse Integer(medium)</h1><h2 id="Given-a-signed-32-bit-integer-x-return-x-with-its-digits-reversed-If-reversing-x-causes-the-value-to-go-outside-the-signed-32-bit-integer-range-2-31-2-31-1-then-return-0"><a href="#Given-a-signed-32-bit-integer-x-return-x-with-its-digits-reversed-If-reversing-x-causes-the-value-to-go-outside-the-signed-32-bit-integer-range-2-31-2-31-1-then-return-0" class="headerlink" title="Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."></a>Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.</h2><h2 id="Assume-the-environment-does-not-allow-you-to-store-64-bit-integers-signed-or-unsigned"><a href="#Assume-the-environment-does-not-allow-you-to-store-64-bit-integers-signed-or-unsigned" class="headerlink" title="Assume the environment does not allow you to store 64-bit integers (signed or unsigned)."></a>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</h2><p><a href="https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/">leetcodde题解</a><br>初始解：将数组转换成字符串，从后往前输出字符串得到结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_force</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">if</span> -<span class="number">10</span> &lt; x &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    str_x = <span class="built_in">str</span>(x)</span><br><span class="line">    <span class="keyword">if</span> str_x[<span class="number">0</span>] != <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        str_x = str_x[::-<span class="number">1</span>]</span><br><span class="line">        x = <span class="built_in">int</span>(str_x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str_x = str_x[:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">        x = <span class="built_in">int</span>(str_x)</span><br><span class="line">        x = -x</span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> -<span class="number">2147483648</span> &lt; x &lt; <span class="number">2147483647</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>优化解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        y, res = <span class="built_in">abs</span>(x), <span class="number">0</span></span><br><span class="line">        <span class="comment"># 则其数值范围为 [−2^31,  2^31 − 1]</span></span><br><span class="line">        boundry = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>) -<span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> y != <span class="number">0</span>:</span><br><span class="line">            res = res*<span class="number">10</span> +y%<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> res &gt; boundry :</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            y //=<span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> x &gt;<span class="number">0</span> <span class="keyword">else</span> -res</span><br></pre></td></tr></table></figure><p>这题没有考什么深的东西，不过可以复习一下 python 的字符运算语法：</p><p>复习一下 python 的位运算符：</p><p>(a &amp; b)<br>按位与运算符：参与运算的两个值，如果两个相应位都为 1，则该位的结果为 1，否则为 0 。<br>输出结果 12 ，二进制解释： 0000 1100</p><p>(a | b)<br>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。<br>输出结果 61 ，二进制解释： 0011 1101</p><p>(a ^ b)<br>按位异或运算符：当两对应的二进位相异时，结果为 1<br>输出结果 49 ，二进制解释： 0011 0001</p><p>(<del>a )<br>按位取反运算符：对数据的每个二进制位取反，即把 1 变为 0，把 0 变为 1 。</del>x 类似于 -x-1<br>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</p><p>a &lt;&lt; 2<br>左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补 0。<br>输出结果 240 ，二进制解释： 1111 0000</p><p>a &gt;&gt; 2<br>右移动运算符：把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数<br>输出结果 15 ，二进制解释： 0000 1111</p><p>python 赋值运算符：</p><p>*= 乘法赋值运算符 c *= a 等效于 c = c * a<br>/= 除法赋值运算符 c /= a 等效于 c = c / a<br>%= 取模赋值运算符 c %= a 等效于 c = c % a<br>**= 幂赋值运算符 c **= a 等效于 c = c ** a<br>//= 取整除赋值运算符 c //= a 等效于 c = c // a</p><p>作者：stray_camel<br>链接：<a href="https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/">https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;7-Reverse-Integer-medium&quot;&gt;&lt;a href=&quot;#7-Reverse-Integer-medium&quot; class=&quot;headerlink&quot; title=&quot;7. Reverse Integer(medium)&quot;&gt;&lt;/a&gt;7. Reverse I</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>2095. Delete the Middle Node of a Linked List(medium)</title>
    <link href="http://example.com/2022/10/14/2095/"/>
    <id>http://example.com/2022/10/14/2095/</id>
    <published>2022-10-14T21:03:19.000Z</published>
    <updated>2022-10-14T21:05:52.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2095-Delete-the-Middle-Node-of-a-Linked-List-medium"><a href="#2095-Delete-the-Middle-Node-of-a-Linked-List-medium" class="headerlink" title="2095. Delete the Middle Node of a Linked List(medium)"></a>2095. Delete the Middle Node of a Linked List(medium)</h1><p>You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.</p><p>The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.</p><p>For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.</p><p>思路：<br>先遍历一遍链表，判断链表总长度，然后算出一半的长度n在哪里<br>最后遍历到n-1的位置，跳过位置n直接连到n+1</p><pre><code class="python"># Definition for singly-linked list.# class ListNode:#     def __init__(self, val=0, next=None):#         self.val = val#         self.next = nextclass Solution:    def deleteMiddle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:        if head.next==None:            return None        n=0        p1=p2=head        while p1:            p1=p1.next            n+=1        k=n//2        for i in range(k-1):            p2=p2.next                #p2.next=p2.next.next        p2.next = p2.next.next        return head</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2095-Delete-the-Middle-Node-of-a-Linked-List-medium&quot;&gt;&lt;a href=&quot;#2095-Delete-the-Middle-Node-of-a-Linked-List-medium&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="linked-list" scheme="http://example.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>401. Binary Watch(easy)</title>
    <link href="http://example.com/2022/10/12/401/"/>
    <id>http://example.com/2022/10/12/401/</id>
    <published>2022-10-13T02:42:37.000Z</published>
    <updated>2022-10-13T02:46:08.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="401-Binary-Watch-easy"><a href="#401-Binary-Watch-easy" class="headerlink" title="401. Binary Watch(easy)"></a>401. Binary Watch(easy)</h1><h2 id="A-binary-watch-has-4-LEDs-on-the-top-to-represent-the-hours-0-11-and-6-LEDs-on-the-bottom-to-represent-the-minutes-0-59-Each-LED-represents-a-zero-or-one-with-the-least-significant-bit-on-the-right"><a href="#A-binary-watch-has-4-LEDs-on-the-top-to-represent-the-hours-0-11-and-6-LEDs-on-the-bottom-to-represent-the-minutes-0-59-Each-LED-represents-a-zero-or-one-with-the-least-significant-bit-on-the-right" class="headerlink" title="A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right."></a>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</h2><p>For example, the below binary watch reads “4:51”.</p><p>一共十个灯，四个是二进制显示小时，六个是二进制显示分钟</p><h1 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/binary-watch/solution/er-jin-zhi-shou-biao-by-leetcode-solutio-3559/">官方题解</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readBinaryWatch</span>(<span class="params">self, turnedOn: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">bin</span>(h).count(<span class="string">&quot;1&quot;</span>) + <span class="built_in">bin</span>(m).count(<span class="string">&quot;1&quot;</span>) == turnedOn:</span><br><span class="line">                    ans.append(<span class="string">f&quot;<span class="subst">&#123;h&#125;</span>:<span class="subst">&#123;m:02d&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>由题意可知，小时由 4 个比特表示，分钟由 6 个比特表示，比特位值为 0 表示灯灭，为 1 表示灯亮。</p><p>我们可以枚举小时的所有可能值 [0,11]，以及分钟的所有可能值 [0,59]，并计算二者的二进制中 1 的个数之和，若为 turnedOn，则将其加入到答案中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;401-Binary-Watch-easy&quot;&gt;&lt;a href=&quot;#401-Binary-Watch-easy&quot; class=&quot;headerlink&quot; title=&quot;401. Binary Watch(easy)&quot;&gt;&lt;/a&gt;401. Binary Watch(eas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>404. Sum of Left Leaves(easy)</title>
    <link href="http://example.com/2022/10/12/404/"/>
    <id>http://example.com/2022/10/12/404/</id>
    <published>2022-10-13T02:39:05.000Z</published>
    <updated>2022-10-13T02:40:11.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="404-Sum-of-Left-Leaves-easy"><a href="#404-Sum-of-Left-Leaves-easy" class="headerlink" title="404. Sum of Left Leaves(easy)"></a>404. Sum of Left Leaves(easy)</h1><h2 id="Given-the-root-of-a-binary-tree-return-the-sum-of-all-left-leaves"><a href="#Given-the-root-of-a-binary-tree-return-the-sum-of-all-left-leaves" class="headerlink" title="Given the root of a binary tree, return the sum of all left leaves."></a>Given the root of a binary tree, return the sum of all left leaves.</h2><h2 id="A-leaf-is-a-node-with-no-children-A-left-leaf-is-a-leaf-that-is-the-left-child-of-another-node"><a href="#A-leaf-is-a-node-with-no-children-A-left-leaf-is-a-leaf-that-is-the-left-child-of-another-node" class="headerlink" title="A leaf is a node with no children. A left leaf is a leaf that is the left child of another node."></a>A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.</h2><p>左子树之和</p><h2 id="Leetcode题解"><a href="#Leetcode题解" class="headerlink" title="Leetcode题解"></a><a href="https://leetcode.com/problems/sum-of-left-leaves/solutions/1558055/c-python-recursive-iterative-dfs-bfs-morris-traversal-o-1-w-explanation-beats-100/">Leetcode题解</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumOfLeftLeaves</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root, isLeft</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                <span class="keyword">return</span> root.val <span class="keyword">if</span> isLeft <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> dfs(root.left, <span class="literal">True</span>) + dfs(root.right, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> dfs(root, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;404-Sum-of-Left-Leaves-easy&quot;&gt;&lt;a href=&quot;#404-Sum-of-Left-Leaves-easy&quot; class=&quot;headerlink&quot; title=&quot;404. Sum of Left Leaves(easy)&quot;&gt;&lt;/a&gt;404</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="tree" scheme="http://example.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>389. Find the Difference(easy)</title>
    <link href="http://example.com/2022/10/12/389/"/>
    <id>http://example.com/2022/10/12/389/</id>
    <published>2022-10-13T02:31:15.000Z</published>
    <updated>2022-10-13T02:35:22.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="389-Find-the-Difference-easy"><a href="#389-Find-the-Difference-easy" class="headerlink" title="389. Find the Difference(easy)"></a>389. Find the Difference(easy)</h1><h2 id="You-are-given-two-strings-s-and-t"><a href="#You-are-given-two-strings-s-and-t" class="headerlink" title="You are given two strings s and t."></a>You are given two strings s and t.</h2><p>String t is generated by random shuffling string s and then add one more letter at a random position.</p><p>Return the letter that was added to t.</p><p>这题和383. Ransom Note(easy)方法几乎一样<br>用counter得到每个字母和对应的个数，第一步判断是不是s里没有的字母，然后把个数不断减去，减到负数，那个负数的就是多出来的那一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        l1=Counter(s)</span><br><span class="line">        l2=Counter(t)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">return</span> char</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l1[char]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l1[char]&lt;<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> char</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;389-Find-the-Difference-easy&quot;&gt;&lt;a href=&quot;#389-Find-the-Difference-easy&quot; class=&quot;headerlink&quot; title=&quot;389. Find the Difference(easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>237. Delete Node in a Linked List(medium)</title>
    <link href="http://example.com/2022/10/12/237/"/>
    <id>http://example.com/2022/10/12/237/</id>
    <published>2022-10-13T02:22:00.000Z</published>
    <updated>2022-10-13T02:24:07.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="237-Delete-Node-in-a-Linked-List-medium"><a href="#237-Delete-Node-in-a-Linked-List-medium" class="headerlink" title="237. Delete Node in a Linked List(medium)"></a>237. Delete Node in a Linked List(medium)</h1><h2 id="There-is-a-singly-linked-list-head-and-we-want-to-delete-a-node-node-in-it"><a href="#There-is-a-singly-linked-list-head-and-we-want-to-delete-a-node-node-in-it" class="headerlink" title="There is a singly-linked list head and we want to delete a node node in it."></a>There is a singly-linked list head and we want to delete a node node in it.</h2><h2 id="You-are-given-the-node-to-be-deleted-node-You-will-not-be-given-access-to-the-first-node-of-head"><a href="#You-are-given-the-node-to-be-deleted-node-You-will-not-be-given-access-to-the-first-node-of-head" class="headerlink" title="You are given the node to be deleted node. You will not be given access to the first node of head."></a>You are given the node to be deleted node. You will not be given access to the first node of head.</h2><h2 id="All-the-values-of-the-linked-list-are-unique-and-it-is-guaranteed-that-the-given-node-node-is-not-the-last-node-in-the-linked-list"><a href="#All-the-values-of-the-linked-list-are-unique-and-it-is-guaranteed-that-the-given-node-node-is-not-the-last-node-in-the-linked-list" class="headerlink" title="All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list."></a>All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.</h2><h2 id="Delete-the-given-node-Note-that-by-deleting-the-node-we-do-not-mean-removing-it-from-memory-We-mean"><a href="#Delete-the-given-node-Note-that-by-deleting-the-node-we-do-not-mean-removing-it-from-memory-We-mean" class="headerlink" title="Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:"></a>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</h2><p>The value of the given node should not exist in the linked list.<br>The number of nodes in the linked list should decrease by one.<br>All the values before node should be in the same order.<br>All the values after node should be in the same order.</p><h2 id="Custom-testing"><a href="#Custom-testing" class="headerlink" title="Custom testing:"></a>Custom testing:</h2><p>For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.<br>We will build the linked list and pass the node to your function.<br>The output will be the entire list after calling your function.</p><p>这题其实很简单，因为只给了需要删除的节点node，所以只需要使node的val等于下一个节点的值，当前node的下一个链接到下下个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        node.val=node.<span class="built_in">next</span>.val</span><br><span class="line">        node.<span class="built_in">next</span>=node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;237-Delete-Node-in-a-Linked-List-medium&quot;&gt;&lt;a href=&quot;#237-Delete-Node-in-a-Linked-List-medium&quot; class=&quot;headerlink&quot; title=&quot;237. Delete No</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="linked-list" scheme="http://example.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>383. Ransom Note(easy)</title>
    <link href="http://example.com/2022/10/12/383/"/>
    <id>http://example.com/2022/10/12/383/</id>
    <published>2022-10-13T02:15:46.000Z</published>
    <updated>2022-10-13T02:36:08.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="383-Ransom-Note-easy"><a href="#383-Ransom-Note-easy" class="headerlink" title="383. Ransom Note(easy)"></a>383. Ransom Note(easy)</h1><h2 id="Given-two-strings-ransomNote-and-magazine-return-true-if-ransomNote-can-be-constructed-by-using-the-letters-from-magazine-and-false-otherwise"><a href="#Given-two-strings-ransomNote-and-magazine-return-true-if-ransomNote-can-be-constructed-by-using-the-letters-from-magazine-and-false-otherwise" class="headerlink" title="Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise."></a>Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.</h2><h2 id="Each-letter-in-magazine-can-only-be-used-once-in-ransomNote"><a href="#Each-letter-in-magazine-can-only-be-used-once-in-ransomNote" class="headerlink" title="Each letter in magazine can only be used once in ransomNote."></a>Each letter in magazine can only be used once in ransomNote.</h2><p>用counter得到每个字母和对应的个数，第一步判断是不是magazine有所有的字母，然后把个数不断减去，减到负数，证明个数不够</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line"></span><br><span class="line">        l1=Counter(ransomNote)</span><br><span class="line">        l2=Counter(magazine)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> ransomNote:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> magazine:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2[ch]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l2[ch]&lt;<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;383-Ransom-Note-easy&quot;&gt;&lt;a href=&quot;#383-Ransom-Note-easy&quot; class=&quot;headerlink&quot; title=&quot;383. Ransom Note(easy)&quot;&gt;&lt;/a&gt;383. Ransom Note(easy)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>374. Guess Number Higher or Lower(easy)</title>
    <link href="http://example.com/2022/10/12/374/"/>
    <id>http://example.com/2022/10/12/374/</id>
    <published>2022-10-12T21:56:32.000Z</published>
    <updated>2022-10-12T22:00:38.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="374-Guess-Number-Higher-or-Lower-easy"><a href="#374-Guess-Number-Higher-or-Lower-easy" class="headerlink" title="374. Guess Number Higher or Lower(easy)"></a>374. Guess Number Higher or Lower(easy)</h1><h2 id="We-are-playing-the-Guess-Game-The-game-is-as-follows"><a href="#We-are-playing-the-Guess-Game-The-game-is-as-follows" class="headerlink" title="We are playing the Guess Game. The game is as follows:"></a>We are playing the Guess Game. The game is as follows:</h2><p>I pick a number from 1 to n. You have to guess which number I picked.</p><p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p><p>You call a pre-defined API int guess(int num), which returns three possible results:</p><p>-1: Your guess is higher than the number I picked (i.e. num &gt; pick).<br>1: Your guess is lower than the number I picked (i.e. num &lt; pick).<br>0: your guess is equal to the number I picked (i.e. num == pick).<br>Return the number that I picked.</p><p>猜数字，本身有个内置函数guess(),一开始就直接写循环挨个算是不是相等，发现后面超时，所以改用二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The guess API is already defined for you.</span></span><br><span class="line"><span class="comment"># @param num, your guess</span></span><br><span class="line"><span class="comment"># @return -1 if num is higher than the picked number</span></span><br><span class="line"><span class="comment">#          1 if num is lower than the picked number</span></span><br><span class="line"><span class="comment">#          otherwise return 0</span></span><br><span class="line"><span class="comment"># def guess(num: int) -&gt; int:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        low=<span class="number">1</span></span><br><span class="line">        high=n</span><br><span class="line">        <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">            mid = low + (high - low) // <span class="number">2</span></span><br><span class="line">            res=guess(mid)</span><br><span class="line">            <span class="keyword">if</span> res==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> res&lt;<span class="number">0</span>:</span><br><span class="line">                high = mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;374-Guess-Number-Higher-or-Lower-easy&quot;&gt;&lt;a href=&quot;#374-Guess-Number-Higher-or-Lower-easy&quot; class=&quot;headerlink&quot; title=&quot;374. Guess Number </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>346. Moving Average from Data Stream(easy)</title>
    <link href="http://example.com/2022/10/12/346/"/>
    <id>http://example.com/2022/10/12/346/</id>
    <published>2022-10-12T21:37:58.000Z</published>
    <updated>2022-10-13T02:06:24.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="346-Moving-Average-from-Data-Stream-easy"><a href="#346-Moving-Average-from-Data-Stream-easy" class="headerlink" title="346. Moving Average from Data Stream(easy)"></a>346. Moving Average from Data Stream(easy)</h1><h2 id="Given-a-stream-of-integers-and-a-window-size-calculate-the-moving-average-of-all-integers-in-the-sliding-window"><a href="#Given-a-stream-of-integers-and-a-window-size-calculate-the-moving-average-of-all-integers-in-the-sliding-window" class="headerlink" title="Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window."></a>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</h2><h2 id="Implement-the-MovingAverage-class"><a href="#Implement-the-MovingAverage-class" class="headerlink" title="Implement the MovingAverage class:"></a>Implement the MovingAverage class:</h2><p>MovingAverage(int size) Initializes the object with the size of the window size.<br>double next(int val) Returns the moving average of the last size values of the stream.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MovingAverage&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]</span><br><span class="line">[[3], [1], [10], [3], [5]]</span><br><span class="line">Output</span><br><span class="line">[null, 1.0, 5.5, 4.66667, 6.0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MovingAverage movingAverage = new MovingAverage(3);</span><br><span class="line">movingAverage.next(1); // return 1.0 = 1 / 1</span><br><span class="line">movingAverage.next(10); // return 5.5 = (1 + 10) / 2</span><br><span class="line">movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3</span><br><span class="line">movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovingAverage</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.res=[]</span><br><span class="line">        self.size=size</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        queue=self.res</span><br><span class="line">        size=self.size</span><br><span class="line">        queue.append(val)</span><br><span class="line">        window_sum=<span class="built_in">sum</span>(queue[-size:])</span><br><span class="line">        <span class="keyword">return</span> window_sum/<span class="built_in">min</span>(<span class="built_in">len</span>(queue),size)</span><br><span class="line"><span class="comment"># Your MovingAverage object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MovingAverage(size)</span></span><br><span class="line"><span class="comment"># param_1 = obj.next(val)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;346-Moving-Average-from-Data-Stream-easy&quot;&gt;&lt;a href=&quot;#346-Moving-Average-from-Data-Stream-easy&quot; class=&quot;headerlink&quot; title=&quot;346. Moving </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Data structure design" scheme="http://example.com/tags/Data-structure-design/"/>
    
  </entry>
  
  <entry>
    <title>157. Read N Characters Given Read4(easy)</title>
    <link href="http://example.com/2022/10/12/157/"/>
    <id>http://example.com/2022/10/12/157/</id>
    <published>2022-10-12T21:30:01.000Z</published>
    <updated>2022-10-12T21:59:48.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="157-Read-N-Characters-Given-Read4-easy"><a href="#157-Read-N-Characters-Given-Read4-easy" class="headerlink" title="157. Read N Characters Given Read4(easy)"></a>157. Read N Characters Given Read4(easy)</h1><h2 id="Given-a-file-and-assume-that-you-can-only-read-the-file-using-a-given-method-read4-implement-a-method-to-read-n-characters"><a href="#Given-a-file-and-assume-that-you-can-only-read-the-file-using-a-given-method-read4-implement-a-method-to-read-n-characters" class="headerlink" title="Given a file and assume that you can only read the file using a given method read4, implement a method to read n characters."></a>Given a file and assume that you can only read the file using a given method read4, implement a method to read n characters.</h2><h2 id="Method-read4"><a href="#Method-read4" class="headerlink" title="Method read4:"></a>Method read4:</h2><p>The API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.</p><p>The return value is the number of actual characters read.</p><p>Note that read4() has its own file pointer, much like FILE *fp in C.</p><h2 id="Definition-of-read4"><a href="#Definition-of-read4" class="headerlink" title="Definition of read4:"></a>Definition of read4:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Parameter:  char[] buf4</span><br><span class="line">    Returns:    int</span><br><span class="line"></span><br><span class="line">buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].</span><br></pre></td></tr></table></figure><p>给你一个文件，并且该文件只能通过给定的 read4 方法来读取，请实现一个方法使其能够读取 n 个字符。</p><p>read4 方法：</p><p>API read4 可以从文件中读取 4 个连续的字符，并且将它们写入缓存数组 buf 中。</p><p>返回值为实际读取的字符个数。</p><p>注意 read4() 自身拥有文件指针，很类似于 C 语言中的 FILE *fp 。</p><p>read4 的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数类型: char[] buf4</span><br><span class="line">返回类型: int</span><br><span class="line">注意: buf4[] 是目标缓存区不是源缓存区，read4 的返回结果将会复制到 buf4[] 当中。</span><br></pre></td></tr></table></figure><p>read 方法：<br>通过使用 read4 方法，实现 read 方法。该方法可以从文件中读取 n 个字符并将其存储到缓存数组 buf 中。您 不能 直接操作文件。</p><p>返回值为实际读取的字符。</p><p>read 的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数类型: char[] buf, int n</span><br><span class="line">返回类型: int</span><br><span class="line">注意: buf[] 是目标缓存区不是源缓存区，你需要将结果写入 buf[] 中。</span><br></pre></td></tr></table></figure><h4 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你不能直接操作该文件，文件只能通过 read4 获取而 不能 通过 read。</span><br><span class="line">read 函数只在每个测试用例调用一次。</span><br><span class="line">你可以假定目标缓存数组 buf 保证有足够的空间存下 n 个字符。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The read4 API is already defined for you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param buf4, a list of characters</span></span><br><span class="line"><span class="string">    @return an integer</span></span><br><span class="line"><span class="string">    def read4(buf4):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Below is an example of how the read4 API can be called.</span></span><br><span class="line"><span class="string">file = File(&quot;abcdefghijk&quot;) # File is &quot;abcdefghijk&quot;, initially file pointer (fp) points to &#x27;a&#x27;</span></span><br><span class="line"><span class="string">buf4 = [&#x27; &#x27;] * 4 # Create buffer with enough space to store characters</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 4. Now buf = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;], fp points to &#x27;e&#x27;</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 4. Now buf = [&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;,&#x27;h&#x27;], fp points to &#x27;i&#x27;</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 3. Now buf = [&#x27;i&#x27;,&#x27;j&#x27;,&#x27;k&#x27;,...], fp points to end of file</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self, buf, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type buf: Destination buffer (List[str])</span></span><br><span class="line"><span class="string">        :type n: Number of characters to read (int)</span></span><br><span class="line"><span class="string">        :rtype: The number of actual characters read (int)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        temp = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        count = read4(temp)</span><br><span class="line">        s = temp[:count]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= n: <span class="keyword">break</span></span><br><span class="line">            count = read4(temp)</span><br><span class="line">            s += temp[:count]</span><br><span class="line">            </span><br><span class="line">        total = <span class="built_in">min</span>(n, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total):</span><br><span class="line">            buf[i] = s[i]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;157-Read-N-Characters-Given-Read4-easy&quot;&gt;&lt;a href=&quot;#157-Read-N-Characters-Given-Read4-easy&quot; class=&quot;headerlink&quot; title=&quot;157. Read N Char</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>2434. Using a Robot to Print the Lexicographically Smallest String(medium)</title>
    <link href="http://example.com/2022/10/12/2434/"/>
    <id>http://example.com/2022/10/12/2434/</id>
    <published>2022-10-12T21:15:24.000Z</published>
    <updated>2022-10-12T21:31:48.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium"><a href="#2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium" class="headerlink" title="2434. Using a Robot to Print the Lexicographically Smallest String(medium)"></a>2434. Using a Robot to Print the Lexicographically Smallest String(medium)</h1><h2 id="You-are-given-a-string-s-and-a-robot-that-currently-holds-an-empty-string-t-Apply-one-of-the-following-operations-until-s-and-t-are-both-empty"><a href="#You-are-given-a-string-s-and-a-robot-that-currently-holds-an-empty-string-t-Apply-one-of-the-following-operations-until-s-and-t-are-both-empty" class="headerlink" title="You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:"></a>You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:</h2><p>Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.<br>Remove the last character of a string t and give it to the robot. The robot will write this character on paper.</p><h2 id="Return-the-lexicographically-smallest-string-that-can-be-written-on-the-paper"><a href="#Return-the-lexicographically-smallest-string-that-can-be-written-on-the-paper" class="headerlink" title="Return the lexicographically smallest string that can be written on the paper."></a>Return the lexicographically smallest string that can be written on the paper.</h2><p>周赛题，一道关于栈的题 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robotWithString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        </span><br><span class="line">        d, stack, ans = Counter(s), [], []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            </span><br><span class="line">            d[ch]-= <span class="number">1</span></span><br><span class="line">            stack.append(ch)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> d[ch]: d.pop(ch)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> d <span class="keyword">and</span> stack <span class="keyword">and</span> <span class="built_in">min</span>(d) &gt;= stack[-<span class="number">1</span>]:</span><br><span class="line">                ans += stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(ans + stack[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium&quot;&gt;&lt;a href=&quot;#2434-Using-a-Robot-to-Print-the-Lexicographicall</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
</feed>
