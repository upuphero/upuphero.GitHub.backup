<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-25T20:24:50.593Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>622. Design Circular Queue(medium)</title>
    <link href="http://example.com/2022/09/25/622/"/>
    <id>http://example.com/2022/09/25/622/</id>
    <published>2022-09-25T14:36:01.000Z</published>
    <updated>2022-09-25T20:24:50.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="622-Design-Circular-Queue-medium"><a href="#622-Design-Circular-Queue-medium" class="headerlink" title="622. Design Circular Queue(medium)"></a>622. Design Circular Queue(medium)</h1><h2 id="Design-your-implementation-of-the-circular-queue-The-circular-queue-is-a-linear-data-structure-in-which-the-operations-are-performed-based-on-FIFO-First-In-First-Out-principle-and-the-last-position-is-connected-back-to-the-first-position-to-make-a-circle-It-is-also-called-“Ring-Buffer”"><a href="#Design-your-implementation-of-the-circular-queue-The-circular-queue-is-a-linear-data-structure-in-which-the-operations-are-performed-based-on-FIFO-First-In-First-Out-principle-and-the-last-position-is-connected-back-to-the-first-position-to-make-a-circle-It-is-also-called-“Ring-Buffer”" class="headerlink" title="Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”."></a>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”.</h2><h2 id="One-of-the-benefits-of-the-circular-queue-is-that-we-can-make-use-of-the-spaces-in-front-of-the-queue-In-a-normal-queue-once-the-queue-becomes-full-we-cannot-insert-the-next-element-even-if-there-is-a-space-in-front-of-the-queue-But-using-the-circular-queue-we-can-use-the-space-to-store-new-values"><a href="#One-of-the-benefits-of-the-circular-queue-is-that-we-can-make-use-of-the-spaces-in-front-of-the-queue-In-a-normal-queue-once-the-queue-becomes-full-we-cannot-insert-the-next-element-even-if-there-is-a-space-in-front-of-the-queue-But-using-the-circular-queue-we-can-use-the-space-to-store-new-values" class="headerlink" title="One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values."></a>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</h2><h2 id="Implementation-the-MyCircularQueue-class"><a href="#Implementation-the-MyCircularQueue-class" class="headerlink" title="Implementation the MyCircularQueue class:"></a>Implementation the MyCircularQueue class:</h2><p>MyCircularQueue(k) Initializes the object with the size of the queue to be k.<br>int Front() Gets the front item from the queue. If the queue is empty, return -1.<br>int Rear() Gets the last item from the queue. If the queue is empty, return -1.<br>boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.<br>boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.<br>boolean isEmpty() Checks whether the circular queue is empty or not.<br>boolean isFull() Checks whether the circular queue is full or not.</p><h2 id="You-must-solve-the-problem-without-using-the-built-in-queue-data-structure-in-your-programming-language"><a href="#You-must-solve-the-problem-without-using-the-built-in-queue-data-structure-in-your-programming-language" class="headerlink" title="You must solve the problem without using the built-in queue data structure in your programming language."></a>You must solve the problem without using the built-in queue data structure in your programming language.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MyCircularQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;, &quot;isFull&quot;, &quot;deQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;]</span><br><span class="line">[[3], [1], [2], [3], [4], [], [], [], [4], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, true, true, false, 3, true, true, true, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyCircularQueue myCircularQueue = new MyCircularQueue(3);</span><br><span class="line">myCircularQueue.enQueue(1); // return True</span><br><span class="line">myCircularQueue.enQueue(2); // return True</span><br><span class="line">myCircularQueue.enQueue(3); // return True</span><br><span class="line">myCircularQueue.enQueue(4); // return False</span><br><span class="line">myCircularQueue.Rear();     // return 3</span><br><span class="line">myCircularQueue.isFull();   // return True</span><br><span class="line">myCircularQueue.deQueue();  // return True</span><br><span class="line">myCircularQueue.enQueue(4); // return True</span><br><span class="line">myCircularQueue.Rear();     // return 4</span><br></pre></td></tr></table></figure><p>循环队列就是将队列存储空间的最后一个位置绕到第一个位置，形成逻辑上的环状空间，供队列循环使用。在循环队列结构中，当存储空间的最后一个位置已被使用而再要进入队运算时，只需要存储空间的第一个位置空闲，便可将元素加入到第一个位置，即将存储空间的第一个位置作为队尾。循环队列可以更简单防止伪溢出的发生，但队列大小是固定的。</p><p>在循环队列中，当队列为空时，有front=rear，而当所有队列空间全占满时，也有front=rear。为了区别这两种情况，规定循环队列最多只能有MaxSize-1个队列元素，当循环队列中只剩下一个空存储单元时，队列就已经满了。因此，队列判空的条件是front=rear，而队列判满的条件是front=（rear+1)%MaxSize。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/design-circular-queue/solution/she-ji-xun-huan-dui-lie-by-leetcode-solu-1w0a/">Solution</a></h3><p>对于一个固定大小的数组，只要知道队尾 rear 与队首 front，即可计算出队列当前的长度：<br>front=（rear+1)%capacity</p><p>循环队列的属性如下:<br>elements：一个固定大小的数组，用于保存循环队列的元素。<br>capacity：循环队列的容量，即队列中最多可以容纳的元素数量。<br>front：队列首元素对应的数组的索引。<br>rear：队列尾元素对应的索引的下一个索引。<br>循环队列的接口方法如下：</p><p>MyCircularQueue(int k): 初始化队列，同时base 数组的空间初始化大小为 k + 1。front,rear 全部初始化为 0。<br>enQueue(int value)：在队列的尾部插入一个元素，并同时将队尾的索引 rear 更新为 (rear+1)%capacity。<br>deQueue()：从队首取出一个元素，并同时将队首的索引 front 更新为 (front+1)% capacity。<br>Front()：返回队首的元素，需要检测队列是否为空。<br>Rear()：返回队尾的元素，需要检测队列是否为空。<br>isEmpty()：检测队列是否为空，根据之前的定义只需判断 rear 是否等于 front。<br>isFull()：检测队列是否已满，根据之前的定义只需判断 front 是否等于 (rear+1)% capacity。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, k: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.front=self.rear=<span class="number">0</span></span><br><span class="line">        self.elements=[<span class="number">0</span>]*(k+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enQueue</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.elements[self.rear]=value</span><br><span class="line">        self.rear=(self.rear+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deQueue</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.front=(self.front+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Front</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> self.isEmpty() <span class="keyword">else</span> self.elements[self.front]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Rear</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> self.isEmpty() <span class="keyword">else</span> self.elements[(self.rear - <span class="number">1</span>) % <span class="built_in">len</span>(self.elements)]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.rear==self.front</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFull</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.rear+<span class="number">1</span>)%<span class="built_in">len</span>(self.elements)==self.front</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCircularQueue(k)</span></span><br><span class="line"><span class="comment"># param_1 = obj.enQueue(value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.deQueue()</span></span><br><span class="line"><span class="comment"># param_3 = obj.Front()</span></span><br><span class="line"><span class="comment"># param_4 = obj.Rear()</span></span><br><span class="line"><span class="comment"># param_5 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"># param_6 = obj.isFull()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;622-Design-Circular-Queue-medium&quot;&gt;&lt;a href=&quot;#622-Design-Circular-Queue-medium&quot; class=&quot;headerlink&quot; title=&quot;622. Design Circular Queue(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="Circular Queue" scheme="http://example.com/tags/Circular-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1002. Find Common Characters(easy)</title>
    <link href="http://example.com/2022/09/25/1002/"/>
    <id>http://example.com/2022/09/25/1002/</id>
    <published>2022-09-25T04:12:49.000Z</published>
    <updated>2022-09-25T04:15:30.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1002-Find-Common-Characters-easy"><a href="#1002-Find-Common-Characters-easy" class="headerlink" title="1002. Find Common Characters(easy)"></a>1002. Find Common Characters(easy)</h1><h2 id="Given-a-string-array-words-return-an-array-of-all-characters-that-show-up-in-all-strings-within-the-words-including-duplicates-You-may-return-the-answer-in-any-order"><a href="#Given-a-string-array-words-return-an-array-of-all-characters-that-show-up-in-all-strings-within-the-words-including-duplicates-You-may-return-the-answer-in-any-order" class="headerlink" title="Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order."></a>Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: words = [&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]</span><br><span class="line">Output: [&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]</span><br></pre></td></tr></table></figure><p>这个就是利用hashmap判断数量和是否存在，然后用&amp;=判断相同值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonChars</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        res = collections.Counter(words[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            res &amp;=collections.Counter(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(res.elements())    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1002-Find-Common-Characters-easy&quot;&gt;&lt;a href=&quot;#1002-Find-Common-Characters-easy&quot; class=&quot;headerlink&quot; title=&quot;1002. Find Common Characters</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>1081. Smallest Subsequence of Distinct Characters(medium)</title>
    <link href="http://example.com/2022/09/24/1081/"/>
    <id>http://example.com/2022/09/24/1081/</id>
    <published>2022-09-24T21:03:22.000Z</published>
    <updated>2022-09-24T22:28:54.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1081-Smallest-Subsequence-of-Distinct-Characters-medium"><a href="#1081-Smallest-Subsequence-of-Distinct-Characters-medium" class="headerlink" title="1081. Smallest Subsequence of Distinct Characters(medium)"></a>1081. Smallest Subsequence of Distinct Characters(medium)</h1><h2 id="Given-a-string-s-return-the-lexicographically-smallest-subsequence-of-s-that-contains-all-the-distinct-characters-of-s-exactly-once"><a href="#Given-a-string-s-return-the-lexicographically-smallest-subsequence-of-s-that-contains-all-the-distinct-characters-of-s-exactly-once" class="headerlink" title="Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once."></a>Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><p>这题和316一模一样，代码不需要更改</p><pre><code>class Solution:    def smallestSubsequence(self, s: str) -&gt; str:        stack=[]        remain_counter=collections.Counter(s)        for c in s:            if c not in stack:                while stack and c&lt;stack[-1] and remain_counter[stack[-1]]&gt;0:                    stack.pop()                stack.append(c)            remain_counter[c]-=1        return &#39;&#39;.join(stack)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1081-Smallest-Subsequence-of-Distinct-Characters-medium&quot;&gt;&lt;a href=&quot;#1081-Smallest-Subsequence-of-Distinct-Characters-medium&quot; class=&quot;h</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>321. Create Maximum Number(hard)</title>
    <link href="http://example.com/2022/09/24/321/"/>
    <id>http://example.com/2022/09/24/321/</id>
    <published>2022-09-24T21:02:41.000Z</published>
    <updated>2022-09-24T22:28:32.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="321-Create-Maximum-Number-hard"><a href="#321-Create-Maximum-Number-hard" class="headerlink" title="321. Create Maximum Number(hard)"></a>321. Create Maximum Number(hard)</h1><h2 id="You-are-given-two-integer-arrays-nums1-and-nums2-of-lengths-m-and-n-respectively-nums1-and-nums2-represent-the-digits-of-two-numbers-You-are-also-given-an-integer-k"><a href="#You-are-given-two-integer-arrays-nums1-and-nums2-of-lengths-m-and-n-respectively-nums1-and-nums2-represent-the-digits-of-two-numbers-You-are-also-given-an-integer-k" class="headerlink" title="You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k."></a>You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.</h2><h2 id="Create-the-maximum-number-of-length-k-lt-m-n-from-digits-of-the-two-numbers-The-relative-order-of-the-digits-from-the-same-array-must-be-preserved"><a href="#Create-the-maximum-number-of-length-k-lt-m-n-from-digits-of-the-two-numbers-The-relative-order-of-the-digits-from-the-same-array-must-be-preserved" class="headerlink" title="Create the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved."></a>Create the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.</h2><h2 id="Return-an-array-of-the-k-digits-representing-the-answer"><a href="#Return-an-array-of-the-k-digits-representing-the-answer" class="headerlink" title="Return an array of the k digits representing the answer."></a>Return an array of the k digits representing the answer.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5</span><br><span class="line">Output: [9,8,6,5,3]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ol><li>分治</li><li>数学<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3>和316. 去除重复字母 类似，只不不过这一次是两个数组，而不是一个，并且是求最大数。</li></ol><p>最大最小是无关紧要的，关键在于是两个数组，并且要求从两个数组选取的元素个数加起来一共是 k。</p><p>然而在一个数组中取 k 个数字，并保持其最小（或者最大），我们已经会了。但是如果问题扩展到两个，会有什么变化呢？</p><p>实际上，问题本质并没有发生变化。 假设我们从 nums1 中取了 k1 个，从 num2 中取了 k2 个，其中 k1 + k2 = k。而 k1 和 k2 这 两个子问题我们是会解决的。由于这两个子问题是相互独立的，因此我们只需要分别求解，然后将结果合并即可。</p><p>假如 k1 和 k2 个数字，已经取出来了。那么剩下要做的就是将这个长度分别为 k1 和 k2 的数字，合并成一个长度为 k 的数组合并成一个最大的数组。</p><p>以题目的 nums1 = [3, 4, 6, 5] nums2 = [9, 1, 2, 5, 8, 3] k = 5 为例。 假如我们从 num1 中取出 1 个数字，那么就要从 nums2 中取出 4 个数字。</p><p>运用第一题的方法，我们计算出应该取 nums1 的 [6]，并取 nums2 的 [9,5,8,3]。 如何将 [6] 和 [9,5,8,3]，使得数字尽可能大，并且保持相对位置不变呢？</p><p>实际上这个过程有点类似归并排序中的治，而上面我们分别计算 num1 和 num2 的最大数的过程类似归并排序中的分。</p><p>我们将从 num1 中挑选的 k1 个数组成的数组称之为 A，将从 num2 中挑选的 k2 个数组成的数组称之为 B，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> A <span class="keyword">or</span> B:</span><br><span class="line">        bigger = A <span class="keyword">if</span> A &gt; B <span class="keyword">else</span> B</span><br><span class="line">        ans.append(bigger[<span class="number">0</span>])</span><br><span class="line">        bigger.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>这里需要说明一下。 在很多编程语言中：如果 A 和 B 是两个数组，当前仅当 A 的首个元素字典序大于 B 的首个元素，A &gt; B 返回 true，否则返回 false。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = [1,2]</span><br><span class="line">B = [2]</span><br><span class="line">A &lt; B # True</span><br><span class="line"></span><br><span class="line">A = [1,2]</span><br><span class="line">B = [1,2,3]</span><br><span class="line">A &lt; B # False</span><br></pre></td></tr></table></figure><h3 id="具体算法："><a href="#具体算法：" class="headerlink" title="具体算法："></a>具体算法：</h3><p>从 nums1 中 取 min(i, len(nums1)) 个数形成新的数组 A（取的逻辑同第一题），其中 i 等于 0,1,2, … k。<br>从 nums2 中 对应取 min(j, len(nums2)) 个数形成新的数组 B（取的逻辑同第一题），其中 j 等于 k - i。<br>将 A 和 B 按照上面的 merge 方法合并<br>上面我们暴力了 k 种组合情况，我们只需要将 k 种情况取出最大值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span>(<span class="params">self, nums1, nums2, k</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">pick_max</span>(<span class="params">nums, k</span>):</span></span><br><span class="line">            stack = []</span><br><span class="line">            drop = <span class="built_in">len</span>(nums) - k</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">while</span> drop <span class="keyword">and</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt; num:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    drop -= <span class="number">1</span></span><br><span class="line">                stack.append(num)</span><br><span class="line">            <span class="keyword">return</span> stack[:k]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">A, B</span>):</span></span><br><span class="line">            ans = []</span><br><span class="line">            <span class="keyword">while</span> A <span class="keyword">or</span> B:</span><br><span class="line">                bigger = A <span class="keyword">if</span> A &gt; B <span class="keyword">else</span> B</span><br><span class="line">                ans.append(bigger[<span class="number">0</span>])</span><br><span class="line">                bigger.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(merge(pick_max(nums1, i), pick_max(nums2, k-i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>) <span class="keyword">if</span> i &lt;= <span class="built_in">len</span>(nums1) <span class="keyword">and</span> k-i &lt;= <span class="built_in">len</span>(nums2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：pick_max 的时间复杂度为 O(M + N)O(M+N) ，其中 MM 为 nums1 的长度，NN 为 nums2 的长度。 merge 的时间复杂度为 O(k)O(k)，再加上外层遍历所有的 k 中可能性。因此总的时间复杂度为 O(k^2 * (M + N))O(k^2 ∗(M+N))。<br>空间复杂度：我们使用了额外的 stack 和 ans 数组，因此空间复杂度为 O(max(M, N, k))，其中 MM 为 nums1 的长度，NN 为 nums2 的长度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;321-Create-Maximum-Number-hard&quot;&gt;&lt;a href=&quot;#321-Create-Maximum-Number-hard&quot; class=&quot;headerlink&quot; title=&quot;321. Create Maximum Number(hard)</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>316. Remove Duplicate Letters</title>
    <link href="http://example.com/2022/09/24/316/"/>
    <id>http://example.com/2022/09/24/316/</id>
    <published>2022-09-24T19:58:55.000Z</published>
    <updated>2022-09-24T22:28:06.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="316-Remove-Duplicate-Letters-medium"><a href="#316-Remove-Duplicate-Letters-medium" class="headerlink" title="316. Remove Duplicate Letters(medium)"></a>316. Remove Duplicate Letters(medium)</h1><h2 id="Given-a-string-s-remove-duplicate-letters-so-that-every-letter-appears-once-and-only-once-You-must-make-sure-your-result-is-the-smallest-in-lexicographical-order-among-all-possible-results"><a href="#Given-a-string-s-remove-duplicate-letters-so-that-every-letter-appears-once-and-only-once-You-must-make-sure-your-result-is-the-smallest-in-lexicographical-order-among-all-possible-results" class="headerlink" title="Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results."></a>Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;bcabc&quot;</span><br><span class="line">Output: &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><p>这道题和402. 移掉 K 位数字(中等)差不多，也是利用栈的特性减少时间复杂度</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>哈希表在python中可以用collections.Counter计数来体现。<br>该方法用于统计某序列中每个元素出现的次数，以键值对的方式存在字典中。但类型其实是Counter。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">counts = collections.Counter(nums)</span><br><span class="line"><span class="built_in">print</span>(counts)</span><br><span class="line"><span class="comment">## Counter(&#123;1: 3, 2: 2, 3: 1&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>凭借这个结构，可以计算出某个序列中出现次数最多的某个元素。也即在得到了counts之后求max即可。但这个max需要给依据索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(counts)) <span class="comment"># 3，这里只是求得最大的键值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(counts.keys(), key=counts.get)) <span class="comment"># 1，这里是按照key方法求最大</span></span><br></pre></td></tr></table></figure><p>这里max是两个参数，前一个代表要max的是什么，也就是要返回最大键，后面的key代表要返回的最大的依据是什么，默认是本身，但这里给了key方法，count.get也就是求值，所以该方法就是说返回一个最大键，但这个最大的依据是值。如果某个键值对的值是最大的，那就返回其键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>(counts)</span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="number">1</span>)) <span class="comment"># 4 get在字典中就是传一个键，根据键求对应的值。</span></span><br></pre></td></tr></table></figure><p>前面是一种理解，但max的两个参数也可以理解为key后面的方法是要将前面的第一个参数作为参数，也就是counts.keys()要作为counts.get的参数，然后求max。即get键对应的值，然后返回最大的值对应的键（感觉python中存在很多这种情况，比如lambda表达式，后面也是传一个func来将前面的参数带入）</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>字典序<br>数学<br>思路<br>与上面题目不同，这道题没有一个全局的删除次数 k。而是对于每一个在字符串 s 中出现的字母 c 都有一个 k 值。这个 k 是 c 出现次数 - 1。</p><p>沿用上面的知识的话，我们首先要做的就是计算每一个字符的 k，可以用一个字典来描述这种关系，其中 key 为 字符 c，value 为其出现的次数。</p><h3 id="具体算法："><a href="#具体算法：" class="headerlink" title="具体算法："></a>具体算法：</h3><p>建立一个字典。其中 key 为 字符 c，value 为其出现的剩余次数。<br>从左往右遍历字符串，每次遍历到一个字符，其剩余出现次数 - 1.<br>对于每一个字符，如果其对应的剩余出现次数大于 1，我们可以选择丢弃（也可以选择不丢弃），否则不可以丢弃。<br>是否丢弃的标准和上面题目类似。如果栈中相邻的元素字典序更大，那么我们选择丢弃相邻的栈中的元素。<br>还记得上面题目的边界条件么？如果栈中剩下的元素大于 n - kn−k，我们选择截取前 n - kn−k 个数字。然而本题中的 k 是分散在各个字符中的，因此这种思路不可行的。</p><p>不过不必担心。由于题目是要求只出现一次。我们可以在遍历的时候简单地判断其是否在栈上即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span>(<span class="params">self, s</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        remain_counter = collections.Counter(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> c &lt; stack[-<span class="number">1</span>] <span class="keyword">and</span>  remain_counter[stack[-<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                stack.append(c)</span><br><span class="line">            remain_counter[c] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：由于判断当前字符是否在栈上存在需要 O(N)的时间，因此总的时间复杂度就是 O(N^2)，其中 N 为字符串长度。<br>空间复杂度：我们使用了额外的栈来存储数字，因此空间复杂度为 O(N)，其中 N 为字符串长度。</p><p>优化：<br>利用hashset空间换时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span>(<span class="params">self, s</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        seen = <span class="built_in">set</span>()</span><br><span class="line">        remain_counter = collections.Counter(s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> c &lt; stack[-<span class="number">1</span>] <span class="keyword">and</span>  remain_counter[stack[-<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    seen.discard(stack.pop())</span><br><span class="line">                seen.add(c)</span><br><span class="line">                stack.append(c)</span><br><span class="line">            remain_counter[c] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(N)，其中 N 为字符串长度。<br>空间复杂度：我们使用了额外的栈和 hashset，因此空间复杂度为 O(N)，其中 N 为字符串长度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;316-Remove-Duplicate-Letters-medium&quot;&gt;&lt;a href=&quot;#316-Remove-Duplicate-Letters-medium&quot; class=&quot;headerlink&quot; title=&quot;316. Remove Duplicate </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>985. Sum of Even Numbers After Queries(medium)</title>
    <link href="http://example.com/2022/09/21/985/"/>
    <id>http://example.com/2022/09/21/985/</id>
    <published>2022-09-21T22:21:15.000Z</published>
    <updated>2022-09-22T03:35:33.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="985-Sum-of-Even-Numbers-After-Queries-medium"><a href="#985-Sum-of-Even-Numbers-After-Queries-medium" class="headerlink" title="985. Sum of Even Numbers After Queries(medium)"></a>985. Sum of Even Numbers After Queries(medium)</h1><h2 id="You-are-given-an-integer-array-nums-and-an-array-queries-where-queries-i-vali-indexi"><a href="#You-are-given-an-integer-array-nums-and-an-array-queries-where-queries-i-vali-indexi" class="headerlink" title="You are given an integer array nums and an array queries where queries[i] = [vali, indexi]."></a>You are given an integer array nums and an array queries where queries[i] = [vali, indexi].</h2><h2 id="For-each-query-i-first-apply-nums-indexi-nums-indexi-vali-then-print-the-sum-of-the-even-values-of-nums"><a href="#For-each-query-i-first-apply-nums-indexi-nums-indexi-vali-then-print-the-sum-of-the-even-values-of-nums" class="headerlink" title="For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums."></a>For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.</h2><h2 id="Return-an-integer-array-answer-where-answer-i-is-the-answer-to-the-ith-query"><a href="#Return-an-integer-array-answer-where-answer-i-is-the-answer-to-the-ith-query" class="headerlink" title="Return an integer array answer where answer[i] is the answer to the ith query."></a>Return an integer array answer where answer[i] is the answer to the ith query.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]</span><br><span class="line">Output: [8,6,2,4]</span><br><span class="line">Explanation: At the beginning, the array is [1,2,3,4].</span><br><span class="line">After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.</span><br><span class="line">After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.</span><br><span class="line">After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.</span><br><span class="line">After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.</span><br></pre></td></tr></table></figure><p>这道题的思路很有特点，维护一个数组，先把原数组的偶数和求出来，接下来根据queries不断调整 S，即每一步操作之后整个数组的偶数和。操作数组中的某一个元素 A[index] 的时候，数组 A 其他位置的元素都应保持不变。如果 A[index] 是偶数，我们就从 S 中减去它，然后计算 A[index] + val 对 S 的影响（如果是偶数则在 S 中加上它）。相当于再计算前先把这个value减去（如果是偶数），算上新加入的index再计算对整个和的影响（如果是偶数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumEvenAfterQueries</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        even_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum+=num</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> val,i <span class="keyword">in</span> queries:</span><br><span class="line">            <span class="keyword">if</span> nums[i]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum-=nums[i]</span><br><span class="line">            nums[i]+=val</span><br><span class="line">            <span class="keyword">if</span> nums[i]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                even_sum+=nums[i]</span><br><span class="line">            ans.append(even_sum)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;985-Sum-of-Even-Numbers-After-Queries-medium&quot;&gt;&lt;a href=&quot;#985-Sum-of-Even-Numbers-After-Queries-medium&quot; class=&quot;headerlink&quot; title=&quot;985.</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>402. Remove K Digits(medium)</title>
    <link href="http://example.com/2022/09/21/402/"/>
    <id>http://example.com/2022/09/21/402/</id>
    <published>2022-09-21T22:03:43.000Z</published>
    <updated>2022-09-24T21:02:24.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="402-Remove-K-Digits-medium"><a href="#402-Remove-K-Digits-medium" class="headerlink" title="402. Remove K Digits(medium)"></a>402. Remove K Digits(medium)</h1><h2 id="Given-string-num-representing-a-non-negative-integer-num-and-an-integer-k-return-the-smallest-possible-integer-after-removing-k-digits-from-num"><a href="#Given-string-num-representing-a-non-negative-integer-num-and-an-integer-k-return-the-smallest-possible-integer-after-removing-k-digits-from-num" class="headerlink" title="Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num."></a>Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.</h2><p>相似题型<br>316. 去除重复字母(困难)<br>321. 拼接最大数(困难)<br>402. 移掉 K 位数字(中等)<br>1081. 不同字符的最小子序列（中等）</p><p>给定一个以字符串表示的非负整数  num，移除这个数中的 k 位数字，使得剩下的数字最小。</p><p>注意:<br>num 的长度小于 10002 且  ≥ k。<br>num 不会包含任何前导零。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;1432219&quot;, k = 3</span><br><span class="line">输出: &quot;1219&quot;</span><br><span class="line">解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。</span><br><span class="line">示例 2 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;10200&quot;, k = 1</span><br><span class="line">输出: &quot;200&quot;</span><br><span class="line">解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</span><br><span class="line">示例 3 :</span><br><span class="line"></span><br><span class="line">输入: num = &quot;10&quot;, k = 2</span><br><span class="line">输出: &quot;0&quot;</span><br><span class="line">解释: 从原数字移除所有的数字，剩余为空就是 0。</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. strip():- This method is used to delete all the leading and trailing characters mentioned in its argument.</span><br><span class="line">2. lstrip():- This method is used to delete all the leading characters mentioned in its argument.</span><br><span class="line">3. rstrip():- This method is used to delete all the trailing characters mentioned in its argument.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python code to demonstrate working of</span></span><br><span class="line"><span class="comment"># strip(), lstrip() and rstrip()</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;---geeksforgeeks---&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using strip() to delete all &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.strip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all &#x27;-&#x27; is : geeksforgeeks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using lstrip() to delete all trailing &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all leading &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.lstrip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all leading &#x27;-&#x27; is : geeksforgeeks---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># using rstrip() to delete all leading &#x27;-&#x27;</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot; String after stripping all trailing &#x27;-&#x27; is : &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">str</span>.rstrip(<span class="string">&#x27;-&#x27;</span>) )</span><br><span class="line"><span class="comment"># String after stripping all trailing &#x27;-&#x27; is : ---geeksforgeeks</span></span><br></pre></td></tr></table></figure><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。<br>str.join(sequence) sequence – 要连接的元素序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;-&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">seq = (<span class="string">&quot;r&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="built_in">print</span> (s1.join( seq )) <span class="comment">#r-u-n-o-o-b</span></span><br><span class="line"><span class="built_in">print</span> (s2.join( seq )) <span class="comment">#runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">类似于<span class="keyword">if</span> 判断</span><br><span class="line"><span class="keyword">if</span> variable_1:</span><br><span class="line">  x = variable_1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  x = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/remove-k-digits/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-5/">Solution</a></h2><p>因此我们的思路就是：</p><p>从左到右遍历<br>对于遍历到的元素，我们选择保留。<br>但是我们可以选择性丢弃前面相邻的元素。<br>丢弃与否的依据如上面的前置知识中阐述中的方法。</p><p>然而需要注意的是，如果给定的数字是一个单调递增的数字，那么我们的算法会永远选择不丢弃。这个题目中要求的，我们要永远确保丢弃 k 个矛盾。</p><p>一个简单的思路就是：</p><p>每次丢弃一次，k 减去 1。当 k 减到 0 ，我们可以提前终止遍历。<br>而当遍历完成，如果 k 仍然大于 0。不妨假设最终还剩下 x 个需要丢弃，那么我们需要选择删除末尾 x 个元素。</p><p>我们需要把思路逆转过来。刚才我的关注点一直是丢弃，题目要求我们丢弃 k 个。反过来说，不就是让我们保留 n - kn−k 个元素么？其中 n 为数字长度。 那么我们只需要按照上面的方法遍历完成之后，再截取前n - k个元素即可。</p><p>按照上面的思路，我们来选择数据结构。由于我们需要保留和丢弃相邻的元素，因此使用栈这种在一端进行添加和删除的数据结构是再合适不过了，我们来看下代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeKdigits</span>(<span class="params">self, num: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        stack=[]</span><br><span class="line">        remain= <span class="built_in">len</span>(num)-k</span><br><span class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">while</span> k <span class="keyword">and</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>]&gt;digit:</span><br><span class="line">                stack.pop()</span><br><span class="line">                k-=<span class="number">1</span></span><br><span class="line">            stack.append(digit)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack[:remain]).lstrip(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;402-Remove-K-Digits-medium&quot;&gt;&lt;a href=&quot;#402-Remove-K-Digits-medium&quot; class=&quot;headerlink&quot; title=&quot;402. Remove K Digits(medium)&quot;&gt;&lt;/a&gt;402. R</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>718</title>
    <link href="http://example.com/2022/09/21/718/"/>
    <id>http://example.com/2022/09/21/718/</id>
    <published>2022-09-21T22:02:27.000Z</published>
    <updated>2022-09-22T03:38:36.968Z</updated>
    
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>739. Daily Temperatures(medium)</title>
    <link href="http://example.com/2022/09/20/739/"/>
    <id>http://example.com/2022/09/20/739/</id>
    <published>2022-09-20T20:58:33.000Z</published>
    <updated>2022-09-22T03:38:49.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="739-Daily-Temperatures-medium"><a href="#739-Daily-Temperatures-medium" class="headerlink" title="739. Daily Temperatures(medium)"></a>739. Daily Temperatures(medium)</h1><h2 id="Given-an-array-of-integers-temperatures-represents-the-daily-temperatures-return-an-array-answer-such-that-answer-i-is-the-number-of-days-you-have-to-wait-after-the-ith-day-to-get-a-warmer-temperature-If-there-is-no-future-day-for-which-this-is-possible-keep-answer-i-0-instead"><a href="#Given-an-array-of-integers-temperatures-represents-the-daily-temperatures-return-an-array-answer-such-that-answer-i-is-the-number-of-days-you-have-to-wait-after-the-ith-day-to-get-a-warmer-temperature-If-there-is-no-future-day-for-which-this-is-possible-keep-answer-i-0-instead" class="headerlink" title="Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead."></a>Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a><a href="https://leetcode.cn/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/">单调栈</a></h3><p>可以维护一个存储下标的单调栈，从栈底到栈顶的下标对应的温度列表中的温度依次递减。如果一个下标在单调栈里，则表示尚未找到下一次温度更高的下标。</p><p>正向遍历温度列表。对于温度列表中的每个元素 temperatures[i]，如果栈为空，则直接将 i 进栈，如果栈不为空，则比较栈顶元素 prevIndex 对应的温度 temperatures[prevIndex] 和当前温度 temperatures[i]，如果 temperatures[i] &gt; temperatures[prevIndex]，则将 prevIndex 移除，并将 prevIndex 对应的等待天数赋为 i - prevIndex，重复上述操作直到栈为空或者栈顶元素对应的温度小于等于当前温度，然后将 i 进栈。</p><p>为什么可以在弹栈的时候更新 ans[prevIndex] 呢？因为在这种情况下，即将进栈的 i 对应的 temperatures[i] 一定是 temperatures[prevIndex] 右边第一个比它大的元素，试想如果 prevIndex 和 i 有比它大的元素，假设下标为 j，那么 prevIndex 一定会在下标 j 的那一轮被弹掉。</p><p>由于单调栈满足从栈底到栈顶元素对应的温度递减，因此每次有元素进栈时，会将温度更低的元素全部移除，并更新出栈元素对应的等待天数，这样可以确保等待天数一定是最小的。</p><p>以下用一个具体的例子帮助读者理解单调栈。对于温度列表 [73,74,75,71,69,72,76,73]，单调栈 stack 的初始状态为空，答案 ans 的初始状态是 [0,0,0,0,0,0,0,0]，按照以下步骤更新单调栈和答案，其中单调栈内的元素都是下标，括号内的数字表示下标在温度列表中对应的温度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span>(<span class="params">self, temperatures: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        length = <span class="built_in">len</span>(temperatures)</span><br><span class="line">        ans = [<span class="number">0</span>] * length</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            temperature = temperatures[i]</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> temperature &gt; temperatures[stack[-<span class="number">1</span>]]:</span><br><span class="line">                prev_index = stack.pop()</span><br><span class="line">                ans[prev_index] = i - prev_index</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/438101">KMP</a></p><p>这是评论里的解法，相对更好理解一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span>(<span class="params">self, T: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        n=<span class="built_in">len</span>(T)</span><br><span class="line">        ans=[<span class="number">0</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            now=i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> T[now]&lt;=T[i]:</span><br><span class="line">                <span class="keyword">if</span> ans[now]:</span><br><span class="line">                    now+=ans[now]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans[i]=now-i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;739-Daily-Temperatures-medium&quot;&gt;&lt;a href=&quot;#739-Daily-Temperatures-medium&quot; class=&quot;headerlink&quot; title=&quot;739. Daily Temperatures(medium)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>496. Next Greater Element I(easy)</title>
    <link href="http://example.com/2022/09/20/496/"/>
    <id>http://example.com/2022/09/20/496/</id>
    <published>2022-09-20T20:32:31.000Z</published>
    <updated>2022-09-22T03:48:26.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="496-Next-Greater-Element-I-easy"><a href="#496-Next-Greater-Element-I-easy" class="headerlink" title="496. Next Greater Element I(easy)"></a>496. Next Greater Element I(easy)</h1><h2 id="The-next-greater-element-of-some-element-x-in-an-array-is-the-first-greater-element-that-is-to-the-right-of-x-in-the-same-array"><a href="#The-next-greater-element-of-some-element-x-in-an-array-is-the-first-greater-element-that-is-to-the-right-of-x-in-the-same-array" class="headerlink" title="The next greater element of some element x in an array is the first greater element that is to the right of x in the same array."></a>The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.</h2><h2 id="You-are-given-two-distinct-0-indexed-integer-arrays-nums1-and-nums2-where-nums1-is-a-subset-of-nums2"><a href="#You-are-given-two-distinct-0-indexed-integer-arrays-nums1-and-nums2-where-nums1-is-a-subset-of-nums2" class="headerlink" title="You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2."></a>You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.</h2><h2 id="For-each-0-lt-i-lt-nums1-length-find-the-index-j-such-that-nums1-i-nums2-j-and-determine-the-next-greater-element-of-nums2-j-in-nums2-If-there-is-no-next-greater-element-then-the-answer-for-this-query-is-1"><a href="#For-each-0-lt-i-lt-nums1-length-find-the-index-j-such-that-nums1-i-nums2-j-and-determine-the-next-greater-element-of-nums2-j-in-nums2-If-there-is-no-next-greater-element-then-the-answer-for-this-query-is-1" class="headerlink" title="For each 0 &lt;= i &lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1."></a>For each 0 &lt;= i &lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.</h2><h2 id="Return-an-array-ans-of-length-nums1-length-such-that-ans-i-is-the-next-greater-element-as-described-above"><a href="#Return-an-array-ans-of-length-nums1-length-such-that-ans-i-is-the-next-greater-element-as-described-above" class="headerlink" title="Return an array ans of length nums1.length such that ans[i] is the next greater element as described above."></a>Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [4,1,2], nums2 = [1,3,4,2]</span><br><span class="line">Output: [-1,3,-1]</span><br><span class="line">Explanation: The next greater element for each value of nums1 is as follows:</span><br><span class="line">- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.</span><br><span class="line">- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.</span><br><span class="line">- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.</span><br></pre></td></tr></table></figure><h3 id="单调栈-哈希表"><a href="#单调栈-哈希表" class="headerlink" title="单调栈 + 哈希表"></a><a href="https://leetcode.cn/problems/next-greater-element-i/solution/xia-yi-ge-geng-da-yuan-su-i-by-leetcode-bfcoj/">单调栈 + 哈希表</a></h3><p>思路</p><p>我们可以先预处理 nums2 ，使查询 nums1中的每个元素在 nums2中对应位置的右边的第一个更大的元素值时不需要再遍历 nums2。于是，我们将题目分解为两个子问题：</p><p>第 1 个子问题：如何更高效地计算 nums2中每个元素右边的第一个更大的值；</p><p>第 2 个子问题：如何存储第 1 个子问题的结果。</p><p>算法</p><p>我们可以使用单调栈来解决第 1 个子问题。倒序遍历 nums2，并用单调栈中维护当前位置右边的更大的元素列表，从栈底到栈顶的元素是单调递减的。</p><p>具体地，每次我们移动到数组中一个新的位置 i，就将当前单调栈中所有小于 nums2[i]的元素弹出单调栈，当前位置右边的第一个更大的元素即为栈顶元素，如果栈为空则说明当前位置右边没有更大的元素。随后我们将位置 i 的元素入栈。</p><p>可以结合以下例子来理解。</p><p>因为题目规定了 nums2是没有重复元素的，所以我们可以使用哈希表来解决第 22 个子问题，将元素值与其右边第一个更大的元素值的对应关系存入哈希表。</p><p>细节</p><p>因为在这道题中我们只需要用到 nums2中元素的顺序而不需要用到下标，所以栈中直接存储 nums2中元素的值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = &#123;&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">reversed</span>(nums2):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> num &gt;= stack[-<span class="number">1</span>]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[num] = stack[-<span class="number">1</span>] <span class="keyword">if</span> stack <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">            stack.append(num)</span><br><span class="line">        <span class="keyword">return</span> [res[num] <span class="keyword">for</span> num <span class="keyword">in</span> nums1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;496-Next-Greater-Element-I-easy&quot;&gt;&lt;a href=&quot;#496-Next-Greater-Element-I-easy&quot; class=&quot;headerlink&quot; title=&quot;496. Next Greater Element I(ea</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>380. Insert Delete GetRandom O(1)(medium)</title>
    <link href="http://example.com/2022/09/13/380/"/>
    <id>http://example.com/2022/09/13/380/</id>
    <published>2022-09-13T19:17:59.000Z</published>
    <updated>2022-09-13T20:49:21.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="380-Insert-Delete-GetRandom-O-1-medium"><a href="#380-Insert-Delete-GetRandom-O-1-medium" class="headerlink" title="380. Insert Delete GetRandom O(1)(medium)"></a>380. Insert Delete GetRandom O(1)(medium)</h1><h2 id="Implement-the-RandomizedSet-class"><a href="#Implement-the-RandomizedSet-class" class="headerlink" title="Implement the RandomizedSet class:"></a>Implement the RandomizedSet class:</h2><p>RandomizedSet() Initializes the RandomizedSet object.<br>bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br>bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<br>int getRandom() Returns a random element from the current set of elements (it’s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</p><h2 id="You-must-implement-the-functions-of-the-class-such-that-each-function-works-in-average-O-1-time-complexity"><a href="#You-must-implement-the-functions-of-the-class-such-that-each-function-works-in-average-O-1-time-complexity" class="headerlink" title="You must implement the functions of the class such that each function works in average O(1) time complexity."></a>You must implement the functions of the class such that each function works in average O(1) time complexity.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [2], [2], [], [1], [2], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, false, true, 2, true, false, 2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">RandomizedSet randomizedSet = new RandomizedSet();</span><br><span class="line">randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.</span><br><span class="line">randomizedSet.remove(2); // Returns false as 2 does not exist in the set.</span><br><span class="line">randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].</span><br><span class="line">randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.</span><br><span class="line">randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].</span><br><span class="line">randomizedSet.insert(2); // 2 was already in the set, so return false.</span><br><span class="line">randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://labuladong.github.io/algo/2/20/33/">Solution</a></h3><p>本题的难点在于两点：</p><p>1、插入，删除，获取随机元素这三个操作的时间复杂度必须都是 O(1)。</p><p>2、getRandom 方法返回的元素必须等概率返回随机元素，也就是说，如果集合里面有 n 个元素，每个元素被返回的概率必须是 1/n。</p><p>我们先来分析一下：对于插入，删除，查找这几个操作，哪种数据结构的时间复杂度是 O(1)？</p><p>HashSet 肯定算一个对吧。哈希集合的底层原理就是一个大数组，我们把元素通过哈希函数映射到一个索引上；如果用拉链法解决哈希冲突，那么这个索引可能连着一个链表或者红黑树。</p><p>那么请问对于这样一个标准的 HashSet，你能否在 O(1) 的时间内实现 getRandom 函数？</p><p>其实是不能的，因为根据刚才说到的底层实现，元素是被哈希函数「分散」到整个数组里面的，更别说还有拉链法等等解决哈希冲突的机制，所以做不到 O(1) 时间「等概率」随机获取元素。</p><p>除了 HashSet，还有一些类似的数据结构，比如哈希链表 LinkedHashSet，我们后文 手把手实现LRU算法 和 手把手实现LFU算法 讲过这类数据结构的实现原理，本质上就是哈希表配合双链表，元素存储在双链表中。</p><p>但是，LinkedHashSet 只是给 HashSet 增加了有序性，依然无法按要求实现我们的 getRandom 函数，因为底层用链表结构存储元素的话，是无法在 O(1) 的时间内访问某一个元素的。</p><p>根据上面的分析，对于 getRandom 方法，如果想「等概率」且「在 O(1) 的时间」取出元素，一定要满足：底层用数组实现，且数组必须是紧凑的。</p><p>这样我们就可以直接生成随机数作为索引，从数组中取出该随机索引对应的元素，作为随机元素。</p><p>但如果用数组存储元素的话，插入，删除的时间复杂度怎么可能是 O(1) 呢？</p><p>可以做到！对数组尾部进行插入和删除操作不会涉及数据搬移，时间复杂度是 O(1)。</p><p>所以，如果我们想在 O(1) 的时间删除数组中的某一个元素 val，可以先把这个元素交换到数组的尾部，然后再 pop 掉。</p><p>交换两个元素必须通过索引进行交换对吧，那么我们需要一个哈希表 valToIndex 来记录每个元素值对应的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 存储元素的值</span></span><br><span class="line">        self.nums=[]</span><br><span class="line">        <span class="comment"># 记录每个元素对应在 nums 中的索引</span></span><br><span class="line">        self.valToIndex=&#123;&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="comment">#若 val 已存在，不用再插入</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.valToIndex:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment">#若 val 不存在，插入到 nums 尾部，</span></span><br><span class="line">        <span class="comment">#并记录 val 对应的索引值</span></span><br><span class="line">        self.valToIndex[val]=<span class="built_in">len</span>(self.nums)</span><br><span class="line">        self.nums.append(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="comment">#若 val 不存在，不用再删除</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.valToIndex:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment">#先拿到 val 的索引</span></span><br><span class="line">        index= self.valToIndex[val]</span><br><span class="line">        <span class="comment">#将最后一个元素对应的索引修改为 index</span></span><br><span class="line">        self.nums[index]=self.nums[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#交换 val 和最后一个元素</span></span><br><span class="line">        self.valToIndex[self.nums[index]]=index</span><br><span class="line">        <span class="comment">#在数组中删除元素 val</span></span><br><span class="line">        self.nums.pop()</span><br><span class="line">        <span class="comment">#删除元素 val 对应的索引(hashmap)</span></span><br><span class="line">        <span class="keyword">del</span> self.valToIndex[val]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRandom</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="comment"># 随机获取 nums 中的一个元素</span></span><br><span class="line">        <span class="keyword">return</span> choice(self.nums)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = RandomizedSet()</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(val)</span></span><br><span class="line"><span class="comment"># param_2 = obj.remove(val)</span></span><br><span class="line"><span class="comment"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;380-Insert-Delete-GetRandom-O-1-medium&quot;&gt;&lt;a href=&quot;#380-Insert-Delete-GetRandom-O-1-medium&quot; class=&quot;headerlink&quot; title=&quot;380. Insert Dele</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>647. Palindromic Substrings(medium)</title>
    <link href="http://example.com/2022/09/13/647/"/>
    <id>http://example.com/2022/09/13/647/</id>
    <published>2022-09-13T19:10:07.000Z</published>
    <updated>2022-09-22T03:39:19.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="647-Palindromic-Substrings-medium"><a href="#647-Palindromic-Substrings-medium" class="headerlink" title="647. Palindromic Substrings(medium)"></a>647. Palindromic Substrings(medium)</h1><h2 id="Given-a-string-s-return-the-number-of-palindromic-substrings-in-it"><a href="#Given-a-string-s-return-the-number-of-palindromic-substrings-in-it" class="headerlink" title="Given a string s, return the number of palindromic substrings in it."></a>Given a string s, return the number of palindromic substrings in it.</h2><h2 id="A-string-is-a-palindrome-when-it-reads-the-same-backward-as-forward"><a href="#A-string-is-a-palindrome-when-it-reads-the-same-backward-as-forward" class="headerlink" title="A string is a palindrome when it reads the same backward as forward."></a>A string is a palindrome when it reads the same backward as forward.</h2><h2 id="A-substring-is-a-contiguous-sequence-of-characters-within-the-string"><a href="#A-substring-is-a-contiguous-sequence-of-characters-within-the-string" class="headerlink" title="A substring is a contiguous sequence of characters within the string."></a>A substring is a contiguous sequence of characters within the string.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubstrings</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    L, r = <span class="built_in">len</span>(s), <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    <span class="keyword">for</span> a,b <span class="keyword">in</span> [(i,i),(i,i+<span class="number">1</span>)]:</span><br><span class="line">    <span class="keyword">while</span> a &gt;= <span class="number">0</span> <span class="keyword">and</span> b &lt; L <span class="keyword">and</span> s[a] == s[b]: a -= <span class="number">1</span>; b += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">    r += (b-a)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;647-Palindromic-Substrings-medium&quot;&gt;&lt;a href=&quot;#647-Palindromic-Substrings-medium&quot; class=&quot;headerlink&quot; title=&quot;647. Palindromic Substring</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>870. Advantage Shuffle(medium)</title>
    <link href="http://example.com/2022/09/12/870/"/>
    <id>http://example.com/2022/09/12/870/</id>
    <published>2022-09-13T01:19:20.000Z</published>
    <updated>2022-09-22T03:48:05.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="870-Advantage-Shuffle-medium"><a href="#870-Advantage-Shuffle-medium" class="headerlink" title="870. Advantage Shuffle(medium)"></a>870. Advantage Shuffle(medium)</h1><h2 id="You-are-given-two-integer-arrays-nums1-and-nums2-both-of-the-same-length-The-advantage-of-nums1-with-respect-to-nums2-is-the-number-of-indices-i-for-which-nums1-i-gt-nums2-i"><a href="#You-are-given-two-integer-arrays-nums1-and-nums2-both-of-the-same-length-The-advantage-of-nums1-with-respect-to-nums2-is-the-number-of-indices-i-for-which-nums1-i-gt-nums2-i" class="headerlink" title="You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] &gt; nums2[i]."></a>You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] &gt; nums2[i].</h2><h2 id="Return-any-permutation-of-nums1-that-maximizes-its-advantage-with-respect-to-nums2"><a href="#Return-any-permutation-of-nums1-that-maximizes-its-advantage-with-respect-to-nums2" class="headerlink" title="Return any permutation of nums1 that maximizes its advantage with respect to nums2."></a>Return any permutation of nums1 that maximizes its advantage with respect to nums2.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]</span><br><span class="line">Output: [2,11,7,15]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]</span><br><span class="line">Output: [2,11,7,15]</span><br></pre></td></tr></table></figure><p>类似于田忌赛马的故事，排序nums2使得nums2比nums1有优势</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/advantage-shuffle/solution/by-qingfengpython-mvix/">Solution</a></h2><p>按照上面的思路，可以考虑贪心的思维模式。</p><p>首先需要将nums2按照[value,index]的模式加入保存至数组中，最终按照value值逆序生成一个二维数组<br>之后对nums1进行排序<br>分配left、right指针指向nums1的头尾节点<br>创建一个长度为nums1的初始化数组ret，开始循环二维数组<br>按照上面的思路<br>如果right节点比nums2当前的下表数字大，那就是强强对碰，正面硬刚<br>如果不敌则用left节点的小兵以次充好<br>不论1、2如何选择，都将left或right对应的num，根据二维数组的index将value保存至ret数组<br>最终返回ret数组即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advantageCount</span>(<span class="params">self, A, B</span>):</span></span><br><span class="line">        sortedA = <span class="built_in">sorted</span>(A)</span><br><span class="line">        sortedB = <span class="built_in">sorted</span>(B)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># assigned[b] = list of a that are assigned to beat b</span></span><br><span class="line">        <span class="comment"># remaining = list of a that are not assigned to any b</span></span><br><span class="line">        assigned = &#123;b: [] <span class="keyword">for</span> b <span class="keyword">in</span> B&#125;</span><br><span class="line">        remaining = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># populate (assigned, remaining) appropriately</span></span><br><span class="line">        <span class="comment"># sortedB[j] is always the smallest unassigned element in B</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> sortedA:</span><br><span class="line">            <span class="keyword">if</span> a &gt; sortedB[j]:</span><br><span class="line">                assigned[sortedB[j]].append(a)</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remaining.append(a)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reconstruct the answer from annotations (assigned, remaining)</span></span><br><span class="line">        <span class="keyword">return</span> [assigned[b].pop() <span class="keyword">if</span> assigned[b] <span class="keyword">else</span> remaining.pop()</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> B]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;870-Advantage-Shuffle-medium&quot;&gt;&lt;a href=&quot;#870-Advantage-Shuffle-medium&quot; class=&quot;headerlink&quot; title=&quot;870. Advantage Shuffle(medium)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>528. Random Pick with Weight(medium)</title>
    <link href="http://example.com/2022/09/12/528/"/>
    <id>http://example.com/2022/09/12/528/</id>
    <published>2022-09-13T00:37:41.000Z</published>
    <updated>2022-09-13T01:19:43.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="528-Random-Pick-with-Weight-medium"><a href="#528-Random-Pick-with-Weight-medium" class="headerlink" title="528. Random Pick with Weight(medium)"></a>528. Random Pick with Weight(medium)</h1><h2 id="You-are-given-a-0-indexed-array-of-positive-integers-w-where-w-i-describes-the-weight-of-the-ith-index"><a href="#You-are-given-a-0-indexed-array-of-positive-integers-w-where-w-i-describes-the-weight-of-the-ith-index" class="headerlink" title="You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index."></a>You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.</h2><h2 id="You-need-to-implement-the-function-pickIndex-which-randomly-picks-an-index-in-the-range-0-w-length-1-inclusive-and-returns-it-The-probability-of-picking-an-index-i-is-w-i-sum-w"><a href="#You-need-to-implement-the-function-pickIndex-which-randomly-picks-an-index-in-the-range-0-w-length-1-inclusive-and-returns-it-The-probability-of-picking-an-index-i-is-w-i-sum-w" class="headerlink" title="You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w)."></a>You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).</h2><h2 id="For-example-if-w-1-3-the-probability-of-picking-index-0-is-1-1-3-0-25-i-e-25-and-the-probability-of-picking-index-1-is-3-1-3-0-75-i-e-75"><a href="#For-example-if-w-1-3-the-probability-of-picking-index-0-is-1-1-3-0-25-i-e-25-and-the-probability-of-picking-index-1-is-3-1-3-0-75-i-e-75" class="headerlink" title="For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%)."></a>For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).</h2><p>前缀和数组加二分搜索的题目</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><a href="https://leetcode.cn/problems/random-pick-with-weight/solution/an-quan-zhong-sui-ji-xuan-ze-by-leetcode-h13t/">Solution</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, w: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span></span><br><span class="line">        self.pre = <span class="built_in">list</span>(accumulate(w))</span><br><span class="line">        self.total = <span class="built_in">sum</span>(w)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickIndex</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        x = random.randint(<span class="number">1</span>, self.total)</span><br><span class="line">        <span class="keyword">return</span> bisect_left(self.pre, x)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(w)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pickIndex()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;528-Random-Pick-with-Weight-medium&quot;&gt;&lt;a href=&quot;#528-Random-Pick-with-Weight-medium&quot; class=&quot;headerlink&quot; title=&quot;528. Random Pick with We</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>567. Permutation in String(medium)</title>
    <link href="http://example.com/2022/09/11/567/"/>
    <id>http://example.com/2022/09/11/567/</id>
    <published>2022-09-12T02:16:46.000Z</published>
    <updated>2022-09-13T01:19:41.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="567-Permutation-in-String-medium"><a href="#567-Permutation-in-String-medium" class="headerlink" title="567. Permutation in String(medium)"></a>567. Permutation in String(medium)</h1><h2 id="Given-two-strings-s1-and-s2-return-true-if-s2-contains-a-permutation-of-s1-or-false-otherwise"><a href="#Given-two-strings-s1-and-s2-return-true-if-s2-contains-a-permutation-of-s1-or-false-otherwise" class="headerlink" title="Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise."></a>Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.</h2><h2 id="In-other-words-return-true-if-one-of-s1’s-permutations-is-the-substring-of-s2"><a href="#In-other-words-return-true-if-one-of-s1’s-permutations-is-the-substring-of-s2" class="headerlink" title="In other words, return true if one of s1’s permutations is the substring of s2."></a>In other words, return true if one of s1’s permutations is the substring of s2.</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;567-Permutation-in-String-medium&quot;&gt;&lt;a href=&quot;#567-Permutation-in-String-medium&quot; class=&quot;headerlink&quot; title=&quot;567. Permutation in String(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>1356. Sort Integers by The Number of 1 Bits(easy)</title>
    <link href="http://example.com/2022/09/11/1356/"/>
    <id>http://example.com/2022/09/11/1356/</id>
    <published>2022-09-11T21:18:32.000Z</published>
    <updated>2022-09-13T00:59:11.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1356-Sort-Integers-by-The-Number-of-1-Bits-easy"><a href="#1356-Sort-Integers-by-The-Number-of-1-Bits-easy" class="headerlink" title="1356. Sort Integers by The Number of 1 Bits(easy)"></a>1356. Sort Integers by The Number of 1 Bits(easy)</h1><h2 id="You-are-given-an-integer-array-arr-Sort-the-integers-in-the-array-in-ascending-order-by-the-number-of-1’s-in-their-binary-representation-and-in-case-of-two-or-more-integers-have-the-same-number-of-1’s-you-have-to-sort-them-in-ascending-order"><a href="#You-are-given-an-integer-array-arr-Sort-the-integers-in-the-array-in-ascending-order-by-the-number-of-1’s-in-their-binary-representation-and-in-case-of-two-or-more-integers-have-the-same-number-of-1’s-you-have-to-sort-them-in-ascending-order" class="headerlink" title="You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1’s in their binary representation and in case of two or more integers have the same number of 1’s you have to sort them in ascending order."></a>You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1’s in their binary representation and in case of two or more integers have the same number of 1’s you have to sort them in ascending order.</h2><h2 id="Return-the-array-after-sorting-it"><a href="#Return-the-array-after-sorting-it" class="headerlink" title="Return the array after sorting it."></a>Return the array after sorting it.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [0,1,2,3,4,5,6,7,8]</span><br><span class="line">Output: [0,1,2,4,8,3,5,6,7]</span><br><span class="line">Explantion: [0] is the only integer with 0 bits.</span><br><span class="line">[1,2,4,8] all have 1 bit.</span><br><span class="line">[3,5,6] have 2 bits.</span><br><span class="line">[7] has 3 bits.</span><br><span class="line">The sorted array by bits is [0,1,2,4,8,3,5,6,7]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="python">class Solution:    def sortByBits(self, arr: List[int]) -&gt; List[int]:        return sorted(arr, key = lambda num : (sum((num &gt;&gt; i) &amp; 1 for i in range(32)), num))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1356-Sort-Integers-by-The-Number-of-1-Bits-easy&quot;&gt;&lt;a href=&quot;#1356-Sort-Integers-by-The-Number-of-1-Bits-easy&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>76. Minimum Window Substring(hard)</title>
    <link href="http://example.com/2022/09/11/76/"/>
    <id>http://example.com/2022/09/11/76/</id>
    <published>2022-09-11T20:55:34.000Z</published>
    <updated>2022-09-13T00:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="76-Minimum-Window-Substring-hard"><a href="#76-Minimum-Window-Substring-hard" class="headerlink" title="76. Minimum Window Substring(hard)"></a>76. Minimum Window Substring(hard)</h1><h2 id="Given-two-strings-s-and-t-of-lengths-m-and-n-respectively-return-the-minimum-window-substring-of-s-such-that-every-character-in-t-including-duplicates-is-included-in-the-window-If-there-is-no-such-substring-return-the-empty-string-“”"><a href="#Given-two-strings-s-and-t-of-lengths-m-and-n-respectively-return-the-minimum-window-substring-of-s-such-that-every-character-in-t-including-duplicates-is-included-in-the-window-If-there-is-no-such-substring-return-the-empty-string-“”" class="headerlink" title="Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”."></a>Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”.</h2><h2 id="The-testcases-will-be-generated-such-that-the-answer-is-unique"><a href="#The-testcases-will-be-generated-such-that-the-answer-is-unique" class="headerlink" title="The testcases will be generated such that the answer is unique."></a>The testcases will be generated such that the answer is unique.</h2><h2 id="A-substring-is-a-contiguous-sequence-of-characters-within-the-string"><a href="#A-substring-is-a-contiguous-sequence-of-characters-within-the-string" class="headerlink" title="A substring is a contiguous sequence of characters within the string."></a>A substring is a contiguous sequence of characters within the string.</h2><p>这道题是滑动窗口的经典题目，滑动窗口算法的思路是这样：</p><ol><li>我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引左闭右开区间 [left, right) 称为一个「窗口」。</li></ol><p>PS：理论上你可以设计两端都开或者两端都闭的区间，但设计为左闭右开区间是最方便处理的。因为这样初始化 left = right = 0 时区间 [0, 0) 中没有元素，但只要让 right 向右移动（扩大）一位，区间 [0, 1) 就包含一个元素 0 了。如果你设置为两端都开的区间，那么让 right 向右移动一位后开区间 (0, 1) 仍然没有元素；如果你设置为两端都闭的区间，那么初始区间 [0, 0] 就包含了一个元素。这两种情况都会给边界处理带来不必要的麻烦。</p><ol start="2"><li><p>我们先不断地增加 right 指针扩大窗口 [left, right)，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。</p></li><li><p>此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right)，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。</p></li><li><p>重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。</p></li></ol><p>这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。</p><p>下面画图理解一下，needs 和 window 相当于计数器，分别记录 T 中字符出现次数和「窗口」中的相应字符的出现次数。</p><h4 id="C-解法"><a href="#C-解法" class="headerlink" title="C++解法"></a><a href="https://labuladong.github.io/algo/2/20/27/">C++解法</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; need, window;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录最小覆盖子串的起始索引及长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, len = INT_MAX;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        <span class="keyword">char</span> c = s[right];</span><br><span class="line">        <span class="comment">// 扩大窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        <span class="keyword">if</span> (need.<span class="built_in">count</span>(c)) &#123;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (window[c] == need[c])</span><br><span class="line">                valid++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (valid == need.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">// 在这里更新最小覆盖子串</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; len) &#123;</span><br><span class="line">                start = left;</span><br><span class="line">                len = right - left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            <span class="keyword">char</span> d = s[left];</span><br><span class="line">            <span class="comment">// 缩小窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span> (need.<span class="built_in">count</span>(d)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (window[d] == need[d])</span><br><span class="line">                    valid--;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;                    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回最小覆盖子串</span></span><br><span class="line">    <span class="keyword">return</span> len == INT_MAX ?</span><br><span class="line">        <span class="string">&quot;&quot;</span> : s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python解法"><a href="#python解法" class="headerlink" title="python解法"></a><a href="https://leetcode.com/problems/minimum-window-substring/discuss/26804/12-lines-Python/1079619">python解法</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># hash table to store the required char frequency</span></span><br><span class="line">        need = collections.Counter(t)            </span><br><span class="line"></span><br><span class="line">        <span class="comment"># total character count we need to care about</span></span><br><span class="line">        missing = <span class="built_in">len</span>(t)                         </span><br><span class="line"></span><br><span class="line">        <span class="comment"># windowStart and windowEnd to be</span></span><br><span class="line">        windowStart, windowEnd = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># iterate over s starting over index 1</span></span><br><span class="line">        <span class="keyword">for</span> j, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s, <span class="number">1</span>): <span class="comment"># j is index,char is value         </span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># if char is required then decrease missing</span></span><br><span class="line">            <span class="keyword">if</span> need[char] &gt; <span class="number">0</span>:                   </span><br><span class="line">                missing -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># decrease the freq of char from need (maybe be negative - which basically denotes</span></span><br><span class="line">            <span class="comment">#   that we have few extra characters which are not required but present in between current window)</span></span><br><span class="line">            need[char] -= <span class="number">1</span>                      </span><br><span class="line"></span><br><span class="line">            <span class="comment"># we found a valid window</span></span><br><span class="line">            <span class="keyword">if</span> missing == <span class="number">0</span>:                     </span><br><span class="line">                <span class="comment"># chars from start to find the real windowStart</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> need[s[i]] &lt; <span class="number">0</span>:  </span><br><span class="line">                    need[s[i]] += <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># if it&#x27;s only one char case or curr window is smaller, then update window</span></span><br><span class="line">                <span class="keyword">if</span> windowEnd == <span class="number">0</span> <span class="keyword">or</span> j-i &lt; windowEnd-windowStart:  </span><br><span class="line">                    windowStart, windowEnd = i, j</span><br><span class="line"></span><br><span class="line">                <span class="comment"># now resetting the window to make it invalid</span></span><br><span class="line">                <span class="comment"># sure the first appearing char satisfies need[char]&gt;0</span></span><br><span class="line">                need[s[i]] += <span class="number">1</span>          </span><br><span class="line"></span><br><span class="line">                <span class="comment"># missed this first char, so add missing by 1</span></span><br><span class="line">                missing += <span class="number">1</span>                     </span><br><span class="line"></span><br><span class="line">                <span class="comment">#update i to windowStart+1 for next window</span></span><br><span class="line">                i += <span class="number">1</span>                          </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s[windowStart:windowEnd]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;76-Minimum-Window-Substring-hard&quot;&gt;&lt;a href=&quot;#76-Minimum-Window-Substring-hard&quot; class=&quot;headerlink&quot; title=&quot;76. Minimum Window Substring</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill8-two_pointers</title>
    <link href="http://example.com/2022/09/11/LeetCode-skill8-two-pointers/"/>
    <id>http://example.com/2022/09/11/LeetCode-skill8-two-pointers/</id>
    <published>2022-09-11T20:34:44.000Z</published>
    <updated>2022-09-13T00:58:33.247Z</updated>
    
    <content type="html"><![CDATA[<p>滑动窗口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滑动窗口算法框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slidingWindow</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; window;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        <span class="keyword">char</span> c = s[right];</span><br><span class="line">        <span class="comment">// 增大窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*** debug 输出的位置 ***/</span></span><br><span class="line">        printf(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right);</span><br><span class="line">        <span class="comment">/********************/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            <span class="keyword">char</span> d = s[left];</span><br><span class="line">            <span class="comment">// 缩小窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slidingWindow</span>(<span class="params">string s</span>):</span></span><br><span class="line">    </span><br><span class="line">    window=&#123;&#125;</span><br><span class="line">    <span class="built_in">int</span> left = <span class="number">0</span>, right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> right&lt;<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="comment">#c 是将移入窗口的字符</span></span><br><span class="line">        c=s[right]</span><br><span class="line">        <span class="comment"># 增大窗口</span></span><br><span class="line">        right+=<span class="number">1</span></span><br><span class="line">        <span class="comment"># 进行窗口内数据的一系列更新</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">#*** debug 输出的位置 ***/</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right)</span><br><span class="line">        <span class="comment">#********************/</span></span><br><span class="line">        <span class="comment"># 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (window needs shrink) </span><br><span class="line">            <span class="comment">#d 是将移出窗口的字符</span></span><br><span class="line">            d = s[left]</span><br><span class="line">            <span class="comment">#缩小窗口</span></span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">            <span class="comment">#进行窗口内数据的一系列更新</span></span><br><span class="line">            ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;滑动窗口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Sliding-Window" scheme="http://example.com/tags/Sliding-Window/"/>
    
  </entry>
  
  <entry>
    <title>1360. Number of Days Between Two Dates</title>
    <link href="http://example.com/2022/09/09/1360/"/>
    <id>http://example.com/2022/09/09/1360/</id>
    <published>2022-09-09T20:43:14.000Z</published>
    <updated>2022-09-11T20:35:16.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1360-Number-of-Days-Between-Two-Dates-easy"><a href="#1360-Number-of-Days-Between-Two-Dates-easy" class="headerlink" title="1360. Number of Days Between Two Dates(easy)"></a>1360. Number of Days Between Two Dates(easy)</h1><h2 id="Write-a-program-to-count-the-number-of-days-between-two-dates"><a href="#Write-a-program-to-count-the-number-of-days-between-two-dates" class="headerlink" title="Write a program to count the number of days between two dates."></a>Write a program to count the number of days between two dates.</h2><h2 id="The-two-dates-are-given-as-strings-their-format-is-YYYY-MM-DD-as-shown-in-the-examples"><a href="#The-two-dates-are-given-as-strings-their-format-is-YYYY-MM-DD-as-shown-in-the-examples" class="headerlink" title="The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples."></a>The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: date1 = &quot;2019-06-29&quot;, date2 = &quot;2019-06-30&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解:"></a><a href="https://leetcode.com/problems/number-of-days-between-two-dates/discuss/517582/Python-Magical-Formula">官方题解</a>:</h3><p>When m=1 or m=2 (January or February), we let m=13 or m=14 and let y decreased by 1. Imagine it is 13th or 14th month of the last year. By doing that, we let the magical formula also work for those two months. (153 * m + 8) // 5 is just a carefully designed way to record the days of each month. More specifically, it is designed to record the difference of days between two months. Suppose we have March 1st and April 1st, (153 * 3 + 8) // 5 = 93 while (153 * 4 + 8) // 5 = 124, the difference is 31 which is the number of days in March. Suppose we have April 1st to May 1st, (153 * 4 + 8) // 5 = 124 and (153 * 5 + 8) // 5 = 154, the difference is now 30 which is the number of days in April. You can also check other months.</p><p>I learned this formula somewhere else before. It is not something to come up with in minutes.<br>首先把1月2月加12当作13和14月，这样使得他们也可以套用公式<br>这里有一个关键的函数(153 * m + 8) // 5，通过前后月代入以后的相减，可以区分不同月份的长度，确实是非常神奇</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span>(<span class="params">self, date1: <span class="built_in">str</span>, date2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">date</span>):</span></span><br><span class="line">            y, m, d = <span class="built_in">map</span>(<span class="built_in">int</span>, date.split(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> m &lt; <span class="number">3</span>:</span><br><span class="line">                m += <span class="number">12</span></span><br><span class="line">                y -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">365</span> * y + y // <span class="number">4</span> + y // <span class="number">400</span> - y // <span class="number">100</span> + d + (<span class="number">153</span> * m + <span class="number">8</span>) // <span class="number">5</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(f(date1) - f(date2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1360-Number-of-Days-Between-Two-Dates-easy&quot;&gt;&lt;a href=&quot;#1360-Number-of-Days-Between-Two-Dates-easy&quot; class=&quot;headerlink&quot; title=&quot;1360. Nu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>practicecodesignal4</title>
    <link href="http://example.com/2022/09/05/practicecodesignal4/"/>
    <id>http://example.com/2022/09/05/practicecodesignal4/</id>
    <published>2022-09-06T00:31:02.000Z</published>
    <updated>2022-09-13T00:57:43.229Z</updated>
    
    <content type="html"><![CDATA[<p>def samesign(a,b):<br>    if a/abs(a) == b/abs(b):<br>        return True<br>    else:<br>        return False</p><p>def countSawSubarrays(arr):<br>    n = len(arr)</p><pre><code>if n&lt;2:    return 0s = 0e = 1count = 0while(e&lt;n):    sign = arr[e] - arr[s]    while(e&lt;n and arr[e] != arr[e-1] and samesign(arr[e] - arr[e-1], sign)):        sign = -1*sign        e+=1    size = e-s    if (size==1):        e+=1    count += (size*(size-1))//2    s = e-1    e = s+1return count</code></pre><p>arr1 = [9,8,7,6,5]<br>print(countSawSubarrays(arr1))<br>arr2 = [1,2,1,3,4,-2]<br>print(countSawSubarrays(arr2))<br>arr3 = [1,2,1,2,1]<br>print(countSawSubarrays(arr3))<br>arr4 = [10,10,10]<br>print(countSawSubarrays(arr4))</p><p>def solution(matrix, a, b):<br>    if a + b - 1 &gt; min(len(matrix), len(matrix[0])):<br>        return 0</p><pre><code>ret = 0for w, h in ((a, b), (b, a)):    # for every possible leftmost axb/bxa rectangle...    for start in range(min(len(matrix), len(matrix[0])) - (a + b - 1) + 1):        i = start        cur = 0        deques = []        j1 = j2 = w - 1        # build the rectangle         while j1 &lt;= j2:            for k in range(j1, j2 + 1):                cur += matrix[i][k]            deques.append((j1, j2))             j1 += (-1 if i - start &lt; w - 1 else 1)            j2 += (1 if i - start &lt; h - 1 else -1)            i += 1                stop = False        # slide it to the right until you can&#39;t anymore        while True:            ret = max(ret, cur)                        for ind, tup in enumerate(deques):                j1, j2 = tup                i = start + ind                if j2 == len(matrix[0]) - 1:                    stop = True                    break                j2 += 1                cur += matrix[i][j2] - matrix[i][j1]                j1 += 1                deques[ind] = (j1, j2)            if stop:                breakreturn ret</code></pre><p>You are given an array of integers numbers and two integers left and right. You task is to calculate a boolean array result, where result[i] = true if there exists an integer x, such that numbers[i] = (i + 1) * x and left ≤ x ≤ right. Otherwise, result[i] should be set to false.</p><p>You are given two strings - pattern and source. The first string pattern contains only the symbols 0 and 1, and the second string source contains only lowercase English letters.</p><p>Let’s say that pattern matches a substring source[l..r] of source if the following three conditions are met:<br>they have equal length,<br>for each 0 in pattern the corresponding letter in the substring is a vowel,<br>for each 1 in pattern the corresponding letter is a consonant.<br>Your task is to calculate the number of substrings of source that match pattern.</p><p>Note: In this task we define the vowels as ‘a’, ‘e’, ‘i’, ‘o’, ‘u’, and ‘y’. All other letters are consonants.</p><p>Given a matrix of integers, we’d like to consider the sum of the elements within the area of a 45° rotated rectangle. More formally, the area is bounded by two diagonals parallel to the main diagonal and two diagonals parallel to the secondary diagonal. The dimensions of the rotated rectangle are defined by the number of elements along the borders of the rectangle.</p><p>A sawtooth sequence is a sequence of numbers that alternate between increasing and decreasing. In other words, each element is either strictly greater than its neighbouring elements or strictly less than its neighbouring elements.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;def samesign(a,b):&lt;br&gt;    if a/abs(a) == b/abs(b):&lt;br&gt;        return True&lt;br&gt;    else:&lt;br&gt;        return False&lt;/p&gt;
&lt;p&gt;def countSawSubarra</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
</feed>
