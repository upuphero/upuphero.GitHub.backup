<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-13T02:32:21.681Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>389. Find the Difference(easy)</title>
    <link href="http://example.com/2022/10/12/389/"/>
    <id>http://example.com/2022/10/12/389/</id>
    <published>2022-10-13T02:31:15.000Z</published>
    <updated>2022-10-13T02:32:21.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="389-Find-the-Difference-easy"><a href="#389-Find-the-Difference-easy" class="headerlink" title="389. Find the Difference(easy)"></a>389. Find the Difference(easy)</h1><h2 id="You-are-given-two-strings-s-and-t"><a href="#You-are-given-two-strings-s-and-t" class="headerlink" title="You are given two strings s and t."></a>You are given two strings s and t.</h2><p>String t is generated by random shuffling string s and then add one more letter at a random position.</p><p>Return the letter that was added to t.</p><p>这题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        l1=Counter(s)</span><br><span class="line">        l2=Counter(t)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">return</span> char</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l1[char]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l1[char]&lt;<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> char</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;389-Find-the-Difference-easy&quot;&gt;&lt;a href=&quot;#389-Find-the-Difference-easy&quot; class=&quot;headerlink&quot; title=&quot;389. Find the Difference(easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>237. Delete Node in a Linked List(medium)</title>
    <link href="http://example.com/2022/10/12/237/"/>
    <id>http://example.com/2022/10/12/237/</id>
    <published>2022-10-13T02:22:00.000Z</published>
    <updated>2022-10-13T02:24:07.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="237-Delete-Node-in-a-Linked-List-medium"><a href="#237-Delete-Node-in-a-Linked-List-medium" class="headerlink" title="237. Delete Node in a Linked List(medium)"></a>237. Delete Node in a Linked List(medium)</h1><h2 id="There-is-a-singly-linked-list-head-and-we-want-to-delete-a-node-node-in-it"><a href="#There-is-a-singly-linked-list-head-and-we-want-to-delete-a-node-node-in-it" class="headerlink" title="There is a singly-linked list head and we want to delete a node node in it."></a>There is a singly-linked list head and we want to delete a node node in it.</h2><h2 id="You-are-given-the-node-to-be-deleted-node-You-will-not-be-given-access-to-the-first-node-of-head"><a href="#You-are-given-the-node-to-be-deleted-node-You-will-not-be-given-access-to-the-first-node-of-head" class="headerlink" title="You are given the node to be deleted node. You will not be given access to the first node of head."></a>You are given the node to be deleted node. You will not be given access to the first node of head.</h2><h2 id="All-the-values-of-the-linked-list-are-unique-and-it-is-guaranteed-that-the-given-node-node-is-not-the-last-node-in-the-linked-list"><a href="#All-the-values-of-the-linked-list-are-unique-and-it-is-guaranteed-that-the-given-node-node-is-not-the-last-node-in-the-linked-list" class="headerlink" title="All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list."></a>All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.</h2><h2 id="Delete-the-given-node-Note-that-by-deleting-the-node-we-do-not-mean-removing-it-from-memory-We-mean"><a href="#Delete-the-given-node-Note-that-by-deleting-the-node-we-do-not-mean-removing-it-from-memory-We-mean" class="headerlink" title="Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:"></a>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</h2><p>The value of the given node should not exist in the linked list.<br>The number of nodes in the linked list should decrease by one.<br>All the values before node should be in the same order.<br>All the values after node should be in the same order.</p><h2 id="Custom-testing"><a href="#Custom-testing" class="headerlink" title="Custom testing:"></a>Custom testing:</h2><p>For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.<br>We will build the linked list and pass the node to your function.<br>The output will be the entire list after calling your function.</p><p>这题其实很简单，因为只给了需要删除的节点node，所以只需要使node的val等于下一个节点的值，当前node的下一个链接到下下个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type node: ListNode</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        node.val=node.<span class="built_in">next</span>.val</span><br><span class="line">        node.<span class="built_in">next</span>=node.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;237-Delete-Node-in-a-Linked-List-medium&quot;&gt;&lt;a href=&quot;#237-Delete-Node-in-a-Linked-List-medium&quot; class=&quot;headerlink&quot; title=&quot;237. Delete No</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="linked-list" scheme="http://example.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>383. Ransom Note(easy)</title>
    <link href="http://example.com/2022/10/12/383/"/>
    <id>http://example.com/2022/10/12/383/</id>
    <published>2022-10-13T02:15:46.000Z</published>
    <updated>2022-10-13T02:17:56.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="383-Ransom-Note-easy"><a href="#383-Ransom-Note-easy" class="headerlink" title="383. Ransom Note(easy)"></a>383. Ransom Note(easy)</h1><h2 id="Given-two-strings-ransomNote-and-magazine-return-true-if-ransomNote-can-be-constructed-by-using-the-letters-from-magazine-and-false-otherwise"><a href="#Given-two-strings-ransomNote-and-magazine-return-true-if-ransomNote-can-be-constructed-by-using-the-letters-from-magazine-and-false-otherwise" class="headerlink" title="Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise."></a>Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.</h2><h2 id="Each-letter-in-magazine-can-only-be-used-once-in-ransomNote"><a href="#Each-letter-in-magazine-can-only-be-used-once-in-ransomNote" class="headerlink" title="Each letter in magazine can only be used once in ransomNote."></a>Each letter in magazine can only be used once in ransomNote.</h2><p>用counter得到每个字母和对应的个数，第一步判断是不是magazine有所有的字母，然后把个数不断减去，减到负数，证明个数不够</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line"></span><br><span class="line">        l1=Counter(ransomNote)</span><br><span class="line">        l2=Counter(magazine)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> ransomNote:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> magazine:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2[ch]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l2[ch]&lt;<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;383-Ransom-Note-easy&quot;&gt;&lt;a href=&quot;#383-Ransom-Note-easy&quot; class=&quot;headerlink&quot; title=&quot;383. Ransom Note(easy)&quot;&gt;&lt;/a&gt;383. Ransom Note(easy)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>374. Guess Number Higher or Lower(easy)</title>
    <link href="http://example.com/2022/10/12/374/"/>
    <id>http://example.com/2022/10/12/374/</id>
    <published>2022-10-12T21:56:32.000Z</published>
    <updated>2022-10-12T22:00:38.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="374-Guess-Number-Higher-or-Lower-easy"><a href="#374-Guess-Number-Higher-or-Lower-easy" class="headerlink" title="374. Guess Number Higher or Lower(easy)"></a>374. Guess Number Higher or Lower(easy)</h1><h2 id="We-are-playing-the-Guess-Game-The-game-is-as-follows"><a href="#We-are-playing-the-Guess-Game-The-game-is-as-follows" class="headerlink" title="We are playing the Guess Game. The game is as follows:"></a>We are playing the Guess Game. The game is as follows:</h2><p>I pick a number from 1 to n. You have to guess which number I picked.</p><p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p><p>You call a pre-defined API int guess(int num), which returns three possible results:</p><p>-1: Your guess is higher than the number I picked (i.e. num &gt; pick).<br>1: Your guess is lower than the number I picked (i.e. num &lt; pick).<br>0: your guess is equal to the number I picked (i.e. num == pick).<br>Return the number that I picked.</p><p>猜数字，本身有个内置函数guess(),一开始就直接写循环挨个算是不是相等，发现后面超时，所以改用二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The guess API is already defined for you.</span></span><br><span class="line"><span class="comment"># @param num, your guess</span></span><br><span class="line"><span class="comment"># @return -1 if num is higher than the picked number</span></span><br><span class="line"><span class="comment">#          1 if num is lower than the picked number</span></span><br><span class="line"><span class="comment">#          otherwise return 0</span></span><br><span class="line"><span class="comment"># def guess(num: int) -&gt; int:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        low=<span class="number">1</span></span><br><span class="line">        high=n</span><br><span class="line">        <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">            mid = low + (high - low) // <span class="number">2</span></span><br><span class="line">            res=guess(mid)</span><br><span class="line">            <span class="keyword">if</span> res==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> res&lt;<span class="number">0</span>:</span><br><span class="line">                high = mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;374-Guess-Number-Higher-or-Lower-easy&quot;&gt;&lt;a href=&quot;#374-Guess-Number-Higher-or-Lower-easy&quot; class=&quot;headerlink&quot; title=&quot;374. Guess Number </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>346. Moving Average from Data Stream(easy)</title>
    <link href="http://example.com/2022/10/12/346/"/>
    <id>http://example.com/2022/10/12/346/</id>
    <published>2022-10-12T21:37:58.000Z</published>
    <updated>2022-10-13T02:06:24.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="346-Moving-Average-from-Data-Stream-easy"><a href="#346-Moving-Average-from-Data-Stream-easy" class="headerlink" title="346. Moving Average from Data Stream(easy)"></a>346. Moving Average from Data Stream(easy)</h1><h2 id="Given-a-stream-of-integers-and-a-window-size-calculate-the-moving-average-of-all-integers-in-the-sliding-window"><a href="#Given-a-stream-of-integers-and-a-window-size-calculate-the-moving-average-of-all-integers-in-the-sliding-window" class="headerlink" title="Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window."></a>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</h2><h2 id="Implement-the-MovingAverage-class"><a href="#Implement-the-MovingAverage-class" class="headerlink" title="Implement the MovingAverage class:"></a>Implement the MovingAverage class:</h2><p>MovingAverage(int size) Initializes the object with the size of the window size.<br>double next(int val) Returns the moving average of the last size values of the stream.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MovingAverage&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]</span><br><span class="line">[[3], [1], [10], [3], [5]]</span><br><span class="line">Output</span><br><span class="line">[null, 1.0, 5.5, 4.66667, 6.0]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MovingAverage movingAverage = new MovingAverage(3);</span><br><span class="line">movingAverage.next(1); // return 1.0 = 1 / 1</span><br><span class="line">movingAverage.next(10); // return 5.5 = (1 + 10) / 2</span><br><span class="line">movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3</span><br><span class="line">movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovingAverage</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.res=[]</span><br><span class="line">        self.size=size</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        queue=self.res</span><br><span class="line">        size=self.size</span><br><span class="line">        queue.append(val)</span><br><span class="line">        window_sum=<span class="built_in">sum</span>(queue[-size:])</span><br><span class="line">        <span class="keyword">return</span> window_sum/<span class="built_in">min</span>(<span class="built_in">len</span>(queue),size)</span><br><span class="line"><span class="comment"># Your MovingAverage object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MovingAverage(size)</span></span><br><span class="line"><span class="comment"># param_1 = obj.next(val)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;346-Moving-Average-from-Data-Stream-easy&quot;&gt;&lt;a href=&quot;#346-Moving-Average-from-Data-Stream-easy&quot; class=&quot;headerlink&quot; title=&quot;346. Moving </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Data structure design" scheme="http://example.com/tags/Data-structure-design/"/>
    
  </entry>
  
  <entry>
    <title>157. Read N Characters Given Read4(easy)</title>
    <link href="http://example.com/2022/10/12/157/"/>
    <id>http://example.com/2022/10/12/157/</id>
    <published>2022-10-12T21:30:01.000Z</published>
    <updated>2022-10-12T21:59:48.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="157-Read-N-Characters-Given-Read4-easy"><a href="#157-Read-N-Characters-Given-Read4-easy" class="headerlink" title="157. Read N Characters Given Read4(easy)"></a>157. Read N Characters Given Read4(easy)</h1><h2 id="Given-a-file-and-assume-that-you-can-only-read-the-file-using-a-given-method-read4-implement-a-method-to-read-n-characters"><a href="#Given-a-file-and-assume-that-you-can-only-read-the-file-using-a-given-method-read4-implement-a-method-to-read-n-characters" class="headerlink" title="Given a file and assume that you can only read the file using a given method read4, implement a method to read n characters."></a>Given a file and assume that you can only read the file using a given method read4, implement a method to read n characters.</h2><h2 id="Method-read4"><a href="#Method-read4" class="headerlink" title="Method read4:"></a>Method read4:</h2><p>The API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.</p><p>The return value is the number of actual characters read.</p><p>Note that read4() has its own file pointer, much like FILE *fp in C.</p><h2 id="Definition-of-read4"><a href="#Definition-of-read4" class="headerlink" title="Definition of read4:"></a>Definition of read4:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Parameter:  char[] buf4</span><br><span class="line">    Returns:    int</span><br><span class="line"></span><br><span class="line">buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].</span><br></pre></td></tr></table></figure><p>给你一个文件，并且该文件只能通过给定的 read4 方法来读取，请实现一个方法使其能够读取 n 个字符。</p><p>read4 方法：</p><p>API read4 可以从文件中读取 4 个连续的字符，并且将它们写入缓存数组 buf 中。</p><p>返回值为实际读取的字符个数。</p><p>注意 read4() 自身拥有文件指针，很类似于 C 语言中的 FILE *fp 。</p><p>read4 的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数类型: char[] buf4</span><br><span class="line">返回类型: int</span><br><span class="line">注意: buf4[] 是目标缓存区不是源缓存区，read4 的返回结果将会复制到 buf4[] 当中。</span><br></pre></td></tr></table></figure><p>read 方法：<br>通过使用 read4 方法，实现 read 方法。该方法可以从文件中读取 n 个字符并将其存储到缓存数组 buf 中。您 不能 直接操作文件。</p><p>返回值为实际读取的字符。</p><p>read 的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数类型: char[] buf, int n</span><br><span class="line">返回类型: int</span><br><span class="line">注意: buf[] 是目标缓存区不是源缓存区，你需要将结果写入 buf[] 中。</span><br></pre></td></tr></table></figure><h4 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你不能直接操作该文件，文件只能通过 read4 获取而 不能 通过 read。</span><br><span class="line">read 函数只在每个测试用例调用一次。</span><br><span class="line">你可以假定目标缓存数组 buf 保证有足够的空间存下 n 个字符。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The read4 API is already defined for you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param buf4, a list of characters</span></span><br><span class="line"><span class="string">    @return an integer</span></span><br><span class="line"><span class="string">    def read4(buf4):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Below is an example of how the read4 API can be called.</span></span><br><span class="line"><span class="string">file = File(&quot;abcdefghijk&quot;) # File is &quot;abcdefghijk&quot;, initially file pointer (fp) points to &#x27;a&#x27;</span></span><br><span class="line"><span class="string">buf4 = [&#x27; &#x27;] * 4 # Create buffer with enough space to store characters</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 4. Now buf = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;], fp points to &#x27;e&#x27;</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 4. Now buf = [&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;,&#x27;h&#x27;], fp points to &#x27;i&#x27;</span></span><br><span class="line"><span class="string">read4(buf4) # read4 returns 3. Now buf = [&#x27;i&#x27;,&#x27;j&#x27;,&#x27;k&#x27;,...], fp points to end of file</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self, buf, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type buf: Destination buffer (List[str])</span></span><br><span class="line"><span class="string">        :type n: Number of characters to read (int)</span></span><br><span class="line"><span class="string">        :rtype: The number of actual characters read (int)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        temp = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        count = read4(temp)</span><br><span class="line">        s = temp[:count]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= n: <span class="keyword">break</span></span><br><span class="line">            count = read4(temp)</span><br><span class="line">            s += temp[:count]</span><br><span class="line">            </span><br><span class="line">        total = <span class="built_in">min</span>(n, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total):</span><br><span class="line">            buf[i] = s[i]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;157-Read-N-Characters-Given-Read4-easy&quot;&gt;&lt;a href=&quot;#157-Read-N-Characters-Given-Read4-easy&quot; class=&quot;headerlink&quot; title=&quot;157. Read N Char</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>2434. Using a Robot to Print the Lexicographically Smallest String(medium)</title>
    <link href="http://example.com/2022/10/12/2434/"/>
    <id>http://example.com/2022/10/12/2434/</id>
    <published>2022-10-12T21:15:24.000Z</published>
    <updated>2022-10-12T21:31:48.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium"><a href="#2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium" class="headerlink" title="2434. Using a Robot to Print the Lexicographically Smallest String(medium)"></a>2434. Using a Robot to Print the Lexicographically Smallest String(medium)</h1><h2 id="You-are-given-a-string-s-and-a-robot-that-currently-holds-an-empty-string-t-Apply-one-of-the-following-operations-until-s-and-t-are-both-empty"><a href="#You-are-given-a-string-s-and-a-robot-that-currently-holds-an-empty-string-t-Apply-one-of-the-following-operations-until-s-and-t-are-both-empty" class="headerlink" title="You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:"></a>You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:</h2><p>Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.<br>Remove the last character of a string t and give it to the robot. The robot will write this character on paper.</p><h2 id="Return-the-lexicographically-smallest-string-that-can-be-written-on-the-paper"><a href="#Return-the-lexicographically-smallest-string-that-can-be-written-on-the-paper" class="headerlink" title="Return the lexicographically smallest string that can be written on the paper."></a>Return the lexicographically smallest string that can be written on the paper.</h2><p>周赛题，一道关于栈的题 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robotWithString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        </span><br><span class="line">        d, stack, ans = Counter(s), [], []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            </span><br><span class="line">            d[ch]-= <span class="number">1</span></span><br><span class="line">            stack.append(ch)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> d[ch]: d.pop(ch)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">while</span> d <span class="keyword">and</span> stack <span class="keyword">and</span> <span class="built_in">min</span>(d) &gt;= stack[-<span class="number">1</span>]:</span><br><span class="line">                ans += stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(ans + stack[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2434-Using-a-Robot-to-Print-the-Lexicographically-Smallest-String-medium&quot;&gt;&lt;a href=&quot;#2434-Using-a-Robot-to-Print-the-Lexicographicall</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>359. Logger Rate Limiter(easy)</title>
    <link href="http://example.com/2022/10/12/359/"/>
    <id>http://example.com/2022/10/12/359/</id>
    <published>2022-10-12T20:16:52.000Z</published>
    <updated>2022-10-12T21:59:38.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="359-Logger-Rate-Limiter-easy"><a href="#359-Logger-Rate-Limiter-easy" class="headerlink" title="359. Logger Rate Limiter(easy)"></a>359. Logger Rate Limiter(easy)</h1><h2 id="Design-a-logger-system-that-receives-a-stream-of-messages-along-with-their-timestamps-Each-unique-message-should-only-be-printed-at-most-every-10-seconds-i-e-a-message-printed-at-timestamp-t-will-prevent-other-identical-messages-from-being-printed-until-timestamp-t-10"><a href="#Design-a-logger-system-that-receives-a-stream-of-messages-along-with-their-timestamps-Each-unique-message-should-only-be-printed-at-most-every-10-seconds-i-e-a-message-printed-at-timestamp-t-will-prevent-other-identical-messages-from-being-printed-until-timestamp-t-10" class="headerlink" title="Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp t will prevent other identical messages from being printed until timestamp t + 10)."></a>Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp t will prevent other identical messages from being printed until timestamp t + 10).</h2><h2 id="All-messages-will-come-in-chronological-order-Several-messages-may-arrive-at-the-same-timestamp"><a href="#All-messages-will-come-in-chronological-order-Several-messages-may-arrive-at-the-same-timestamp" class="headerlink" title="All messages will come in chronological order. Several messages may arrive at the same timestamp."></a>All messages will come in chronological order. Several messages may arrive at the same timestamp.</h2><h2 id="Implement-the-Logger-class"><a href="#Implement-the-Logger-class" class="headerlink" title="Implement the Logger class:"></a>Implement the Logger class:</h2><p>Logger() Initializes the logger object.<br>bool shouldPrintMessage(int timestamp, string message) Returns true if the message should be printed in the given timestamp, otherwise returns false.</p><p>这题的意思是message包含不同的短语，相同的短语之间间隔得大于等于10，不同的短语可以直接返回true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._msg_dict = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shouldPrintMessage</span>(<span class="params">self, timestamp: <span class="built_in">int</span>, message: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns true if the message should be printed in the given timestamp, otherwise returns false.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> message <span class="keyword">not</span> <span class="keyword">in</span> self._msg_dict:</span><br><span class="line">            <span class="comment"># case 1). add the message to print</span></span><br><span class="line">            self._msg_dict[message] = timestamp</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> timestamp - self._msg_dict[message] &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="comment"># case 2). update the timestamp of the message</span></span><br><span class="line">            self._msg_dict[message] = timestamp</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Your Logger object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Logger()</span></span><br><span class="line"><span class="comment"># param_1 = obj.shouldPrintMessage(timestamp,message)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;359-Logger-Rate-Limiter-easy&quot;&gt;&lt;a href=&quot;#359-Logger-Rate-Limiter-easy&quot; class=&quot;headerlink&quot; title=&quot;359. Logger Rate Limiter(easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="Data structure design" scheme="http://example.com/tags/Data-structure-design/"/>
    
  </entry>
  
  <entry>
    <title>293. Flip Game(easy)</title>
    <link href="http://example.com/2022/10/12/293/"/>
    <id>http://example.com/2022/10/12/293/</id>
    <published>2022-10-12T20:03:55.000Z</published>
    <updated>2022-10-12T20:11:19.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="293-Flip-Game-easy"><a href="#293-Flip-Game-easy" class="headerlink" title="293. Flip Game(easy)"></a>293. Flip Game(easy)</h1><h2 id="You-are-playing-a-Flip-Game-with-your-friend"><a href="#You-are-playing-a-Flip-Game-with-your-friend" class="headerlink" title="You are playing a Flip Game with your friend."></a>You are playing a Flip Game with your friend.</h2><h2 id="You-are-given-a-string-currentState-that-contains-only-‘-’-and-‘-‘-You-and-your-friend-take-turns-to-flip-two-consecutive-“-”-into-“–”-The-game-ends-when-a-person-can-no-longer-make-a-move-and-therefore-the-other-person-will-be-the-winner"><a href="#You-are-given-a-string-currentState-that-contains-only-‘-’-and-‘-‘-You-and-your-friend-take-turns-to-flip-two-consecutive-“-”-into-“–”-The-game-ends-when-a-person-can-no-longer-make-a-move-and-therefore-the-other-person-will-be-the-winner" class="headerlink" title="You are given a string currentState that contains only ‘+’ and ‘-‘. You and your friend take turns to flip two consecutive “++” into “–”. The game ends when a person can no longer make a move, and therefore the other person will be the winner."></a>You are given a string currentState that contains only ‘+’ and ‘-‘. You and your friend take turns to flip two consecutive “++” into “–”. The game ends when a person can no longer make a move, and therefore the other person will be the winner.</h2><h2 id="Return-all-possible-states-of-the-string-currentState-after-one-valid-move-You-may-return-the-answer-in-any-order-If-there-is-no-valid-move-return-an-empty-list"><a href="#Return-all-possible-states-of-the-string-currentState-after-one-valid-move-You-may-return-the-answer-in-any-order-If-there-is-no-valid-move-return-an-empty-list" class="headerlink" title="Return all possible states of the string currentState after one valid move. You may return the answer in any order. If there is no valid move, return an empty list []."></a>Return all possible states of the string currentState after one valid move. You may return the answer in any order. If there is no valid move, return an empty list [].</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: currentState = &quot;++++&quot;</span><br><span class="line">Output: [&quot;--++&quot;,&quot;+--+&quot;,&quot;++--&quot;]</span><br></pre></td></tr></table></figure><p>连着的++换成–，看能输出多少个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generatePossibleNextMoves</span>(<span class="params">self, currentState: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        res=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(currentState)-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> currentState[i:i+<span class="number">2</span>]==<span class="string">&quot;++&quot;</span>:</span><br><span class="line">                res.append(currentState[:i]+<span class="string">&#x27;--&#x27;</span>+currentState[i+<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;293-Flip-Game-easy&quot;&gt;&lt;a href=&quot;#293-Flip-Game-easy&quot; class=&quot;headerlink&quot; title=&quot;293. Flip Game(easy)&quot;&gt;&lt;/a&gt;293. Flip Game(easy)&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>367. Valid Perfect Square(easy)</title>
    <link href="http://example.com/2022/10/12/367/"/>
    <id>http://example.com/2022/10/12/367/</id>
    <published>2022-10-12T19:32:52.000Z</published>
    <updated>2022-10-12T20:13:22.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="367-Valid-Perfect-Square-easy"><a href="#367-Valid-Perfect-Square-easy" class="headerlink" title="367. Valid Perfect Square(easy)"></a>367. Valid Perfect Square(easy)</h1><h2 id="Given-a-positive-integer-num-write-a-function-which-returns-True-if-num-is-a-perfect-square-else-False"><a href="#Given-a-positive-integer-num-write-a-function-which-returns-True-if-num-is-a-perfect-square-else-False" class="headerlink" title="Given a positive integer num, write a function which returns True if num is a perfect square else False."></a>Given a positive integer num, write a function which returns True if num is a perfect square else False.</h2><h2 id="Follow-up-Do-not-use-any-built-in-library-function-such-as-sqrt"><a href="#Follow-up-Do-not-use-any-built-in-library-function-such-as-sqrt" class="headerlink" title="Follow up: Do not use any built-in library function such as sqrt."></a>Follow up: Do not use any built-in library function such as sqrt.</h2><p>判断是否是平方数，可以通过等差数列来求，等差数列a0=1, d=2，最后求和的结果就是n^2,所以通过该等差数列来求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        d=<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> num&gt;<span class="number">0</span>:</span><br><span class="line">            num-=i</span><br><span class="line">            i+=d</span><br><span class="line">        <span class="keyword">if</span> num==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;367-Valid-Perfect-Square-easy&quot;&gt;&lt;a href=&quot;#367-Valid-Perfect-Square-easy&quot; class=&quot;headerlink&quot; title=&quot;367. Valid Perfect Square(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>338. Counting Bits(easy)</title>
    <link href="http://example.com/2022/10/12/338/"/>
    <id>http://example.com/2022/10/12/338/</id>
    <published>2022-10-12T19:23:15.000Z</published>
    <updated>2022-10-12T20:13:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="338-Counting-Bits-easy"><a href="#338-Counting-Bits-easy" class="headerlink" title="338. Counting Bits(easy)"></a>338. Counting Bits(easy)</h1><h2 id="Given-an-integer-n-return-an-array-ans-of-length-n-1-such-that-for-each-i-0-lt-i-lt-n-ans-i-is-the-number-of-1’s-in-the-binary-representation-of-i"><a href="#Given-an-integer-n-return-an-array-ans-of-length-n-1-such-that-for-each-i-0-lt-i-lt-n-ans-i-is-the-number-of-1’s-in-the-binary-representation-of-i" class="headerlink" title="Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1’s in the binary representation of i."></a>Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1’s in the binary representation of i.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: [0,1,1]</span><br><span class="line">Explanation:</span><br><span class="line">0 --&gt; 0</span><br><span class="line">1 --&gt; 1</span><br><span class="line">2 --&gt; 10</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.com/problems/counting-bits/solutions/127448/counting-bits/">官方题解</a></h3><p>Use previous count results to generate the count for a new integer.</p><p>DP + Most Significant Bit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        ans = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        b = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># [0, b) is calculated</span></span><br><span class="line">        <span class="keyword">while</span> b &lt;= n:</span><br><span class="line">            <span class="comment"># generate [b, 2b) or [b, n) from [0, b)</span></span><br><span class="line">            <span class="keyword">while</span> x &lt; b <span class="keyword">and</span> x + b &lt;= n:</span><br><span class="line">                ans[x + b] = ans[x] + <span class="number">1</span></span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            x = <span class="number">0</span> <span class="comment"># reset x</span></span><br><span class="line">            b &lt;&lt;= <span class="number">1</span> <span class="comment"># b = 2b</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans               </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;338-Counting-Bits-easy&quot;&gt;&lt;a href=&quot;#338-Counting-Bits-easy&quot; class=&quot;headerlink&quot; title=&quot;338. Counting Bits(easy)&quot;&gt;&lt;/a&gt;338. Counting Bits</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="dynamic programming" scheme="http://example.com/tags/dynamic-programming/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>292. Nim Game(easy)</title>
    <link href="http://example.com/2022/10/12/292/"/>
    <id>http://example.com/2022/10/12/292/</id>
    <published>2022-10-12T19:08:16.000Z</published>
    <updated>2022-10-12T20:12:52.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="292-Nim-Game-easy"><a href="#292-Nim-Game-easy" class="headerlink" title="292. Nim Game(easy)"></a>292. Nim Game(easy)</h1><h2 id="You-are-playing-the-following-Nim-Game-with-your-friend"><a href="#You-are-playing-the-following-Nim-Game-with-your-friend" class="headerlink" title="You are playing the following Nim Game with your friend:"></a>You are playing the following Nim Game with your friend:</h2><p>Initially, there is a heap of stones on the table.<br>You and your friend will alternate taking turns, and you go first.<br>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.<br>The one who removes the last stone is the winner.<br>Given , the number of stones in the heap, return if you can win the game assuming both you and your friend play optimally, otherwise return .n  truefalse</p><p>总结就是让对手只能拿到4或者4的倍数，这样他拿几个我都有机会赢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWinNim</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;292-Nim-Game-easy&quot;&gt;&lt;a href=&quot;#292-Nim-Game-easy&quot; class=&quot;headerlink&quot; title=&quot;292. Nim Game(easy)&quot;&gt;&lt;/a&gt;292. Nim Game(easy)&lt;/h1&gt;&lt;h2 id=&quot;Y</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Tree" scheme="http://example.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>270. Closest Binary Search Tree Value(easy)</title>
    <link href="http://example.com/2022/10/12/270/"/>
    <id>http://example.com/2022/10/12/270/</id>
    <published>2022-10-12T18:49:07.000Z</published>
    <updated>2022-10-12T20:13:05.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="270-Closest-Binary-Search-Tree-Value-easy"><a href="#270-Closest-Binary-Search-Tree-Value-easy" class="headerlink" title="270. Closest Binary Search Tree Value(easy)"></a>270. Closest Binary Search Tree Value(easy)</h1><h2 id="Given-the-root-of-a-binary-search-tree-and-a-target-value-return-the-value-in-the-BST-that-is-closest-to-the-target"><a href="#Given-the-root-of-a-binary-search-tree-and-a-target-value-return-the-value-in-the-BST-that-is-closest-to-the-target" class="headerlink" title="Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target."></a>Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target.</h2><p>二叉搜索树上与target最近的数字<br><a href="https://leetcode.com/problems/closest-binary-search-tree-value/solutions/70327/4-7-lines-recursive-iterative-ruby-c-java-python/">leetcode题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestValue</span>(<span class="params">self, root, target</span>):</span></span><br><span class="line">        a = root.val</span><br><span class="line">        kid = root.left <span class="keyword">if</span> target &lt; a <span class="keyword">else</span> root.right</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kid: <span class="keyword">return</span> a</span><br><span class="line">        b = self.closestValue(kid, target)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>((b, a), key=<span class="keyword">lambda</span> x: <span class="built_in">abs</span>(target - x))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;270-Closest-Binary-Search-Tree-Value-easy&quot;&gt;&lt;a href=&quot;#270-Closest-Binary-Search-Tree-Value-easy&quot; class=&quot;headerlink&quot; title=&quot;270. Close</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Tree" scheme="http://example.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>976. Largest Perimeter Triangle(easy)</title>
    <link href="http://example.com/2022/10/12/976/"/>
    <id>http://example.com/2022/10/12/976/</id>
    <published>2022-10-12T04:54:50.000Z</published>
    <updated>2022-10-12T20:14:44.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="976-Largest-Perimeter-Triangle-easy"><a href="#976-Largest-Perimeter-Triangle-easy" class="headerlink" title="976. Largest Perimeter Triangle(easy)"></a>976. Largest Perimeter Triangle(easy)</h1><h1 id="Given-an-integer-array-nums-return-the-largest-perimeter-of-a-triangle-with-a-non-zero-area-formed-from-three-of-these-lengths-If-it-is-impossible-to-form-any-triangle-of-a-non-zero-area-return-0"><a href="#Given-an-integer-array-nums-return-the-largest-perimeter-of-a-triangle-with-a-non-zero-area-formed-from-three-of-these-lengths-If-it-is-impossible-to-form-any-triangle-of-a-non-zero-area-return-0" class="headerlink" title="Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0."></a>Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.</h1><p>组成三角形的条件是两边之和大于第三边，先将数组排序，然后从大往小挨个算能否组成三角形，如果可以就输出，到最后都没有发现就直接return 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestPerimeter</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i]&gt;=nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i]&lt;nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">sum</span>(nums[i:i+<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;976-Largest-Perimeter-Triangle-easy&quot;&gt;&lt;a href=&quot;#976-Largest-Perimeter-Triangle-easy&quot; class=&quot;headerlink&quot; title=&quot;976. Largest Perimeter</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>263. Ugly Number(easy)</title>
    <link href="http://example.com/2022/10/12/263/"/>
    <id>http://example.com/2022/10/12/263/</id>
    <published>2022-10-12T04:38:48.000Z</published>
    <updated>2022-10-12T04:40:36.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="263-Ugly-Number-easy"><a href="#263-Ugly-Number-easy" class="headerlink" title="263. Ugly Number(easy)"></a>263. Ugly Number(easy)</h1><h2 id="An-ugly-number-is-a-positive-integer-whose-prime-factors-are-limited-to-2-3-and-5"><a href="#An-ugly-number-is-a-positive-integer-whose-prime-factors-are-limited-to-2-3-and-5" class="headerlink" title="An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5."></a>An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.</h2><h2 id="Given-an-integer-n-return-true-if-n-is-an-ugly-number"><a href="#Given-an-integer-n-return-true-if-n-is-an-ugly-number" class="headerlink" title="Given an integer n, return true if n is an ugly number."></a>Given an integer n, return true if n is an ugly number.</h2><p>这是一个系列题<br>263. 丑数（简单）</p><ol start="264"><li><p>丑数 II（中等）</p></li><li><p>丑数 III（中等）</p></li><li><p>超级丑数（中等）</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUgly</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> n%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">or</span> n%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">or</span> n%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n %<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                n/=<span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> n%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">                n/=<span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> n%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">                n/=<span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;263-Ugly-Number-easy&quot;&gt;&lt;a href=&quot;#263-Ugly-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;263. Ugly Number(easy)&quot;&gt;&lt;/a&gt;263. Ugly Number(easy)&lt;/</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>266. Palindrome Permutation(easy)</title>
    <link href="http://example.com/2022/10/12/266/"/>
    <id>http://example.com/2022/10/12/266/</id>
    <published>2022-10-12T04:30:30.000Z</published>
    <updated>2022-10-12T20:14:14.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="266-Palindrome-Permutation-easy"><a href="#266-Palindrome-Permutation-easy" class="headerlink" title="266. Palindrome Permutation(easy)"></a>266. Palindrome Permutation(easy)</h1><h2 id="Given-a-string-s-return-true-if-a-permutation-of-the-string-could-form-a-palindrome"><a href="#Given-a-string-s-return-true-if-a-permutation-of-the-string-could-form-a-palindrome" class="headerlink" title="Given a string s, return true if a permutation of the string could form a palindrome."></a>Given a string s, return true if a permutation of the string could form a palindrome.</h2><p>这题判断string能否组成回文串，回文串的特点就是最多只能有一个字母是奇数，其他的都得是偶数，这里很巧妙的运用了set的去重特性，最多只有一个字母留在set里</p><p><a href="https://leetcode.com/problems/palindrome-permutation/solutions/1006994/python-3-hashmap-dict-sets-tc-o-n-sc-o-1/">Leetcode题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># Set: Iterate over the given string</span></span><br><span class="line">    <span class="comment"># Add the character when it is not there, Remove it when it is.</span></span><br><span class="line">    <span class="comment"># At the end, the length of the sets is lesser than 2</span></span><br><span class="line">    <span class="comment"># TC O(n) n is the number of the character of string</span></span><br><span class="line">    <span class="comment"># SC O(1) the maximum size of the set would be 128 ASCII characters</span></span><br><span class="line">    <span class="comment"># This is bounded (constant),</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPermutePalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        sets = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> sets:</span><br><span class="line">                sets.add(char)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sets.remove(char)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">len</span>(sets) &lt;= <span class="number">1</span>)          </span><br><span class="line">    </span><br><span class="line"><span class="comment">#     # Hashmap: Count the number of occurence of characters</span></span><br><span class="line"><span class="comment">#     # TC O(n) n is the number of the character of string</span></span><br><span class="line"><span class="comment">#     # SC O(1) the maximum size of the map would be 128 ASCII characters</span></span><br><span class="line"><span class="comment">#     # This is bounded (constant)</span></span><br><span class="line"><span class="comment">#     def canPermutePalindrome(self, s: str) -&gt; bool:</span></span><br><span class="line"><span class="comment">#         # Iterate over a given string</span></span><br><span class="line"><span class="comment">#         # Count the number of occurence of characters</span></span><br><span class="line"><span class="comment">#         # key: Character, value: count</span></span><br><span class="line"><span class="comment">#         maps = collections.defaultdict(int)</span></span><br><span class="line"><span class="comment">#         for char in s:</span></span><br><span class="line"><span class="comment">#             if maps.get(char):</span></span><br><span class="line"><span class="comment">#                 maps[char] += 1</span></span><br><span class="line"><span class="comment">#             else:</span></span><br><span class="line"><span class="comment">#                 maps[char] = 1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#         # Traverse over the map to find even number</span></span><br><span class="line"><span class="comment">#         count = 0</span></span><br><span class="line"><span class="comment">#         for key in maps:</span></span><br><span class="line"><span class="comment">#             count += maps[key] %2</span></span><br><span class="line"><span class="comment">#             # if maps[key] % 2 == 1:</span></span><br><span class="line"><span class="comment">#             #     # Odd number of occuerence</span></span><br><span class="line"><span class="comment">#         # if the count is lesser than 2, it is palindrome</span></span><br><span class="line"><span class="comment">#         return (count &lt;= 1)                </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;266-Palindrome-Permutation-easy&quot;&gt;&lt;a href=&quot;#266-Palindrome-Permutation-easy&quot; class=&quot;headerlink&quot; title=&quot;266. Palindrome Permutation(ea</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="set" scheme="http://example.com/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>334. Increasing Triplet Subsequence(easy)</title>
    <link href="http://example.com/2022/10/11/334/"/>
    <id>http://example.com/2022/10/11/334/</id>
    <published>2022-10-11T04:39:58.000Z</published>
    <updated>2022-10-12T20:12:00.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="334-Increasing-Triplet-Subsequence-easy"><a href="#334-Increasing-Triplet-Subsequence-easy" class="headerlink" title="334. Increasing Triplet Subsequence(easy)"></a>334. Increasing Triplet Subsequence(easy)</h1><h2 id="Given-an-integer-array-nums-return-true-if-there-exists-a-triple-of-indices-i-j-k-such-that-i-lt-j-lt-k-and-nums-i-lt-nums-j-lt-nums-k-If-no-such-indices-exists-return-false"><a href="#Given-an-integer-array-nums-return-true-if-there-exists-a-triple-of-indices-i-j-k-such-that-i-lt-j-lt-k-and-nums-i-lt-nums-j-lt-nums-k-If-no-such-indices-exists-return-false" class="headerlink" title="Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i &lt; j &lt; k and nums[i] &lt; nums[j] &lt; nums[k]. If no such indices exists, return false."></a>Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i &lt; j &lt; k and nums[i] &lt; nums[j] &lt; nums[k]. If no such indices exists, return false.</h2><p>在一个队列里找到三个不断增大的数，不需要连续<br>float(“inf”)是一个upper bound，也就是无穷大的边界专门用来做比较用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increasingTriplet</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        first_num = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">        second_num = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> n &lt;= first_num:<span class="comment"># 第一小的数</span></span><br><span class="line">                first_num = n</span><br><span class="line">            <span class="keyword">elif</span> n &lt;= second_num:<span class="comment"># 第二小的数</span></span><br><span class="line">                second_num = n</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment">#最后一个数</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;334-Increasing-Triplet-Subsequence-easy&quot;&gt;&lt;a href=&quot;#334-Increasing-Triplet-Subsequence-easy&quot; class=&quot;headerlink&quot; title=&quot;334. Increasin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>257. Binary Tree Paths(easy)</title>
    <link href="http://example.com/2022/10/10/257/"/>
    <id>http://example.com/2022/10/10/257/</id>
    <published>2022-10-11T01:22:55.000Z</published>
    <updated>2022-10-12T20:11:41.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="257-Binary-Tree-Paths-easy"><a href="#257-Binary-Tree-Paths-easy" class="headerlink" title="257. Binary Tree Paths(easy)"></a>257. Binary Tree Paths(easy)</h1><h2 id="Given-the-root-of-a-binary-tree-return-all-root-to-leaf-paths-in-any-order"><a href="#Given-the-root-of-a-binary-tree-return-all-root-to-leaf-paths-in-any-order" class="headerlink" title="Given the root of a binary tree, return all root-to-leaf paths in any order."></a>Given the root of a binary tree, return all root-to-leaf paths in any order.</h2><h2 id="A-leaf-is-a-node-with-no-children"><a href="#A-leaf-is-a-node-with-no-children" class="headerlink" title="A leaf is a node with no children."></a>A leaf is a node with no children.</h2><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode.cn/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/">https://leetcode.cn/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">construct_paths</span>(<span class="params">root, path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                path += <span class="built_in">str</span>(root.val)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:  <span class="comment"># 当前节点是叶子节点</span></span><br><span class="line">                    paths.append(path)  <span class="comment"># 把路径加入到答案中</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path += <span class="string">&#x27;-&gt;&#x27;</span>  <span class="comment"># 当前节点不是叶子节点，继续递归遍历</span></span><br><span class="line">                    construct_paths(root.left, path)</span><br><span class="line">                    construct_paths(root.right, path)</span><br><span class="line">        paths = []</span><br><span class="line">        construct_paths(root, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;257-Binary-Tree-Paths-easy&quot;&gt;&lt;a href=&quot;#257-Binary-Tree-Paths-easy&quot; class=&quot;headerlink&quot; title=&quot;257. Binary Tree Paths(easy)&quot;&gt;&lt;/a&gt;257. B</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Tree" scheme="http://example.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>243. Shortest Word Distance(easy)</title>
    <link href="http://example.com/2022/10/10/243/"/>
    <id>http://example.com/2022/10/10/243/</id>
    <published>2022-10-11T01:17:18.000Z</published>
    <updated>2022-10-12T20:11:36.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="243-Shortest-Word-Distance-easy"><a href="#243-Shortest-Word-Distance-easy" class="headerlink" title="243. Shortest Word Distance(easy)"></a>243. Shortest Word Distance(easy)</h1><h2 id="Given-an-array-of-strings-wordsDict-and-two-different-strings-that-already-exist-in-the-array-word1-and-word2-return-the-shortest-distance-between-these-two-words-in-the-list"><a href="#Given-an-array-of-strings-wordsDict-and-two-different-strings-that-already-exist-in-the-array-word1-and-word2-return-the-shortest-distance-between-these-two-words-in-the-list" class="headerlink" title="Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list."></a>Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.</h2><p>这题先找到对应word的index，但这里有些case是word出现了很多次，所以再加循环遍历求最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestDistance</span>(<span class="params">self, wordsDict: <span class="type">List</span>[<span class="built_in">str</span>], word1: <span class="built_in">str</span>, word2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l=wordsDict.index(word1)</span><br><span class="line">        r=wordsDict.index(word2)</span><br><span class="line">        </span><br><span class="line">        l=[index <span class="keyword">for</span> (index,value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(wordsDict) <span class="keyword">if</span> value==word1]</span><br><span class="line">        r=[index <span class="keyword">for</span> (index,value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(wordsDict) <span class="keyword">if</span> value==word2]</span><br><span class="line">        res=<span class="built_in">abs</span>(l[<span class="number">0</span>]-r[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> r:</span><br><span class="line">                res=<span class="built_in">min</span>(res,<span class="built_in">abs</span>(i-j))</span><br><span class="line">        <span class="keyword">return</span> res           </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;243-Shortest-Word-Distance-easy&quot;&gt;&lt;a href=&quot;#243-Shortest-Word-Distance-easy&quot; class=&quot;headerlink&quot; title=&quot;243. Shortest Word Distance(ea</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>232. Implement Queue using Stacks(easy)</title>
    <link href="http://example.com/2022/10/10/232/"/>
    <id>http://example.com/2022/10/10/232/</id>
    <published>2022-10-10T15:39:49.000Z</published>
    <updated>2022-10-10T15:59:46.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="232-Implement-Queue-using-Stacks-easy"><a href="#232-Implement-Queue-using-Stacks-easy" class="headerlink" title="232. Implement Queue using Stacks(easy)"></a>232. Implement Queue using Stacks(easy)</h1><h2 id="Implement-a-first-in-first-out-FIFO-queue-using-only-two-stacks-The-implemented-queue-should-support-all-the-functions-of-a-normal-queue-push-peek-pop-and-empty"><a href="#Implement-a-first-in-first-out-FIFO-queue-using-only-two-stacks-The-implemented-queue-should-support-all-the-functions-of-a-normal-queue-push-peek-pop-and-empty" class="headerlink" title="Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty)."></a>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).</h2><h2 id="Implement-the-MyQueue-class"><a href="#Implement-the-MyQueue-class" class="headerlink" title="Implement the MyQueue class:"></a>Implement the MyQueue class:</h2><p>void push(int x) Pushes element x to the back of the queue.<br>int pop() Removes the element from the front of the queue and returns it.<br>int peek() Returns the element at the front of the queue.<br>boolean empty() Returns true if the queue is empty, false otherwise.<br>Notes:</p><h2 id="You-must-use-only-standard-operations-of-a-stack-which-means-only-push-to-top-peek-pop-from-top-size-and-is-empty-operations-are-valid"><a href="#You-must-use-only-standard-operations-of-a-stack-which-means-only-push-to-top-peek-pop-from-top-size-and-is-empty-operations-are-valid" class="headerlink" title="You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid."></a>You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.</h2><h2 id="Depending-on-your-language-the-stack-may-not-be-supported-natively-You-may-simulate-a-stack-using-a-list-or-deque-double-ended-queue-as-long-as-you-use-only-a-stack’s-standard-operations"><a href="#Depending-on-your-language-the-stack-may-not-be-supported-natively-You-may-simulate-a-stack-using-a-list-or-deque-double-ended-queue-as-long-as-you-use-only-a-stack’s-standard-operations" class="headerlink" title="Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack’s standard operations."></a>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack’s standard operations.</h2><p>这题和225. Implement Stack using Queues(easy)互为镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        in主要负责push，out主要负责pop</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.stack_in = []</span><br><span class="line">        self.stack_out = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        有新元素进来，就往in里面push</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.stack_in.append(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.stack_out:</span><br><span class="line">            <span class="keyword">return</span> self.stack_out.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.stack_in)):</span><br><span class="line">                self.stack_out.append(self.stack_in.pop())</span><br><span class="line">            <span class="keyword">return</span> self.stack_out.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the front element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ans = self.pop()</span><br><span class="line">        self.stack_out.append(ans)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        只要in或者out有元素，说明队列不为空</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> (self.stack_in <span class="keyword">or</span> self.stack_out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyQueue()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;232-Implement-Queue-using-Stacks-easy&quot;&gt;&lt;a href=&quot;#232-Implement-Queue-using-Stacks-easy&quot; class=&quot;headerlink&quot; title=&quot;232. Implement Que</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
    <category term="Queues" scheme="http://example.com/tags/Queues/"/>
    
  </entry>
  
</feed>
