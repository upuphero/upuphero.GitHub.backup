<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-03T20:41:23.975Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-skill7-box_blur</title>
    <link href="http://example.com/2022/09/03/LeetCode-skill7-box-blur/"/>
    <id>http://example.com/2022/09/03/LeetCode-skill7-box-blur/</id>
    <published>2022-09-03T20:40:41.000Z</published>
    <updated>2022-09-03T20:41:23.975Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_matrix</span>(<span class="params">square</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; This function will calculate the value x</span></span><br><span class="line"><span class="string">(i.e. blurred pixel value) for each 3 * 3 blur image.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tot_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate sum of all the pixels in 3 * 3 matrix</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">tot_sum += square[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tot_sum // <span class="number">9</span> <span class="comment"># return the average of the sum of pixels</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boxBlur</span>(<span class="params">image</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This function will calculate the blurred</span></span><br><span class="line"><span class="string">image for given n * n image.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">square = [] <span class="comment"># This will store the 3 * 3 matrix</span></span><br><span class="line"><span class="comment"># which will be used to find its blurred pixel</span></span><br><span class="line"></span><br><span class="line">square_row = [] <span class="comment"># This will store one row of a 3 * 3 matrix and</span></span><br><span class="line"><span class="comment"># will be appended in square</span></span><br><span class="line"></span><br><span class="line">blur_row = [] <span class="comment"># Here we will store the resulting blurred</span></span><br><span class="line"><span class="comment"># pixels possible in one row</span></span><br><span class="line"><span class="comment"># and will append this in the blur_img</span></span><br><span class="line"></span><br><span class="line">blur_img = [] <span class="comment"># This is the resulting blurred image</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># number of rows in the given image</span></span><br><span class="line">n_rows = <span class="built_in">len</span>(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># number of columns in the given image</span></span><br><span class="line">n_col = <span class="built_in">len</span>(image[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># rp is row pointer and cp is column pointer</span></span><br><span class="line">rp, cp = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This while loop will be used to</span></span><br><span class="line"><span class="comment"># calculate all the blurred pixel in the first row</span></span><br><span class="line"><span class="keyword">while</span> rp &lt;= n_rows - <span class="number">3</span>:</span><br><span class="line"><span class="keyword">while</span> cp &lt;= n_col-<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rp, rp + <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cp, cp + <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment"># append all the pixels in a row of 3 * 3 matrix</span></span><br><span class="line">square_row.append(image[i][j])</span><br><span class="line"></span><br><span class="line"><span class="comment"># append the row in the square i.e. 3 * 3 matrix</span></span><br><span class="line">square.append(square_row)</span><br><span class="line">square_row = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate the blurred pixel for given 3 * 3 matrix</span></span><br><span class="line"><span class="comment"># i.e. square and append it in blur_row</span></span><br><span class="line">blur_row.append(square_matrix(square))</span><br><span class="line">square = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># increase the column pointer</span></span><br><span class="line">cp = cp + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append the blur_row in blur_image</span></span><br><span class="line">blur_img.append(blur_row)</span><br><span class="line">blur_row = []</span><br><span class="line">rp = rp + <span class="number">1</span> <span class="comment"># increase row pointer</span></span><br><span class="line">cp = <span class="number">0</span> <span class="comment"># start column pointer from 0 again</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Return the resulting pixel matrix</span></span><br><span class="line"><span class="keyword">return</span> blur_img</span><br><span class="line"></span><br><span class="line"><span class="comment"># Driver code</span></span><br><span class="line">image = [[<span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">6</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(boxBlur(image))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>codesignal-reverseInParentheses</title>
    <link href="http://example.com/2022/09/02/codesignal-reverseInParentheses/"/>
    <id>http://example.com/2022/09/02/codesignal-reverseInParentheses/</id>
    <published>2022-09-02T15:42:48.000Z</published>
    <updated>2022-09-02T19:40:29.927Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">inputString</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Reverse the strings contained in each pair of matching parentheses,</span></span><br><span class="line"><span class="string">    starting from the innermost pair. The results string should not contain</span></span><br><span class="line"><span class="string">    any parentheses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_parentheses(&#x27;a(bc)de&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;acbde&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_parentheses(</span></span><br><span class="line"><span class="string">    ...     &#x27;The ((quick (brown) (fox) jumps over the lazy) dog)&#x27;</span></span><br><span class="line"><span class="string">    ... )</span></span><br><span class="line"><span class="string">    &#x27;The god quick nworb xof jumps over the lazy&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    chars = <span class="built_in">list</span>(inputString)</span><br><span class="line">    open_bracket_indexes = []</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(chars):</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            open_bracket_indexes.append(i)</span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            j = open_bracket_indexes.pop()</span><br><span class="line">            chars[j:i] = chars[i:j:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> open_bracket_indexes:</span><br><span class="line">        <span class="keyword">raise</span> ArgumentError(<span class="string">&#x27;Unclosed parenthesis&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> chars <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;()&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="python function" scheme="http://example.com/tags/python-function/"/>
    
  </entry>
  
  <entry>
    <title>485. Max Consecutive Ones(easy)</title>
    <link href="http://example.com/2022/09/01/485/"/>
    <id>http://example.com/2022/09/01/485/</id>
    <published>2022-09-02T02:43:39.000Z</published>
    <updated>2022-09-02T02:51:09.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="485-Max-Consecutive-Ones-easy"><a href="#485-Max-Consecutive-Ones-easy" class="headerlink" title="485. Max Consecutive Ones(easy)"></a>485. Max Consecutive Ones(easy)</h1><h2 id="Given-a-binary-array-nums-return-the-maximum-number-of-consecutive-1’s-in-the-array"><a href="#Given-a-binary-array-nums-return-the-maximum-number-of-consecutive-1’s-in-the-array" class="headerlink" title="Given a binary array nums, return the maximum number of consecutive 1’s in the array."></a>Given a binary array nums, return the maximum number of consecutive 1’s in the array.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,0,1,1,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.</span><br></pre></td></tr></table></figure><p>这题没什么好说的，比较简单，设置两个独立变量然后遍历就行了</p><pre><code class="python">class Solution:    def findMaxConsecutiveOnes(self, nums: List[int]) -&gt; int:        cnt=0        ans=0        for num in nums:            if num==1:                cnt+=1                ans = max(ans,cnt)            elif num==0:                cnt=0        return ans</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;485-Max-Consecutive-Ones-easy&quot;&gt;&lt;a href=&quot;#485-Max-Consecutive-Ones-easy&quot; class=&quot;headerlink&quot; title=&quot;485. Max Consecutive Ones(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>1909. Remove One Element to Make the Array Strictly Increasing(easy)</title>
    <link href="http://example.com/2022/09/01/1909/"/>
    <id>http://example.com/2022/09/01/1909/</id>
    <published>2022-09-01T17:02:19.000Z</published>
    <updated>2022-09-02T02:50:59.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy"><a href="#1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy" class="headerlink" title="1909. Remove One Element to Make the Array Strictly Increasing(easy)"></a>1909. Remove One Element to Make the Array Strictly Increasing(easy)</h1><h2 id="Given-a-0-indexed-integer-array-nums-return-true-if-it-can-be-made-strictly-increasing-after-removing-exactly-one-element-or-false-otherwise-If-the-array-is-already-strictly-increasing-return-true"><a href="#Given-a-0-indexed-integer-array-nums-return-true-if-it-can-be-made-strictly-increasing-after-removing-exactly-one-element-or-false-otherwise-If-the-array-is-already-strictly-increasing-return-true" class="headerlink" title="Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true."></a>Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.</h2><h2 id="The-array-nums-is-strictly-increasing-if-nums-i-1-lt-nums-i-for-each-index-1-lt-i-lt-nums-length"><a href="#The-array-nums-is-strictly-increasing-if-nums-i-1-lt-nums-i-for-each-index-1-lt-i-lt-nums-length" class="headerlink" title="The array nums is strictly increasing if nums[i - 1] &lt; nums[i] for each index (1 &lt;= i &lt; nums.length)."></a>The array nums is strictly increasing if nums[i - 1] &lt; nums[i] for each index (1 &lt;= i &lt; nums.length).</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,10,5,7]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].</span><br><span class="line">[1,2,5,7] is strictly increasing, so return true.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canBeIncreasing</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="comment"># 检查数组 nums 在删去下标为 idx 的元素后是否严格递增</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">idx: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">                prev, curr = i - <span class="number">1</span>, i</span><br><span class="line">                <span class="keyword">if</span> prev &gt;= idx:</span><br><span class="line">                    prev += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curr &gt;= idx:</span><br><span class="line">                    curr += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nums[curr] &lt;= nums[prev]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="comment"># 寻找非递增相邻下标对</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= nums[i-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> check(i) <span class="keyword">or</span> check(i - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode.cn/problems/remove-one-element-to-make-the-array-strictly-increasing/solution/shan-chu-yi-ge-yuan-su-shi-shu-zu-yan-ge-tnr7/">https://leetcode.cn/problems/remove-one-element-to-make-the-array-strictly-increasing/solution/shan-chu-yi-ge-yuan-su-shi-shu-zu-yan-ge-tnr7/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1909-Remove-One-Element-to-Make-the-Array-Strictly-Increasing-easy&quot;&gt;&lt;a href=&quot;#1909-Remove-One-Element-to-Make-the-Array-Strictly-Inc</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>59. Spiral Matrix II(medium)</title>
    <link href="http://example.com/2022/08/31/59/"/>
    <id>http://example.com/2022/08/31/59/</id>
    <published>2022-08-31T21:58:01.000Z</published>
    <updated>2022-09-01T03:30:12.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="59-Spiral-Matrix-II-medium"><a href="#59-Spiral-Matrix-II-medium" class="headerlink" title="59. Spiral Matrix II(medium)"></a>59. Spiral Matrix II(medium)</h1><h2 id="Given-a-positive-integer-n-generate-an-n-x-n-matrix-filled-with-elements-from-1-to-n2-in-spiral-order"><a href="#Given-a-positive-integer-n-generate-an-n-x-n-matrix-filled-with-elements-from-1-to-n2-in-spiral-order" class="headerlink" title="Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order."></a>Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.</h2><p>这道题和54. Spiral Matrix(medium)几乎一模一样<br><a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/">leetcode官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        matrix = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                matrix[top][col] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                matrix[row][right] = num</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    matrix[bottom][col] = num</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    matrix[row][left] = num</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">            top += <span class="number">1</span></span><br><span class="line">            bottom -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;59-Spiral-Matrix-II-medium&quot;&gt;&lt;a href=&quot;#59-Spiral-Matrix-II-medium&quot; class=&quot;headerlink&quot; title=&quot;59. Spiral Matrix II(medium)&quot;&gt;&lt;/a&gt;59. Sp</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Spiral" scheme="http://example.com/tags/Spiral/"/>
    
    <category term="Traversal" scheme="http://example.com/tags/Traversal/"/>
    
  </entry>
  
  <entry>
    <title>151. Reverse Words in a String(medium)</title>
    <link href="http://example.com/2022/08/31/151/"/>
    <id>http://example.com/2022/08/31/151/</id>
    <published>2022-08-31T21:24:18.000Z</published>
    <updated>2022-08-31T21:31:58.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="151-Reverse-Words-in-a-String-medium"><a href="#151-Reverse-Words-in-a-String-medium" class="headerlink" title="151. Reverse Words in a String(medium)"></a>151. Reverse Words in a String(medium)</h1><h2 id="Given-an-input-string-s-reverse-the-order-of-the-words"><a href="#Given-an-input-string-s-reverse-the-order-of-the-words" class="headerlink" title="Given an input string s, reverse the order of the words."></a>Given an input string s, reverse the order of the words.</h2><h2 id="A-word-is-defined-as-a-sequence-of-non-space-characters-The-words-in-s-will-be-separated-by-at-least-one-space"><a href="#A-word-is-defined-as-a-sequence-of-non-space-characters-The-words-in-s-will-be-separated-by-at-least-one-space" class="headerlink" title="A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space."></a>A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.</h2><h2 id="Return-a-string-of-the-words-in-reverse-order-concatenated-by-a-single-space"><a href="#Return-a-string-of-the-words-in-reverse-order-concatenated-by-a-single-space" class="headerlink" title="Return a string of the words in reverse order concatenated by a single space."></a>Return a string of the words in reverse order concatenated by a single space.</h2><h2 id="Note-that-s-may-contain-leading-or-trailing-spaces-or-multiple-spaces-between-two-words-The-returned-string-should-only-have-a-single-space-separating-the-words-Do-not-include-any-extra-spaces"><a href="#Note-that-s-may-contain-leading-or-trailing-spaces-or-multiple-spaces-between-two-words-The-returned-string-should-only-have-a-single-space-separating-the-words-Do-not-include-any-extra-spaces" class="headerlink" title="Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces."></a>Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;the sky is blue&quot;</span><br><span class="line">Output: &quot;blue is sky the&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/solution/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/">官方题解</a></h3><p>很多语言对字符串提供了 split（拆分），reverse（翻转）和 join（连接）等方法，因此我们可以简单的调用内置的 API 完成操作：</p><p>使用 split 将字符串按空格分割成字符串数组；<br>使用 reverse 将字符串数组进行反转；<br>使用 join 方法将字符串数组拼成一个字符串。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">reversed</span>(s.split()))</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(n)O(n)，其中 nn 为输入字符串的长度。</p><p>空间复杂度：O(n)O(n)，用来存储字符串分割之后的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;151-Reverse-Words-in-a-String-medium&quot;&gt;&lt;a href=&quot;#151-Reverse-Words-in-a-String-medium&quot; class=&quot;headerlink&quot; title=&quot;151. Reverse Words i</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>54. Spiral Matrix(medium)</title>
    <link href="http://example.com/2022/08/31/54/"/>
    <id>http://example.com/2022/08/31/54/</id>
    <published>2022-08-31T20:34:17.000Z</published>
    <updated>2022-08-31T21:36:02.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="54-Spiral-Matrix-medium"><a href="#54-Spiral-Matrix-medium" class="headerlink" title="54. Spiral Matrix(medium)"></a>54. Spiral Matrix(medium)</h1><h2 id="Given-an-m-x-n-matrix-return-all-elements-of-the-matrix-in-spiral-order"><a href="#Given-an-m-x-n-matrix-return-all-elements-of-the-matrix-in-spiral-order" class="headerlink" title="Given an m x n matrix, return all elements of the matrix in spiral order."></a>Given an m x n matrix, return all elements of the matrix in spiral order.</h2><h3 id="leetcode官方题解"><a href="#leetcode官方题解" class="headerlink" title="leetcode官方题解"></a><a href="https://leetcode.cn/problems/spiral-matrix/solution/luo-xuan-ju-zhen-by-leetcode-solution/">leetcode官方题解</a></h3><p>方法二：按层模拟<br>可以将矩阵看成若干层，首先输出最外层的元素，其次输出次外层的元素，直到输出最内层的元素。</p><p>定义矩阵的第 kk 层是到最近边界距离为 kk 的所有顶点。例如，下图矩阵最外层元素都是第 11 层，次外层元素都是第 22 层，剩下的元素都是第 33 层。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[1, 1, 1, 1, 1, 1, 1],</span><br><span class="line"> [1, 2, 2, 2, 2, 2, 1],</span><br><span class="line"> [1, 2, 3, 3, 3, 2, 1],</span><br><span class="line"> [1, 2, 2, 2, 2, 2, 1],</span><br><span class="line"> [1, 1, 1, 1, 1, 1, 1]]</span><br></pre></td></tr></table></figure><p>对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 (top,left)，右下角位于 (bottom,right)，按照如下顺序遍历当前层的元素。</p><p>从左到右遍历上侧元素，依次为 (top,left) 到 (top,right)。</p><p>从上到下遍历右侧元素，依次为 (top+1,right) 到 (bottom,right)。</p><p>如果 left &lt; right 且 top &lt; bottom，则从右到左遍历下侧元素，依次为 (bottom,right−1) 到 (bottom,left+1)，以及从下到上遍历左侧元素，依次为 (bottom,left) 到 (top+1,left)。</p><p>遍历完当前层的元素之后，将 left 和 top 分别增加 1，将 right 和 bottom 分别减少 1，进入下一层继续遍历，直到遍历完所有元素为止。<br><img src="https://assets.leetcode-cn.com/solution-static/54/54_fig1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>()</span><br><span class="line">        </span><br><span class="line">        rows, columns = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        order = <span class="built_in">list</span>()</span><br><span class="line">        left, right, top, bottom = <span class="number">0</span>, columns - <span class="number">1</span>, <span class="number">0</span>, rows - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> top &lt;= bottom:</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[top][column])</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(top + <span class="number">1</span>, bottom + <span class="number">1</span>):</span><br><span class="line">                order.append(matrix[row][right])</span><br><span class="line">            <span class="keyword">if</span> left &lt; right <span class="keyword">and</span> top &lt; bottom:</span><br><span class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(right - <span class="number">1</span>, left, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[bottom][column])</span><br><span class="line">                <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top, -<span class="number">1</span>):</span><br><span class="line">                    order.append(matrix[row][left])</span><br><span class="line">            left, right, top, bottom = left + <span class="number">1</span>, right - <span class="number">1</span>, top + <span class="number">1</span>, bottom - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> order</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;54-Spiral-Matrix-medium&quot;&gt;&lt;a href=&quot;#54-Spiral-Matrix-medium&quot; class=&quot;headerlink&quot; title=&quot;54. Spiral Matrix(medium)&quot;&gt;&lt;/a&gt;54. Spiral Matr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Spiral" scheme="http://example.com/tags/Spiral/"/>
    
    <category term="Traversal" scheme="http://example.com/tags/Traversal/"/>
    
  </entry>
  
  <entry>
    <title>36. Valid Sudoku(medium)</title>
    <link href="http://example.com/2022/08/31/36/"/>
    <id>http://example.com/2022/08/31/36/</id>
    <published>2022-08-31T18:52:00.000Z</published>
    <updated>2022-08-31T21:31:41.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="36-Valid-Sudoku-medium"><a href="#36-Valid-Sudoku-medium" class="headerlink" title="36. Valid Sudoku(medium)"></a>36. Valid Sudoku(medium)</h1><h2 id="Determine-if-a-9-x-9-Sudoku-board-is-valid-Only-the-filled-cells-need-to-be-validated-according-to-the-following-rules"><a href="#Determine-if-a-9-x-9-Sudoku-board-is-valid-Only-the-filled-cells-need-to-be-validated-according-to-the-following-rules" class="headerlink" title="Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:"></a>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</h2><ol><li>Each row must contain the digits 1-9 without repetition.</li><li>Each column must contain the digits 1-9 without repetition.</li><li>Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.<h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3></li></ol><h4 id="A-Sudoku-board-partially-filled-could-be-valid-but-is-not-necessarily-solvable"><a href="#A-Sudoku-board-partially-filled-could-be-valid-but-is-not-necessarily-solvable" class="headerlink" title="A Sudoku board (partially filled) could be valid but is not necessarily solvable."></a>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</h4><h4 id="Only-the-filled-cells-need-to-be-validated-according-to-the-mentioned-rules"><a href="#Only-the-filled-cells-need-to-be-validated-according-to-the-mentioned-rules" class="headerlink" title="Only the filled cells need to be validated according to the mentioned rules."></a>Only the filled cells need to be validated according to the mentioned rules.</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        N = <span class="number">9</span></span><br><span class="line">        <span class="comment"># Use binary number to check previous occurrence</span></span><br><span class="line">        rows = [<span class="number">0</span>] * N</span><br><span class="line">        cols = [<span class="number">0</span>] * N</span><br><span class="line">        boxes = [<span class="number">0</span>] * N</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="comment"># Check if the position is filled with number</span></span><br><span class="line">                <span class="keyword">if</span> board[r][c] == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                pos = <span class="built_in">int</span>(board[r][c]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the row</span></span><br><span class="line">                <span class="keyword">if</span> rows[r] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                rows[r] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the column</span></span><br><span class="line">                <span class="keyword">if</span> cols[c] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                cols[c] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Check the box</span></span><br><span class="line">                idx = (r // <span class="number">3</span>) * <span class="number">3</span> + c // <span class="number">3</span></span><br><span class="line">                <span class="keyword">if</span> boxes[idx] &amp; (<span class="number">1</span> &lt;&lt; pos):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                boxes[idx] |= (<span class="number">1</span> &lt;&lt; pos)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/valid-sudoku/solution/er-xu-cheng-ming-jiu-xu-zui-python3ha-xi-szko/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line"></span><br><span class="line">        row = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        col = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        block = [[<span class="number">0</span>] * <span class="number">9</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    num = <span class="built_in">int</span>(board[i][j]) - <span class="number">1</span></span><br><span class="line">                    b = (i // <span class="number">3</span>) * <span class="number">3</span> + j // <span class="number">3</span></span><br><span class="line">                    <span class="keyword">if</span> row[i][num] <span class="keyword">or</span> col[j][num] <span class="keyword">or</span> block[b][num]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    row[i][num] = col[j][num] = block[b][num] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;36-Valid-Sudoku-medium&quot;&gt;&lt;a href=&quot;#36-Valid-Sudoku-medium&quot; class=&quot;headerlink&quot; title=&quot;36. Valid Sudoku(medium)&quot;&gt;&lt;/a&gt;36. Valid Sudoku(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>48. Rotate Image(medium)</title>
    <link href="http://example.com/2022/08/30/48/"/>
    <id>http://example.com/2022/08/30/48/</id>
    <published>2022-08-30T21:26:38.000Z</published>
    <updated>2022-08-31T00:18:14.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="48-Rotate-Image-medium"><a href="#48-Rotate-Image-medium" class="headerlink" title="48. Rotate Image(medium)"></a>48. Rotate Image(medium)</h1><h2 id="You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise"><a href="#You-are-given-an-n-x-n-2D-matrix-representing-an-image-rotate-the-image-by-90-degrees-clockwise" class="headerlink" title="You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise)."></a>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</h2><h2 id="You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation"><a href="#You-have-to-rotate-the-image-in-place-which-means-you-have-to-modify-the-input-2D-matrix-directly-DO-NOT-allocate-another-2D-matrix-and-do-the-rotation" class="headerlink" title="You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."></a>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p>这题有一个非常巧妙的用翻转代替旋转的方法，<br>作为例子，<br>$$<br> \begin{bmatrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{bmatrix} \tag{1}<br>$$<br>先将其通过水平轴翻转得到：</p><p>$$<br> \begin{bmatrix}<br>   7 &amp; 8 &amp; 9 \<br>   4 &amp; 5 &amp; 6 \<br>   1 &amp; 2 &amp; 3<br>  \end{bmatrix} \tag{2}<br>$$  </p><p>再根据主对角线翻转得到：<br>$$<br> \begin{bmatrix}<br>   7 &amp; 4 &amp; 1 \<br>   8 &amp; 5 &amp; 2 \<br>   9 &amp; 6 &amp; 3<br>  \end{bmatrix} \tag{3}<br>$$  </p><p>这样就可以看出来了，clockwise旋转90°就相当于先水平翻转再根据主对角线翻转</p><p><a href="https://leetcode.cn/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                matrix[i][j],matrix[n-i-<span class="number">1</span>][j]=matrix[n-i-<span class="number">1</span>][j],matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;48-Rotate-Image-medium&quot;&gt;&lt;a href=&quot;#48-Rotate-Image-medium&quot; class=&quot;headerlink&quot; title=&quot;48. Rotate Image(medium)&quot;&gt;&lt;/a&gt;48. Rotate Image(m</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1094. Car Pooling(medium)</title>
    <link href="http://example.com/2022/08/30/1094/"/>
    <id>http://example.com/2022/08/30/1094/</id>
    <published>2022-08-30T21:04:57.000Z</published>
    <updated>2022-08-31T00:18:00.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1094-Car-Pooling-medium"><a href="#1094-Car-Pooling-medium" class="headerlink" title="1094. Car Pooling(medium)"></a>1094. Car Pooling(medium)</h1><h2 id="There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west"><a href="#There-is-a-car-with-capacity-empty-seats-The-vehicle-only-drives-east-i-e-it-cannot-turn-around-and-drive-west" class="headerlink" title="There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west)."></a>There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</h2><h2 id="You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location"><a href="#You-are-given-the-integer-capacity-and-an-array-trips-where-trips-i-numPassengersi-fromi-toi-indicates-that-the-ith-trip-has-numPassengersi-passengers-and-the-locations-to-pick-them-up-and-drop-them-off-are-fromi-and-toi-respectively-The-locations-are-given-as-the-number-of-kilometers-due-east-from-the-car’s-initial-location" class="headerlink" title="You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location."></a>You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car’s initial location.</h2><h2 id="Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise"><a href="#Return-true-if-it-is-possible-to-pick-up-and-drop-off-all-passengers-for-all-the-given-trips-or-false-otherwise" class="headerlink" title="Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise."></a>Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>差分数组经典题</p><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/car-pooling/solution/1094-pin-che-python-chai-fen-shu-zu-by-f-yvh7/">leetcode题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">carPooling</span>(<span class="params">self, trips: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], capacity: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="comment"># 确定最多有几站-&gt;数组长度</span></span><br><span class="line">        stations = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> change_list <span class="keyword">in</span> trips:</span><br><span class="line">            <span class="keyword">if</span> change_list[<span class="number">2</span>]+<span class="number">1</span> &gt; stations:</span><br><span class="line">                stations = change_list[<span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 原数组，不接客时每站人数</span></span><br><span class="line">        ori = [<span class="number">0</span>] * stations </span><br><span class="line">        <span class="comment"># 核心步骤1. 构造差分数组</span></span><br><span class="line">        diff = [<span class="number">0</span>] * stations</span><br><span class="line">        <span class="comment"># 核心步骤2. 差分数组记录修改</span></span><br><span class="line">        <span class="keyword">for</span> cnt, start, end <span class="keyword">in</span> trips:</span><br><span class="line">            diff[start] += cnt</span><br><span class="line">            <span class="comment"># diff下标为区间终点+1，因为修改区间为[start, end-1]，所以diff下表为end</span></span><br><span class="line">            <span class="keyword">if</span> end &lt; stations:</span><br><span class="line">                diff[end] -= cnt</span><br><span class="line">        <span class="comment"># 核心步骤3. 差分数组推出修改后的数组，并判断修改后的数组中是否有超载的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stations):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i:</span><br><span class="line">                res_i_1 = <span class="number">0</span></span><br><span class="line">            res_i = res_i_1 + diff[i]   <span class="comment"># 第i站人数</span></span><br><span class="line">            res_i_1 = res_i</span><br><span class="line">            <span class="keyword">if</span> res_i &gt; capacity:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1094-Car-Pooling-medium&quot;&gt;&lt;a href=&quot;#1094-Car-Pooling-medium&quot; class=&quot;headerlink&quot; title=&quot;1094. Car Pooling(medium)&quot;&gt;&lt;/a&gt;1094. Car Pooli</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>1109. Corporate Flight Bookings(medium)</title>
    <link href="http://example.com/2022/08/30/1109/"/>
    <id>http://example.com/2022/08/30/1109/</id>
    <published>2022-08-30T19:46:08.000Z</published>
    <updated>2022-08-31T00:17:48.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1109-Corporate-Flight-Bookings-medium"><a href="#1109-Corporate-Flight-Bookings-medium" class="headerlink" title="1109. Corporate Flight Bookings(medium)"></a>1109. Corporate Flight Bookings(medium)</h1><h2 id="There-are-n-flights-that-are-labeled-from-1-to-n"><a href="#There-are-n-flights-that-are-labeled-from-1-to-n" class="headerlink" title="There are n flights that are labeled from 1 to n."></a>There are n flights that are labeled from 1 to n.</h2><h2 id="You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range"><a href="#You-are-given-an-array-of-flight-bookings-bookings-where-bookings-i-firsti-lasti-seatsi-represents-a-booking-for-flights-firsti-through-lasti-inclusive-with-seatsi-seats-reserved-for-each-flight-in-the-range" class="headerlink" title="You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range."></a>You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.</h2><h2 id="Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i"><a href="#Return-an-array-answer-of-length-n-where-answer-i-is-the-total-number-of-seats-reserved-for-flight-i" class="headerlink" title="Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i."></a>Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.</h2><p>这道题又是一个标准的差分数组题，与370题几乎一模一样，差别在于length是0-4还是1-5</p><pre><code class="python">class Solution:    def corpFlightBookings(self, bookings: List[List[int]], n: int) -&gt; List[int]:        res = [0]*(n+1)        for booking in bookings:            start,end,v = booking            s=start-1            e=end-1                        res[s]+=v            res[e+1]-=v        for i in range(1,n):            res[i] += res[i-1]        return res[:-1]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1109-Corporate-Flight-Bookings-medium&quot;&gt;&lt;a href=&quot;#1109-Corporate-Flight-Bookings-medium&quot; class=&quot;headerlink&quot; title=&quot;1109. Corporate Fl</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>370. Range Addition(medium)</title>
    <link href="http://example.com/2022/08/30/370/"/>
    <id>http://example.com/2022/08/30/370/</id>
    <published>2022-08-30T19:13:36.000Z</published>
    <updated>2022-08-31T00:17:26.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="370-Range-Addition-medium"><a href="#370-Range-Addition-medium" class="headerlink" title="370. Range Addition(medium)"></a>370. Range Addition(medium)</h1><h2 id="You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci"><a href="#You-are-given-an-integer-length-and-an-array-updates-where-updates-i-startIdxi-endIdxi-inci" class="headerlink" title="You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci]."></a>You are given an integer length and an array updates where updates[i] = [startIdxi, endIdxi, inci].</h2><h2 id="You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci"><a href="#You-have-an-array-arr-of-length-length-with-all-zeros-and-you-have-some-operation-to-apply-on-arr-In-the-ith-operation-you-should-increment-all-the-elements-arr-startIdxi-arr-startIdxi-1-…-arr-endIdxi-by-inci" class="headerlink" title="You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci."></a>You have an array arr of length length with all zeros, and you have some operation to apply on arr. In the ith operation, you should increment all the elements arr[startIdxi], arr[startIdxi + 1], …, arr[endIdxi] by inci.</h2><h2 id="Return-arr-after-applying-all-the-updates"><a href="#Return-arr-after-applying-all-the-updates" class="headerlink" title="Return arr after applying all the updates."></a>Return arr after applying all the updates.</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]</span><br><span class="line">Output: [-2,0,3,5,3]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/range-addition/discuss/84220/O(n%2Bk)-Python-Solution">leetcode题解</a></p><p>差分数组经典题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>]*length</span><br><span class="line">        <span class="keyword">for</span> update <span class="keyword">in</span> updates:</span><br><span class="line">            start, end, inc = update</span><br><span class="line">            res[start]+=inc</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> end+<span class="number">1</span>&lt;=length -<span class="number">1</span>:<span class="comment">#if endIdx + 1 is not out of range. If it is out of range, we don&#x27;t do anything</span></span><br><span class="line">                res[end+<span class="number">1</span>]-=inc</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="built_in">sum</span>+= res[i]</span><br><span class="line">            res[i]=<span class="built_in">sum</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>其实这个方法并不是差分数组，还是前缀和数组，也就是说差分数组和前缀和数组可以相互替换？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getModifiedArray</span>(<span class="params">self, length: <span class="built_in">int</span>, updates: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        res = [<span class="number">0</span>] * (length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> s, e, v <span class="keyword">in</span> updates:</span><br><span class="line">            res[s] += v</span><br><span class="line">            res[e+<span class="number">1</span>] -= v</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):<span class="comment">#加上前面的数字</span></span><br><span class="line">            res[i] += res[i-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[:-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;370-Range-Addition-medium&quot;&gt;&lt;a href=&quot;#370-Range-Addition-medium&quot; class=&quot;headerlink&quot; title=&quot;370. Range Addition(medium)&quot;&gt;&lt;/a&gt;370. Rang</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill6-stack</title>
    <link href="http://example.com/2022/08/30/LeetCode-skill6-stack/"/>
    <id>http://example.com/2022/08/30/LeetCode-skill6-stack/</id>
    <published>2022-08-30T18:46:58.000Z</published>
    <updated>2022-08-31T00:17:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1. 栈的定义"></a>1. 栈的定义</h1><p>栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部完成。<br>压栈：即栈添加成员，在栈的尾部完成<br>弹栈：即栈删除成员，在栈的尾部完成<br>在创建栈时，如果以数组的数据结构为基础时，以数组的尾部为栈的尾部；<br>在创建栈时，如果以链表的数据结构为基础时，以链表的头部为栈的尾部；</p><h1 id="2-栈的功能成员函数"><a href="#2-栈的功能成员函数" class="headerlink" title="2. 栈的功能成员函数"></a>2. 栈的功能成员函数</h1><p>push(): 在栈的尾部添加成员<br>pop(): 在栈的尾部删除成员<br>top(): 返回栈的头部成员<br>is_Empty(): 检测栈是否为空，若为空，则返回True， 否则返回False<br>length(): 返回栈的成员数量<br>travel(): 遍历栈的所有成员</p><h2 id="常见栈的函数操作包括"><a href="#常见栈的函数操作包括" class="headerlink" title="常见栈的函数操作包括"></a>常见栈的函数操作包括</h2><p>empty() – 返回栈是否为空 – Time Complexity : O(1)</p><p>size() – 返回栈的长度 – Time Complexity : O(1)</p><p>top() – 查看栈顶元素 – Time Complexity : O(1)</p><p>push(g) – 向栈顶添加元素 – Time Complexity : O(1)</p><p>pop() – 删除栈顶元素 – Time Complexity : O(1)</p><p>python中栈可以用以下三种方法实现：</p><p>１)list</p><p>２)collections.deque</p><p>３)queue.LifoQueue</p><p>使用列表实现栈</p><p>python的内置数据结构list可以用来实现栈，用append()向栈顶添加元素, pop() 可以以后进先出的顺序删除元素</p><p>但是列表本身有一些缺点，主要问题就是当列表不断扩大的时候会遇到速度瓶颈．列表是动态数组，因此往其中添加新元素而没有空间保存新的元素时，它会自动重新分配内存块，并将原来的内存中的值复制到新的内存块中．这就导致了一些append()操作会消耗更多的时间</p><p>使用collections.deque实现栈</p><p>python中栈也可以用deque类实现，当我们想要在实现在容器两端更快速地进行append和pop操作时，deque比列表更合适．deque可以提供O(1)时间的append和pop操作，而列表则需要O(n)时间.</p><p>使用queue module实现栈</p><p>Queue模块有LIFO queue，也就是栈结构．用put()和get()操作从Queue中添加和获得数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-栈的定义&quot;&gt;&lt;a href=&quot;#1-栈的定义&quot; class=&quot;headerlink&quot; title=&quot;1. 栈的定义&quot;&gt;&lt;/a&gt;1. 栈的定义&lt;/h1&gt;&lt;p&gt;栈是一种先进后出（FILO: First In Last Out,）的线性结构，即压栈和弹栈均在栈的尾部</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="prefix sum" scheme="http://example.com/tags/prefix-sum/"/>
    
  </entry>
  
  <entry>
    <title>20. Valid Parentheses(easy)</title>
    <link href="http://example.com/2022/08/30/20/"/>
    <id>http://example.com/2022/08/30/20/</id>
    <published>2022-08-30T17:32:42.000Z</published>
    <updated>2022-08-31T00:16:49.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-Valid-Parentheses-easy"><a href="#20-Valid-Parentheses-easy" class="headerlink" title="20. Valid Parentheses(easy)"></a>20. Valid Parentheses(easy)</h1><h2 id="Given-a-string-s-containing-just-the-characters-‘-‘-‘-’-‘-‘-‘-’-‘-‘-and-‘-’-determine-if-the-input-string-is-valid"><a href="#Given-a-string-s-containing-just-the-characters-‘-‘-‘-’-‘-‘-‘-’-‘-‘-and-‘-’-determine-if-the-input-string-is-valid" class="headerlink" title="Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid."></a>Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</h2><h2 id="An-input-string-is-valid-if"><a href="#An-input-string-is-valid-if" class="headerlink" title="An input string is valid if:"></a>An input string is valid if:</h2><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Every close bracket has a corresponding open bracket of the same type.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode-solution/">官方题解</a></h3><p>判断括号的有效性可以使用「栈」这一数据结构来解决。</p><p>我们遍历给定的字符串 s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。</p><p>当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串 s 无效，返回 False。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。</p><p>在遍历结束后，如果栈中没有左括号，说明我们将字符串 s 中的所有左括号闭合，返回 True，否则返回 False。</p><p>注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 False，省去后续的遍历判断过程。</p><p><a href="https://leetcode.cn/problems/valid-parentheses/solution/valid-parentheses-fu-zhu-zhan-fa-by-jin407891080/">题解1</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,  <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;?&#x27;</span>&#125;</span><br><span class="line">        stack = [<span class="string">&#x27;?&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic: stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c: <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode-solution/">题解2</a>        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        pairs = &#123;</span><br><span class="line">            <span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>,</span><br><span class="line">            <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        stack = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">in</span> pairs:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">or</span> stack[-<span class="number">1</span>] != pairs[ch]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(ch)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20-Valid-Parentheses-easy&quot;&gt;&lt;a href=&quot;#20-Valid-Parentheses-easy&quot; class=&quot;headerlink&quot; title=&quot;20. Valid Parentheses(easy)&quot;&gt;&lt;/a&gt;20. Valid</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-skill5-difference-array</title>
    <link href="http://example.com/2022/08/29/LeetCode-skill5-difference-array/"/>
    <id>http://example.com/2022/08/29/LeetCode-skill5-difference-array/</id>
    <published>2022-08-29T21:39:00.000Z</published>
    <updated>2022-08-31T00:16:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。</p><p>比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nums[0..4] 全部加 2，再给…</p><p>一通操作猛如虎，然后问你，最后 nums 数组的值是什么？</p><p>常规的思路很容易，你让我给区间 nums[i..j] 加上 val，那我就一个 for 循环给它们都加上呗，还能咋样？这种思路的时间复杂度是 O(N)，由于这个场景下对 nums 的修改非常频繁，所以效率会很低下。</p><p>这里就需要差分数组的技巧，类似前缀和技巧构造的 prefix 数组，我们先对 nums 数组构造一个 diff 差分数组，diff[i] 就是 nums[i] 和 nums[i-1] 之差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"><span class="comment">// 构造差分数组</span></span><br><span class="line">diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这个 diff 差分数组是可以反推出原始数组 nums 的，代码逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line"><span class="comment">// 根据差分数组构造结果数组</span></span><br><span class="line">res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">    res[i] = res[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理很简单，回想 diff 数组反推 nums 数组的过程，diff[i] += 3 意味着给 nums[i..] 所有的元素都加了 3，然后 diff[j+1] -= 3 又意味着对于 nums[j+1..] 所有元素再减 3，那综合起来，是不是就是对 nums[i..j] 中的所有元素都加 3 了？</p><p>只要花费 O(1) 的时间修改 diff 数组，就相当于给 nums 的整个区间做了修改。多次修改 diff，然后通过 diff 数组反推，即可得到 nums 修改后的结果。</p><p>现在我们把差分数组抽象成一个类，包含 increment 方法和 result 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Difference</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.diff = self.make_diff(self.nums)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_diff</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        diff = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            diff[i] = nums[i] - nums[i-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给闭区间[i,j]增加val</span></span><br><span class="line">    <span class="comment"># 原理很简单，回想diff数组反推nums数组的过程，diff[i] += 3意味着给nums[i..]所有的元素都加了 3，然后diff[j+1] -= 3又意味着对于nums[j+1..]所有元素再减 3，那综合起来，是不是就是对nums[i..j]中的所有元素都加 3 了？</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">self, i, j, val</span>):</span></span><br><span class="line">        self.diff[i] += val</span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt; <span class="built_in">len</span>(self.diff):</span><br><span class="line">            self.diff[j + <span class="number">1</span>] -= val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recover</span>(<span class="params">self</span>):</span></span><br><span class="line">        rdiff = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.diff))]</span><br><span class="line">        rdiff[<span class="number">0</span>] = self.diff[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(self.nums)):</span><br><span class="line">            rdiff[i] = rdiff[i-<span class="number">1</span>] + self.diff[i]</span><br><span class="line">        <span class="keyword">return</span> rdiff</span><br></pre></td></tr></table></figure><p>difference = Difference([8,5,9,6,1])<br>print(difference.diff)<br>rdiff = difference.recover()<br>print(rdiff)<br>difference.increment(2,3,1)<br>print(difference.diff)<br>rdiff = difference.recover()<br>print(rdiff)</p><hr><p>【python刷题】差分数组<br><a href="https://blog.51cto.com/u_15127632/3275175">https://blog.51cto.com/u_15127632/3275175</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文讲一个和前缀和思想非常类似的算法技巧「差分数组」，差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减。&lt;/p&gt;
&lt;p&gt;比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nu</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
    <category term="difference array" scheme="http://example.com/tags/difference-array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode15-DFS</title>
    <link href="http://example.com/2022/08/29/LeetCode15-DFS/"/>
    <id>http://example.com/2022/08/29/LeetCode15-DFS/</id>
    <published>2022-08-29T21:06:58.000Z</published>
    <updated>2022-08-29T21:07:30.761Z</updated>
    
    <content type="html"><![CDATA[<p>我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。</p><p>本文将以岛屿问题为例，展示网格类问题 DFS 通用思路，以及如何让代码变得简洁。</p><p>在 LeetCode 中，「岛屿问题」是一个系列系列问题，比如：</p><p>L200. 岛屿数量 （Easy）<br>463. 岛屿的周长 （Easy）<br>695. 岛屿的最大面积 （Medium）<br>827. 最大人工岛 （Hard）</p><p>作者：nettee<br>链接：<a href="https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们所熟悉的 DFS（深度优先搜索）问题通常是在树或者图结构上进行的。而我们今天要讨论的 DFS 问题，是在一种「网格」结构中进行的。岛屿问题是这类网格 DFS 问题的典型代表。网格结构遍历起来要比二叉树复杂一些，如果没有掌握一定的方法，DFS 代码容易写得冗长繁杂。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode14-BFS</title>
    <link href="http://example.com/2022/08/29/LeetCode14-BFS/"/>
    <id>http://example.com/2022/08/29/LeetCode14-BFS/</id>
    <published>2022-08-29T21:06:51.000Z</published>
    <updated>2022-08-29T21:07:24.717Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>5. Longest Palindromic Substring(medium)</title>
    <link href="http://example.com/2022/08/29/5/"/>
    <id>http://example.com/2022/08/29/5/</id>
    <published>2022-08-29T20:40:18.000Z</published>
    <updated>2022-08-29T21:03:22.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Longest-Palindromic-Substring-medium"><a href="#5-Longest-Palindromic-Substring-medium" class="headerlink" title="5. Longest Palindromic Substring(medium)"></a>5. Longest Palindromic Substring(medium)</h1><h2 id="Given-a-string-s-return-the-longest-palindromic-substring-in-s"><a href="#Given-a-string-s-return-the-longest-palindromic-substring-in-s" class="headerlink" title="Given a string s, return the longest palindromic substring in s."></a>Given a string s, return the longest palindromic substring in s.</h2><p>substring和subsequence：<br>substring是子串。例如，‘wee’ 是 ‘helloween’的substring，‘hwn’ 不是 ‘helloween’的substring。取子串的时候不能隔着字符取。<br>subsequence是子序列。例如，‘wee’ 和 ‘hwn’ 都是 ‘helloween’的subsequence。取子序列的时候可以隔着字符取。<br>palindromic substring 是回文子串，例如‘soebeos’ 是 ‘absoebeostge’ 的回文子串。回文的意思是正过来念和反过来念都一样的字符串，比如“上海自来水来自海上”。</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandAroundCenter</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            left1, right1 = self.expandAroundCenter(s, i, i)</span><br><span class="line">            left2, right2 = self.expandAroundCenter(s, i, i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> right1 - left1 &gt; end - start:</span><br><span class="line">                start, end = left1, right1</span><br><span class="line">            <span class="keyword">if</span> right2 - left2 &gt; end - start:</span><br><span class="line">                start, end = left2, right2</span><br><span class="line">        <span class="keyword">return</span> s[start: end + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;5-Longest-Palindromic-Substring-medium&quot;&gt;&lt;a href=&quot;#5-Longest-Palindromic-Substring-medium&quot; class=&quot;headerlink&quot; title=&quot;5. Longest Palin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>344. Reverse String(easy)</title>
    <link href="http://example.com/2022/08/29/344/"/>
    <id>http://example.com/2022/08/29/344/</id>
    <published>2022-08-29T20:22:40.000Z</published>
    <updated>2022-08-29T20:43:03.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="344-Reverse-String-easy"><a href="#344-Reverse-String-easy" class="headerlink" title="344. Reverse String(easy)"></a>344. Reverse String(easy)</h1><h2 id="Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s"><a href="#Write-a-function-that-reverses-a-string-The-input-string-is-given-as-an-array-of-characters-s" class="headerlink" title="Write a function that reverses a string. The input string is given as an array of characters s."></a>Write a function that reverses a string. The input string is given as an array of characters s.</h2><h2 id="You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory"><a href="#You-must-do-this-by-modifying-the-input-array-in-place-with-O-1-extra-memory" class="headerlink" title="You must do this by modifying the input array in-place with O(1) extra memory."></a>You must do this by modifying the input array in-place with O(1) extra memory.</h2><p>反转字符串，其实还是反转数组，双指针一左一右来回替换就行了，要注意的是在本体上变换</p><pre><code class="python">class Solution:    def reverseString(self, s: List[str]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify s in-place instead.        &quot;&quot;&quot;        left = 0        right = len(s)-1        while left&lt;right:            tmp =s[left]            s[left]=s[right]            s[right]=tmp            left+=1            right-=1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;344-Reverse-String-easy&quot;&gt;&lt;a href=&quot;#344-Reverse-String-easy&quot; class=&quot;headerlink&quot; title=&quot;344. Reverse String(easy)&quot;&gt;&lt;/a&gt;344. Reverse St</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>704. Binary Search(easy)</title>
    <link href="http://example.com/2022/08/29/704/"/>
    <id>http://example.com/2022/08/29/704/</id>
    <published>2022-08-29T19:22:20.000Z</published>
    <updated>2022-08-29T20:42:41.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="704-Binary-Search-easy"><a href="#704-Binary-Search-easy" class="headerlink" title="704. Binary Search(easy)"></a>704. Binary Search(easy)</h1><h2 id="Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1"><a href="#Given-an-array-of-integers-nums-which-is-sorted-in-ascending-order-and-an-integer-target-write-a-function-to-search-target-in-nums-If-target-exists-then-return-its-index-Otherwise-return-1" class="headerlink" title="Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1."></a>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</h2><h2 id="You-must-write-an-algorithm-with-O-log-n-runtime-complexity"><a href="#You-must-write-an-algorithm-with-O-log-n-runtime-complexity" class="headerlink" title="You must write an algorithm with O(log n) runtime complexity."></a>You must write an algorithm with O(log n) runtime complexity.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p>二分查找模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left =<span class="number">0</span></span><br><span class="line">        right=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right):</span><br><span class="line">            mid =left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left=mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;704-Binary-Search-easy&quot;&gt;&lt;a href=&quot;#704-Binary-Search-easy&quot; class=&quot;headerlink&quot; title=&quot;704. Binary Search(easy)&quot;&gt;&lt;/a&gt;704. Binary Search</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
</feed>
