<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  <subtitle>Engineering House</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-07T02:28:58.640Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>461. Hamming Distance(easy)</title>
    <link href="http://example.com/2022/11/06/461/"/>
    <id>http://example.com/2022/11/06/461/</id>
    <published>2022-11-07T02:25:00.000Z</published>
    <updated>2022-11-07T02:28:58.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="461-Hamming-Distance-easy"><a href="#461-Hamming-Distance-easy" class="headerlink" title="461. Hamming Distance(easy)"></a>461. Hamming Distance(easy)</h1><h2 id="The-Hamming-distance-between-two-integers-is-the-number-of-positions-at-which-the-corresponding-bits-are-different"><a href="#The-Hamming-distance-between-two-integers-is-the-number-of-positions-at-which-the-corresponding-bits-are-different" class="headerlink" title="The Hamming distance between two integers is the number of positions at which the corresponding bits are different."></a>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</h2><h2 id="Given-two-integers-x-and-y-return-the-Hamming-distance-between-them"><a href="#Given-two-integers-x-and-y-return-the-Hamming-distance-between-them" class="headerlink" title="Given two integers x and y, return the Hamming distance between them."></a>Given two integers x and y, return the Hamming distance between them.</h2><p>这个用运位算的方法很巧妙<br>设x=1(0001),y=4(0100)<br>xor就是5(0101)<br>xor%2是1<br>xor&gt;&gt;=1 向右移了一位，此时是xor=(0010)<br>xor%2=0<br>xor&gt;&gt;=1 向右移一位，此时是xor=(0001)<br>xor%2=1<br>xor&gt;&gt;=1 向右移一位，此时是xor=(0000)<br>这时返回就是2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span>(<span class="params">self, x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        xor=x^y</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> xor!=<span class="number">0</span>:</span><br><span class="line">            res+=xor%<span class="number">2</span></span><br><span class="line">            xor&gt;&gt;=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;461-Hamming-Distance-easy&quot;&gt;&lt;a href=&quot;#461-Hamming-Distance-easy&quot; class=&quot;headerlink&quot; title=&quot;461. Hamming Distance(easy)&quot;&gt;&lt;/a&gt;461. Hamm</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>405. Convert a Number to Hexadecimal(easy)</title>
    <link href="http://example.com/2022/11/06/405/"/>
    <id>http://example.com/2022/11/06/405/</id>
    <published>2022-11-07T02:02:13.000Z</published>
    <updated>2022-11-07T02:16:57.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="405-Convert-a-Number-to-Hexadecimal-easy"><a href="#405-Convert-a-Number-to-Hexadecimal-easy" class="headerlink" title="405. Convert a Number to Hexadecimal(easy)"></a>405. Convert a Number to Hexadecimal(easy)</h1><h2 id="Given-an-integer-num-return-a-string-representing-its-hexadecimal-representation-For-negative-integers-two’s-complement-method-is-used"><a href="#Given-an-integer-num-return-a-string-representing-its-hexadecimal-representation-For-negative-integers-two’s-complement-method-is-used" class="headerlink" title="Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used."></a>Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.</h2><h2 id="All-the-letters-in-the-answer-string-should-be-lowercase-characters-and-there-should-not-be-any-leading-zeros-in-the-answer-except-for-the-zero-itself"><a href="#All-the-letters-in-the-answer-string-should-be-lowercase-characters-and-there-should-not-be-any-leading-zeros-in-the-answer-except-for-the-zero-itself" class="headerlink" title="All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself."></a>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</h2><h2 id="Note-You-are-not-allowed-to-use-any-built-in-library-method-to-directly-solve-this-problem"><a href="#Note-You-are-not-allowed-to-use-any-built-in-library-method-to-directly-solve-this-problem" class="headerlink" title="Note: You are not allowed to use any built-in library method to directly solve this problem."></a>Note: You are not allowed to use any built-in library method to directly solve this problem.</h2><p>分大于0小于0两种情况，大于0则对16求余，再除。小于0则基于0xffffffff进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toHex</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> num==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="keyword">if</span> num&lt;<span class="number">0</span>:</span><br><span class="line">            num=<span class="number">0xffffffff</span>+<span class="number">1</span>+num        </span><br><span class="line">        hex_digits=<span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">        ans=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            ans+=hex_digits[num%<span class="number">16</span>]</span><br><span class="line">            num//=<span class="number">16</span></span><br><span class="line">        <span class="keyword">return</span> ans[::-<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;405-Convert-a-Number-to-Hexadecimal-easy&quot;&gt;&lt;a href=&quot;#405-Convert-a-Number-to-Hexadecimal-easy&quot; class=&quot;headerlink&quot; title=&quot;405. Convert</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>394. Decode String(medium)</title>
    <link href="http://example.com/2022/11/06/394/"/>
    <id>http://example.com/2022/11/06/394/</id>
    <published>2022-11-06T22:34:23.000Z</published>
    <updated>2022-11-07T02:07:15.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="394-Decode-String-medium"><a href="#394-Decode-String-medium" class="headerlink" title="394. Decode String(medium)"></a>394. Decode String(medium)</h1><h2 id="Given-an-encoded-string-return-its-decoded-string"><a href="#Given-an-encoded-string-return-its-decoded-string" class="headerlink" title="Given an encoded string, return its decoded string."></a>Given an encoded string, return its decoded string.</h2><h2 id="The-encoding-rule-is-k-encoded-string-where-the-encoded-string-inside-the-square-brackets-is-being-repeated-exactly-k-times-Note-that-k-is-guaranteed-to-be-a-positive-integer"><a href="#The-encoding-rule-is-k-encoded-string-where-the-encoded-string-inside-the-square-brackets-is-being-repeated-exactly-k-times-Note-that-k-is-guaranteed-to-be-a-positive-integer" class="headerlink" title="The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer."></a>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</h2><h2 id="You-may-assume-that-the-input-string-is-always-valid-there-are-no-extra-white-spaces-square-brackets-are-well-formed-etc-Furthermore-you-may-assume-that-the-original-data-does-not-contain-any-digits-and-that-digits-are-only-for-those-repeat-numbers-k-For-example-there-will-not-be-input-like-3a-or-2-4"><a href="#You-may-assume-that-the-input-string-is-always-valid-there-are-no-extra-white-spaces-square-brackets-are-well-formed-etc-Furthermore-you-may-assume-that-the-original-data-does-not-contain-any-digits-and-that-digits-are-only-for-those-repeat-numbers-k-For-example-there-will-not-be-input-like-3a-or-2-4" class="headerlink" title="You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4]."></a>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].</h2><h2 id="The-test-cases-are-generated-so-that-the-length-of-the-output-will-never-exceed-10-5"><a href="#The-test-cases-are-generated-so-that-the-length-of-the-output-will-never-exceed-10-5" class="headerlink" title="The test cases are generated so that the length of the output will never exceed 10^5."></a>The test cases are generated so that the length of the output will never exceed 10^5.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decodeString</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c != <span class="string">&quot;]&quot;</span>:</span><br><span class="line">                stack.append(c)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> stack[-<span class="number">1</span>] != <span class="string">&quot;[&quot;</span>:</span><br><span class="line">                    tmp = stack.pop(-<span class="number">1</span>) + tmp</span><br><span class="line">                stack.pop(-<span class="number">1</span>)</span><br><span class="line">                times = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>].isdigit():</span><br><span class="line">                    times = stack.pop(-<span class="number">1</span>) + times</span><br><span class="line">                times = <span class="built_in">int</span>(times)</span><br><span class="line">                </span><br><span class="line">                tmp = <span class="string">&quot;&quot;</span>.join(tmp <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times))</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> tmp:</span><br><span class="line">                    stack.append(t)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(stack)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Deque&lt;Integer&gt; numStack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        Deque&lt;String&gt; strStack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> n = chs.length;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chs[i] - <span class="string">&#x27;0&#x27;</span> &gt;= <span class="number">0</span> &amp;&amp; chs[i] - <span class="string">&#x27;0&#x27;</span> &lt;= <span class="number">9</span>) &#123; <span class="comment">// 遇到数字</span></span><br><span class="line">                <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(chs[i] - <span class="string">&#x27;0&#x27;</span> &gt;= <span class="number">0</span> &amp;&amp; chs[i] - <span class="string">&#x27;0&#x27;</span> &lt;= <span class="number">9</span>)&#123; <span class="comment">// 截取数字</span></span><br><span class="line">                    num = num * <span class="number">10</span> + chs[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                numStack.push(num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(chs[i] == <span class="string">&#x27;[&#x27;</span>) strStack.push(String.valueOf(chs[i])); <span class="comment">// 遇到 &#x27;[&#x27; 推入字符串栈</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(chs[i] == <span class="string">&#x27;]&#x27;</span>)&#123; <span class="comment">// 遇到 &#x27;]&#x27; </span></span><br><span class="line">                StringBuilder curSb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">while</span>(!strStack.peek().equals(String.valueOf(<span class="string">&#x27;[&#x27;</span>)))&#123; <span class="comment">// 拼接 &#x27;[&#x27; 之前的字符串</span></span><br><span class="line">                    curSb.insert(<span class="number">0</span>, strStack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                strStack.pop(); <span class="comment">// 推出 &#x27;[&#x27;</span></span><br><span class="line">                <span class="keyword">int</span> k = numStack.pop(); <span class="comment">// 推出数字</span></span><br><span class="line">                String repeatedStr = repeate(curSb.toString(), k); <span class="comment">// 重复 k 次</span></span><br><span class="line">                strStack.push(repeatedStr); <span class="comment">// 然后推入字符串栈</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> strStack.push(String.valueOf(chs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!strStack.isEmpty())&#123;</span><br><span class="line">            res.insert(<span class="number">0</span>, strStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">repeate</span><span class="params">(String s, <span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// 倍增拼接 (快速幂思想)</span></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k % <span class="number">2</span> == <span class="number">1</span>) res = res.append(sb);</span><br><span class="line">            sb = sb.append(sb);</span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;394-Decode-String-medium&quot;&gt;&lt;a href=&quot;#394-Decode-String-medium&quot; class=&quot;headerlink&quot; title=&quot;394. Decode String(medium)&quot;&gt;&lt;/a&gt;394. Decode </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="stack" scheme="http://example.com/tags/stack/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>434. Number of Segments in a String(easy)</title>
    <link href="http://example.com/2022/11/05/434/"/>
    <id>http://example.com/2022/11/05/434/</id>
    <published>2022-11-05T20:48:00.000Z</published>
    <updated>2022-11-07T02:06:52.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-a-string-s-return-the-number-of-segments-in-the-string"><a href="#Given-a-string-s-return-the-number-of-segments-in-the-string" class="headerlink" title="Given a string s, return the number of segments in the string."></a>Given a string s, return the number of segments in the string.</h2><h2 id="A-segment-is-defined-to-be-a-contiguous-sequence-of-non-space-characters"><a href="#A-segment-is-defined-to-be-a-contiguous-sequence-of-non-space-characters" class="headerlink" title="A segment is defined to be a contiguous sequence of non-space characters."></a>A segment is defined to be a contiguous sequence of non-space characters.</h2><p>直接用split分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSegments</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(s.split())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-a-string-s-return-the-number-of-segments-in-the-string&quot;&gt;&lt;a href=&quot;#Given-a-string-s-return-the-number-of-segments-in-the-string</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>441. Arranging Coins(easy)</title>
    <link href="http://example.com/2022/11/05/441/"/>
    <id>http://example.com/2022/11/05/441/</id>
    <published>2022-11-05T20:44:38.000Z</published>
    <updated>2022-11-07T02:06:00.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="441-Arranging-Coins-easy"><a href="#441-Arranging-Coins-easy" class="headerlink" title="441. Arranging Coins(easy)"></a>441. Arranging Coins(easy)</h1><h2 id="You-have-n-coins-and-you-want-to-build-a-staircase-with-these-coins-The-staircase-consists-of-k-rows-where-the-ith-row-has-exactly-i-coins-The-last-row-of-the-staircase-may-be-incomplete"><a href="#You-have-n-coins-and-you-want-to-build-a-staircase-with-these-coins-The-staircase-consists-of-k-rows-where-the-ith-row-has-exactly-i-coins-The-last-row-of-the-staircase-may-be-incomplete" class="headerlink" title="You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete."></a>You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.</h2><h2 id="Given-the-integer-n-return-the-number-of-complete-rows-of-the-staircase-you-will-build"><a href="#Given-the-integer-n-return-the-number-of-complete-rows-of-the-staircase-you-will-build" class="headerlink" title="Given the integer n, return the number of complete rows of the staircase you will build."></a>Given the integer n, return the number of complete rows of the staircase you will build.</h2><p>这道题就是个等差数列，从1加到i层，然后和n比较大小，所以数学方法解出即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrangeCoins</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">int</span>(sqrt(<span class="number">2</span> * n + <span class="number">0.25</span>) - <span class="number">0.50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;441-Arranging-Coins-easy&quot;&gt;&lt;a href=&quot;#441-Arranging-Coins-easy&quot; class=&quot;headerlink&quot; title=&quot;441. Arranging Coins(easy)&quot;&gt;&lt;/a&gt;441. Arrangi</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>448. Find All Numbers Disappeared in an Array(easy)</title>
    <link href="http://example.com/2022/11/05/448/"/>
    <id>http://example.com/2022/11/05/448/</id>
    <published>2022-11-05T20:31:25.000Z</published>
    <updated>2022-11-05T20:33:48.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="448-Find-All-Numbers-Disappeared-in-an-Array-easy"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-easy" class="headerlink" title="448. Find All Numbers Disappeared in an Array(easy)"></a>448. Find All Numbers Disappeared in an Array(easy)</h1><h2 id="Given-an-array-nums-of-n-integers-where-nums-i-is-in-the-range-1-n-return-an-array-of-all-the-integers-in-the-range-1-n-that-do-not-appear-in-nums"><a href="#Given-an-array-nums-of-n-integers-where-nums-i-is-in-the-range-1-n-return-an-array-of-all-the-integers-in-the-range-1-n-that-do-not-appear-in-nums" class="headerlink" title="Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums."></a>Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.</h2><p>这题是找到缺失的数字<br>暴力解法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line">        res=[]</span><br><span class="line">        nums=<span class="built_in">sorted</span>(<span class="built_in">set</span>(nums))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;n:</span><br><span class="line">            nums.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt;<span class="built_in">len</span>(nums):</span><br><span class="line">                res.append(i)</span><br><span class="line">                nums.append(i)</span><br><span class="line">            <span class="keyword">if</span> i!= nums[i-<span class="number">1</span>]:</span><br><span class="line">                res.append(i)</span><br><span class="line">                nums.insert(i-<span class="number">1</span>,i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python enumerate解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="built_in">abs</span>(x)-<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                nums[<span class="built_in">abs</span>(x)-<span class="number">1</span>]*=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> x&gt; <span class="number">0</span>:</span><br><span class="line">                res.append(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;448-Find-All-Numbers-Disappeared-in-an-Array-easy&quot;&gt;&lt;a href=&quot;#448-Find-All-Numbers-Disappeared-in-an-Array-easy&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>415. Add Strings(easy)</title>
    <link href="http://example.com/2022/11/05/415/"/>
    <id>http://example.com/2022/11/05/415/</id>
    <published>2022-11-05T19:58:23.000Z</published>
    <updated>2022-11-05T20:00:04.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-two-non-negative-integers-num1-and-num2-represented-as-string-return-the-sum-of-num1-and-num2-as-a-string"><a href="#Given-two-non-negative-integers-num1-and-num2-represented-as-string-return-the-sum-of-num1-and-num2-as-a-string" class="headerlink" title="Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string."></a>Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.</h2><h2 id="You-must-solve-the-problem-without-using-any-built-in-library-for-handling-large-integers-such-as-BigInteger-You-must-also-not-convert-the-inputs-to-integers-directly"><a href="#You-must-solve-the-problem-without-using-any-built-in-library-for-handling-large-integers-such-as-BigInteger-You-must-also-not-convert-the-inputs-to-integers-directly" class="headerlink" title="You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly."></a>You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.</h2><p>将字符串转换成数字相加后再转回字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStrings</span>(<span class="params">self, num1: <span class="built_in">str</span>, num2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(num1)+<span class="built_in">int</span>(num2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-two-non-negative-integers-num1-and-num2-represented-as-string-return-the-sum-of-num1-and-num2-as-a-string&quot;&gt;&lt;a href=&quot;#Given-two</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>414. Third Maximum Number(easy)</title>
    <link href="http://example.com/2022/11/05/414/"/>
    <id>http://example.com/2022/11/05/414/</id>
    <published>2022-11-05T19:56:26.000Z</published>
    <updated>2022-11-05T20:00:15.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="414-Third-Maximum-Number-easy"><a href="#414-Third-Maximum-Number-easy" class="headerlink" title="414. Third Maximum Number(easy)"></a>414. Third Maximum Number(easy)</h1><h2 id="Given-an-integer-array-nums-return-the-third-distinct-maximum-number-in-this-array-If-the-third-maximum-does-not-exist-return-the-maximum-number"><a href="#Given-an-integer-array-nums-return-the-third-distinct-maximum-number-in-this-array-If-the-third-maximum-does-not-exist-return-the-maximum-number" class="headerlink" title="Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number."></a>Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.</h2><p>这里就是对数组排序，然后取第三大的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thirdMax</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        </span><br><span class="line">        nums=<span class="built_in">sorted</span>(<span class="built_in">set</span>(nums),reverse= <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&gt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;414-Third-Maximum-Number-easy&quot;&gt;&lt;a href=&quot;#414-Third-Maximum-Number-easy&quot; class=&quot;headerlink&quot; title=&quot;414. Third Maximum Number(easy)&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>409. Longest Palindrome(easy)</title>
    <link href="http://example.com/2022/11/05/409/"/>
    <id>http://example.com/2022/11/05/409/</id>
    <published>2022-11-05T19:32:25.000Z</published>
    <updated>2022-11-05T19:56:18.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="409-Longest-Palindrome-easy"><a href="#409-Longest-Palindrome-easy" class="headerlink" title="409. Longest Palindrome(easy)"></a>409. Longest Palindrome(easy)</h1><h2 id="Given-a-string-s-which-consists-of-lowercase-or-uppercase-letters-return-the-length-of-the-longest-palindrome-that-can-be-built-with-those-letters"><a href="#Given-a-string-s-which-consists-of-lowercase-or-uppercase-letters-return-the-length-of-the-longest-palindrome-that-can-be-built-with-those-letters" class="headerlink" title="Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters."></a>Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.</h2><h2 id="Letters-are-case-sensitive-for-example-“Aa”-is-not-considered-a-palindrome-here"><a href="#Letters-are-case-sensitive-for-example-“Aa”-is-not-considered-a-palindrome-here" class="headerlink" title="Letters are case sensitive, for example, “Aa” is not considered a palindrome here."></a>Letters are case sensitive, for example, “Aa” is not considered a palindrome here.</h2><p>这道题就是利用hashmap计数，然后偶数直接加到结果，奇数分情况讨论，只有一个的情况那就放到最后加在结果里，如果大于1的奇数，就在结果加上数量减1 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        result=Counter(s)</span><br><span class="line">        cnt=<span class="number">0</span></span><br><span class="line">        sums=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> cha <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">if</span> result[cha]%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                sums+=result[cha]</span><br><span class="line">            <span class="keyword">elif</span> result[cha]%<span class="number">2</span>!=<span class="number">0</span> <span class="keyword">and</span> result[cha]&gt;<span class="number">2</span>:</span><br><span class="line">                sums+=result[cha]-<span class="number">1</span></span><br><span class="line">                cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt!=<span class="number">0</span>:</span><br><span class="line">            sums+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sums</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;409-Longest-Palindrome-easy&quot;&gt;&lt;a href=&quot;#409-Longest-Palindrome-easy&quot; class=&quot;headerlink&quot; title=&quot;409. Longest Palindrome(easy)&quot;&gt;&lt;/a&gt;409</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="Counter" scheme="http://example.com/tags/Counter/"/>
    
  </entry>
  
  <entry>
    <title>412. Fizz Buzz(easy)</title>
    <link href="http://example.com/2022/11/05/412/"/>
    <id>http://example.com/2022/11/05/412/</id>
    <published>2022-11-05T19:23:22.000Z</published>
    <updated>2022-11-05T19:36:43.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="412-Fizz-Buzz"><a href="#412-Fizz-Buzz" class="headerlink" title="412. Fizz Buzz"></a>412. Fizz Buzz</h1><h2 id="Given-an-integer-n-return-a-string-array-answer-1-indexed-where"><a href="#Given-an-integer-n-return-a-string-array-answer-1-indexed-where" class="headerlink" title="Given an integer n, return a string array answer (1-indexed) where:"></a>Given an integer n, return a string array answer (1-indexed) where:</h2><p>answer[i] == “FizzBuzz” if i is divisible by 3 and 5.<br>answer[i] == “Fizz” if i is divisible by 3.<br>answer[i] == “Buzz” if i is divisible by 5.<br>answer[i] == i (as a string) if none of the above conditions are true.</p><p>这道题是hackerrank一开始遇到的题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fizzBuzz</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        result=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">3</span> ==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;FizzBuzz&quot;</span>)                </span><br><span class="line">            <span class="keyword">elif</span> i%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;Fizz&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> i%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">                result.append(<span class="string">&quot;Buzz&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;412-Fizz-Buzz&quot;&gt;&lt;a href=&quot;#412-Fizz-Buzz&quot; class=&quot;headerlink&quot; title=&quot;412. Fizz Buzz&quot;&gt;&lt;/a&gt;412. Fizz Buzz&lt;/h1&gt;&lt;h2 id=&quot;Given-an-integer-n-</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>1636. Sort Array by Increasing Frequency(easy)</title>
    <link href="http://example.com/2022/10/31/1636/"/>
    <id>http://example.com/2022/10/31/1636/</id>
    <published>2022-11-01T01:50:56.000Z</published>
    <updated>2022-11-01T02:08:08.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1636-Sort-Array-by-Increasing-Frequency-easy"><a href="#1636-Sort-Array-by-Increasing-Frequency-easy" class="headerlink" title="1636. Sort Array by Increasing Frequency(easy)"></a>1636. Sort Array by Increasing Frequency(easy)</h1><h2 id="Given-an-array-of-integers-nums-sort-the-array-in-increasing-order-based-on-the-frequency-of-the-values-If-multiple-values-have-the-same-frequency-sort-them-in-decreasing-order"><a href="#Given-an-array-of-integers-nums-sort-the-array-in-increasing-order-based-on-the-frequency-of-the-values-If-multiple-values-have-the-same-frequency-sort-them-in-decreasing-order" class="headerlink" title="Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order."></a>Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</h2><h2 id="Return-the-sorted-array"><a href="#Return-the-sorted-array" class="headerlink" title="Return the sorted array."></a>Return the sorted array.</h2><p>对hashmap的value进行升序排序，简单但有用<br>当frequency相同时，数值按降序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frequencySort</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        cnt=Counter(nums)</span><br><span class="line">        nums.sort(key=<span class="keyword">lambda</span> x:(cnt[x],-x) )</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例：<br>输入nums = [2,3,1,3,2]<br>得到 cnt : Counter({2: 2, 3: 2, 1: 1})</p><p>无参的 sort() 会依次对nums的值升序排序<br>而 sort(key) 会先把nums的值传给表达式key,按照key返回的值大小再给对应的nums排序<br>第1次传2，(cnt[2], -2)) 得到 (2,-2)<br>第2次传3，(cnt[3], -3)) 得到 (2,-3)<br>第3次传1，(cnt[1], -1)) 得到 (1,-1)<br>第4次传3，(cnt[3], -3)) 得到 (2,-3)<br>第5次传2，(cnt[2], -2)) 得到 (2,-2)<br>排序顺序为(1,-1),(2,-3),(2,-3),(2,-2),(2,-2)<br>对应的nums的值为1,3,3,2,2</p><p>sort是针对于列表的排列方法。默认升序排序。key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。此处传入的是一个元组，先以第一个字段进行排列。第一个字段一样，再以第二个字段进行排序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1636-Sort-Array-by-Increasing-Frequency-easy&quot;&gt;&lt;a href=&quot;#1636-Sort-Array-by-Increasing-Frequency-easy&quot; class=&quot;headerlink&quot; title=&quot;1636</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>8. String to Integer (atoi)(medium)</title>
    <link href="http://example.com/2022/10/19/8/"/>
    <id>http://example.com/2022/10/19/8/</id>
    <published>2022-10-19T20:41:22.000Z</published>
    <updated>2022-10-19T21:37:33.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-String-to-Integer-atoi-medium"><a href="#8-String-to-Integer-atoi-medium" class="headerlink" title="8. String to Integer (atoi)(medium)"></a>8. String to Integer (atoi)(medium)</h1><h2 id="Implement-the-myAtoi-string-s-function-which-converts-a-string-to-a-32-bit-signed-integer-similar-to-C-C-’s-atoi-function"><a href="#Implement-the-myAtoi-string-s-function-which-converts-a-string-to-a-32-bit-signed-integer-similar-to-C-C-’s-atoi-function" class="headerlink" title="Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++’s atoi function)."></a>Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++’s atoi function).</h2><h2 id="The-algorithm-for-myAtoi-string-s-is-as-follows"><a href="#The-algorithm-for-myAtoi-string-s-is-as-follows" class="headerlink" title="The algorithm for myAtoi(string s) is as follows:"></a>The algorithm for myAtoi(string s) is as follows:</h2><p>Read in and ignore any leading whitespace.<br>Check if the next character (if not already at the end of the string) is ‘-‘ or ‘+’. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.<br>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.<br>Convert these digits into an integer (i.e. “123” -&gt; 123, “0032” -&gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).<br>If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.<br>Return the integer as the final result.</p><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;42&quot;</span><br><span class="line">输出：42</span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;42&quot;（读入 &quot;42&quot;）</span><br><span class="line">           ^</span><br><span class="line">解析得到整数 42 。</span><br><span class="line">由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br></pre></td></tr></table></figure><h3 id="方法一：正则表达式"><a href="#方法一：正则表达式" class="headerlink" title="方法一：正则表达式"></a>方法一：<a href="https://leetcode.cn/problems/string-to-integer-atoi/solution/python-1xing-zheng-ze-biao-da-shi-by-knifezhu/">正则表达式</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(<span class="built_in">int</span>(*re.findall(<span class="string">&#x27;^[\+\-]?\d+&#x27;</span>, s.lstrip())), <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>), -<span class="number">2</span>**<span class="number">31</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正则表达re模块</span><br><span class="line">re.findall</span><br><span class="line">返回string中所有与pattern匹配的全部字符串,返回形式为数组。</span><br><span class="line">^：匹配字符串开头</span><br><span class="line">[\+\-]：代表一个+字符或-字符</span><br><span class="line">?：前面一个字符可有可无</span><br><span class="line">\d：一个数字</span><br><span class="line">+：前面一个字符的一个或多个</span><br><span class="line">\D：一个非数字字符</span><br><span class="line">*：前面一个字符的0个或多个</span><br><span class="line">Python lstrip() 方法用于截掉字符串左边的空格或指定字符</span><br></pre></td></tr></table></figure><p>详细版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        INT_MAX = <span class="number">2147483647</span>    </span><br><span class="line">        INT_MIN = -<span class="number">2147483648</span></span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>.lstrip()      <span class="comment">#清除左边多余的空格</span></span><br><span class="line">        num_re = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[\+\-]?\d+&#x27;</span>)   <span class="comment">#设置正则规则</span></span><br><span class="line">        num = num_re.findall(<span class="built_in">str</span>)   <span class="comment">#查找匹配的内容</span></span><br><span class="line">        num = <span class="built_in">int</span>(*num) <span class="comment">#由于返回的是个列表，解包并且转换成整数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">min</span>(num,INT_MAX),INT_MIN)    <span class="comment">#返回值</span></span><br></pre></td></tr></table></figure><h3 id="方法二：有限状态机"><a href="#方法二：有限状态机" class="headerlink" title="方法二：有限状态机"></a>方法二：<a href="https://leetcode.cn/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/">有限状态机</a></h3><p>准确地说，这是确定有限状态机（deterministic finite automaton, DFA）。</p><p>我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 s’ 的表格即可解决题目中的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span></span><br><span class="line">INT_MIN = -<span class="number">2</span> ** <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.state = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        self.sign = <span class="number">1</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.table = &#123;</span><br><span class="line">            <span class="string">&#x27;start&#x27;</span>: [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;signed&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;signed&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;in_number&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;end&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_col</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">if</span> c.isspace():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c.isdigit():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        self.state = self.table[self.state][self.get_col(c)]</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;in_number&#x27;</span>:</span><br><span class="line">            self.ans = self.ans * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, INT_MAX) <span class="keyword">if</span> self.sign == <span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(self.ans, -INT_MIN)</span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;signed&#x27;</span>:</span><br><span class="line">            self.sign = <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        automaton = Automaton()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            automaton.get(c)</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;8-String-to-Integer-atoi-medium&quot;&gt;&lt;a href=&quot;#8-String-to-Integer-atoi-medium&quot; class=&quot;headerlink&quot; title=&quot;8. String to Integer (atoi)(me</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="DFA" scheme="http://example.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode16-deterministic-finite-automaton</title>
    <link href="http://example.com/2022/10/19/LeetCode16-deterministic-finite-automaton/"/>
    <id>http://example.com/2022/10/19/LeetCode16-deterministic-finite-automaton/</id>
    <published>2022-10-19T20:36:03.000Z</published>
    <updated>2022-10-20T01:11:32.338Z</updated>
    
    <content type="html"><![CDATA[<p>确定有限状态机（deterministic finite automaton, DFA）。</p><p>我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 s’ 的表格即可解决题目中的问题。</p><ol start="8"><li><p>String to Integer (atoi)(medium)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX = <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span></span><br><span class="line">INT_MIN = -<span class="number">2</span> ** <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.state = <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        self.sign = <span class="number">1</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line">        self.table = &#123;</span><br><span class="line">            <span class="string">&#x27;start&#x27;</span>: [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;signed&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;signed&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;in_number&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;in_number&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;end&#x27;</span>: [<span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;end&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_col</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        <span class="keyword">if</span> c.isspace():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c.isdigit():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        self.state = self.table[self.state][self.get_col(c)]</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;in_number&#x27;</span>:</span><br><span class="line">            self.ans = self.ans * <span class="number">10</span> + <span class="built_in">int</span>(c)</span><br><span class="line">            self.ans = <span class="built_in">min</span>(self.ans, INT_MAX) <span class="keyword">if</span> self.sign == <span class="number">1</span> <span class="keyword">else</span> <span class="built_in">min</span>(self.ans, -INT_MIN)</span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;signed&#x27;</span>:</span><br><span class="line">            self.sign = <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span>(<span class="params">self, <span class="built_in">str</span>: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        automaton = Automaton()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            automaton.get(c)</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans</span><br></pre></td></tr></table></figure></li><li><p>有效数字</p></li><li><p>UTF-8 Validation</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;确定有限状态机（deterministic finite automaton, DFA）。&lt;/p&gt;
&lt;p&gt;我们的程序在每个时刻有一个状态 s，每次从序列中输入一个字符 c，并根据字符 c 转移到下一个状态 s’。这样，我们只需要建立一个覆盖所有情况的从 s 与 c 映射到 </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
    <category term="DFA" scheme="http://example.com/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>692. Top K Frequent Words</title>
    <link href="http://example.com/2022/10/18/692/"/>
    <id>http://example.com/2022/10/18/692/</id>
    <published>2022-10-19T03:12:48.000Z</published>
    <updated>2022-10-19T20:47:41.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings"><a href="#Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings" class="headerlink" title="Given an array of strings words and an integer k, return the k most frequent strings."></a>Given an array of strings words and an integer k, return the k most frequent strings.</h2><h2 id="Return-the-answer-sorted-by-the-frequency-from-highest-to-lowest-Sort-the-words-with-the-same-frequency-by-their-lexicographical-order"><a href="#Return-the-answer-sorted-by-the-frequency-from-highest-to-lowest-Sort-the-words-with-the-same-frequency-by-their-lexicographical-order" class="headerlink" title="Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order."></a>Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.</h2><p>Top K问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: words = [&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;,&quot;i&quot;,&quot;love&quot;,&quot;coding&quot;], k = 2</span><br><span class="line">Output: [&quot;i&quot;,&quot;love&quot;]</span><br><span class="line">Explanation: &quot;i&quot; and &quot;love&quot; are the two most frequent words.</span><br><span class="line">Note that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-words/solution/by-sunguodong-3tov/">Leetcode题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        counter = Counter(words)</span><br><span class="line">        occur = <span class="built_in">list</span>(counter.items())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.heapify(occur, i, k)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(occur)):</span><br><span class="line">            <span class="keyword">if</span> occur[i][<span class="number">1</span>] &gt; occur[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">or</span> occur[i][<span class="number">1</span>] == occur[<span class="number">0</span>][<span class="number">1</span>] <span class="keyword">and</span> occur[i][<span class="number">0</span>] &lt; occur[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">                occur[i], occur[<span class="number">0</span>] = occur[<span class="number">0</span>], occur[i]</span><br><span class="line">                self.heapify(occur, <span class="number">0</span>, k)</span><br><span class="line">        ans = deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            ans.appendleft(occur[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            occur[<span class="number">0</span>] = occur[k - <span class="number">1</span> - i]</span><br><span class="line">            self.heapify(occur, <span class="number">0</span>, k - <span class="number">1</span> - i)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(ans)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span>(<span class="params">self, heap: <span class="type">List</span>[<span class="type">Tuple</span>], root: <span class="built_in">int</span>, length: <span class="built_in">int</span></span>):</span></span><br><span class="line">        smallest = root</span><br><span class="line">        left = <span class="number">2</span> * root + <span class="number">1</span></span><br><span class="line">        right = left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; length <span class="keyword">and</span> (heap[left][<span class="number">1</span>] &lt; heap[smallest][<span class="number">1</span>] <span class="keyword">or</span> heap[left][<span class="number">1</span>] == heap[smallest][<span class="number">1</span>] <span class="keyword">and</span> heap[left][<span class="number">0</span>] &gt; heap[smallest][<span class="number">0</span>]):</span><br><span class="line">            smallest = left</span><br><span class="line">        <span class="keyword">if</span> right &lt; length <span class="keyword">and</span> (heap[right][<span class="number">1</span>] &lt; heap[smallest][<span class="number">1</span>] <span class="keyword">or</span> heap[right][<span class="number">1</span>] == heap[smallest][<span class="number">1</span>] <span class="keyword">and</span> heap[right][<span class="number">0</span>] &gt; heap[smallest][<span class="number">0</span>]):</span><br><span class="line">            smallest = right</span><br><span class="line">        <span class="keyword">if</span> smallest != root:</span><br><span class="line">            heap[smallest], heap[root] = heap[root], heap[smallest]</span><br><span class="line">            self.heapify(heap, smallest, length)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Given-an-array-of-strings-words-and-an-integer-k-return-the-k-most-frequent-strings&quot;&gt;&lt;a href=&quot;#Given-an-array-of-strings-words-and-a</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>38. Count and Say(medium)</title>
    <link href="http://example.com/2022/10/18/38/"/>
    <id>http://example.com/2022/10/18/38/</id>
    <published>2022-10-18T04:06:16.000Z</published>
    <updated>2022-10-19T20:47:26.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="38-Count-and-Say-medium"><a href="#38-Count-and-Say-medium" class="headerlink" title="38. Count and Say(medium)"></a>38. Count and Say(medium)</h1><h2 id="The-count-and-say-sequence-is-a-sequence-of-digit-strings-defined-by-the-recursive-formula"><a href="#The-count-and-say-sequence-is-a-sequence-of-digit-strings-defined-by-the-recursive-formula" class="headerlink" title="The count-and-say sequence is a sequence of digit strings defined by the recursive formula:"></a>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:</h2><p>countAndSay(1) = “1”</p><h2 id="countAndSay-n-is-the-way-you-would-“say”-the-digit-string-from-countAndSay-n-1-which-is-then-converted-into-a-different-digit-string"><a href="#countAndSay-n-is-the-way-you-would-“say”-the-digit-string-from-countAndSay-n-1-which-is-then-converted-into-a-different-digit-string" class="headerlink" title="countAndSay(n) is the way you would “say” the digit string from countAndSay(n-1), which is then converted into a different digit string."></a>countAndSay(n) is the way you would “say” the digit string from countAndSay(n-1), which is then converted into a different digit string.</h2><h2 id="To-determine-how-you-“say”-a-digit-string-split-it-into-the-minimal-number-of-substrings-such-that-each-substring-contains-exactly-one-unique-digit-Then-for-each-substring-say-the-number-of-digits-then-say-the-digit-Finally-concatenate-every-said-digit"><a href="#To-determine-how-you-“say”-a-digit-string-split-it-into-the-minimal-number-of-substrings-such-that-each-substring-contains-exactly-one-unique-digit-Then-for-each-substring-say-the-number-of-digits-then-say-the-digit-Finally-concatenate-every-said-digit" class="headerlink" title="To determine how you “say” a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit."></a>To determine how you “say” a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</h2><h2 id="For-example-the-saying-and-conversion-for-digit-string-“3322251”"><a href="#For-example-the-saying-and-conversion-for-digit-string-“3322251”" class="headerlink" title="For example, the saying and conversion for digit string “3322251”:"></a>For example, the saying and conversion for digit string “3322251”:</h2><h2 id="Given-a-positive-integer-n-return-the-nth-term-of-the-count-and-say-sequence"><a href="#Given-a-positive-integer-n-return-the-nth-term-of-the-count-and-say-sequence" class="headerlink" title="Given a positive integer n, return the nth term of the count-and-say sequence."></a>Given a positive integer n, return the nth term of the count-and-say sequence.</h2><p>说实话这道题给的例子让人非常疑惑，但其实就是一个类似于斐波那契数列的递归数列,国区题库的题目描述更详细也更准确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">第一项是数字 1 </span><br><span class="line">描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &quot;11&quot;</span><br><span class="line">描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &quot;21&quot;</span><br><span class="line">描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &quot;1211&quot;</span><br><span class="line">描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &quot;111221&quot;</span><br></pre></td></tr></table></figure><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/count-and-say/solution/wai-guan-shu-lie-by-leetcode-solution-9rt8/">官方题解</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:<span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">        res=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">            new_res=[]</span><br><span class="line">            num=<span class="number">1</span></span><br><span class="line">            cur=res[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> res[<span class="number">1</span>:]:</span><br><span class="line">                <span class="keyword">if</span> s ==cur:</span><br><span class="line">                    num+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_res.append(num)</span><br><span class="line">                    new_res.append(cur)</span><br><span class="line">                    num=<span class="number">1</span></span><br><span class="line">                    cur=s</span><br><span class="line">            new_res.append(num)</span><br><span class="line">            new_res.append(cur)</span><br><span class="line">            res=new_res</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,res)))</span><br></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>def square(x) :         # 计算平方数<br>…     return x ** 2<br>…<br>map(square, [1,2,3,4,5])    # 计算列表各个元素的平方</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>list(map(square, [1,2,3,4,5]))   # 使用 list() 转换为列表<br>[1, 4, 9, 16, 25]<br>list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))   # 使用 lambda 匿名函数<br>[1, 4, 9, 16, 25]</p></blockquote></blockquote></blockquote><p>```</p><p>比如n=6,res=[3,1,2,2,1,1],通过map函数list(map(str,res))以后是[‘3’, ‘1’, ‘2’, ‘2’, ‘1’, ‘1’]。<br>再通过’’.join()函数将list里的字符连在一起<br>就这道题而言，转不转换成list都不影响结果，’’.join(map(str,res))也是可以的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;38-Count-and-Say-medium&quot;&gt;&lt;a href=&quot;#38-Count-and-Say-medium&quot; class=&quot;headerlink&quot; title=&quot;38. Count and Say(medium)&quot;&gt;&lt;/a&gt;38. Count and S</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>4. Median of Two Sorted Arrays(hard)</title>
    <link href="http://example.com/2022/10/17/4/"/>
    <id>http://example.com/2022/10/17/4/</id>
    <published>2022-10-17T20:06:08.000Z</published>
    <updated>2022-10-19T20:46:57.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-Median-of-Two-Sorted-Arrays-hard"><a href="#4-Median-of-Two-Sorted-Arrays-hard" class="headerlink" title="4. Median of Two Sorted Arrays(hard)"></a>4. Median of Two Sorted Arrays(hard)</h1><h2 id="Given-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-return-the-median-of-the-two-sorted-arrays"><a href="#Given-two-sorted-arrays-nums1-and-nums2-of-size-m-and-n-respectively-return-the-median-of-the-two-sorted-arrays" class="headerlink" title="Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays."></a>Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.</h2><h2 id="The-overall-run-time-complexity-should-be-O-log-m-n"><a href="#The-overall-run-time-complexity-should-be-O-log-m-n" class="headerlink" title="The overall run time complexity should be O(log (m+n))."></a>The overall run time complexity should be O(log (m+n)).</h2><h3 id="leetcode题解"><a href="#leetcode题解" class="headerlink" title="leetcode题解"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solution/shuang-zhi-zhen-by-powcai/">leetcode题解</a></h3><p>这道题如果时间复杂度没有限定在 O(log(m+n))，我们可以用 O(m+n) 的算法解决，用两个指针分别指向两个数组，比较指针下的元素大小，一共移动次数为 (m+n + 1)/2，便是中位数。</p><p>首先，我们理解什么中位数：指的是该数左右个数相等。</p><p>比如：odd : [1,| 2 |,3]，2 就是这个数组的中位数，左右两边都只要 1 位；</p><p>even: [1,| 2, 3 |,4]，2,3 就是这个数组的中位数，左右两边 1 位；</p><p>那么，现在我们有两个数组：</p><p>num1: [a1,a2,a3,…an]</p><p>nums2: [b1,b2,b3,…bn]</p><p>[nums1[:left1],nums2[:left2] | nums1[left1:], nums2[left2:]]</p><p>只要保证左右两边 个数 相同，中位数就在 | 这个边界旁边产生。</p><p>如何找边界值，我们可以用二分法，我们先确定 num1 取 m1 个数的左半边，那么 num2 取 m2 = (m+n+1)/2 - m1 的左半边，找到合适的 m1，就用二分法找。</p><p>当 [ [a1],[b1,b2,b3] | [a2,..an],[b4,…bn] ]</p><p>我们只需要比较 b3 和 a2 的关系的大小，就可以知道这种分法是不是准确的！</p><p>例如：我们令：</p><p>nums1 = [-1,1,3,5,7,9]</p><p>nums2 =[2,4,6,8,10,12,14,16]</p><p>当 m1 = 4,m2 = 3 ,它的中位数就是median = (num1[m1] + num2[m2])/2</p><p>时间复杂度：O(log(min(m,n)))</p><p>对于代码中边界情况，大家需要自己琢磨。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">        <span class="keyword">if</span> m &gt; n: <span class="keyword">return</span> self.findMedianSortedArrays(nums2, nums1)</span><br><span class="line">        left, right = <span class="number">0</span>, m</span><br><span class="line">        half = (m + n + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            i = (left + right) // <span class="number">2</span></span><br><span class="line">            j = half - i</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[j - <span class="number">1</span>]:</span><br><span class="line">                left = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = i</span><br><span class="line">        i, j = left, half - left</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            mid1 = nums2[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">            mid1 = nums1[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid1 = <span class="built_in">max</span>(nums1[i - <span class="number">1</span>], nums2[j - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> (m + n) &amp; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> mid1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == m:</span><br><span class="line">            mid2 = nums2[j]</span><br><span class="line">        <span class="keyword">elif</span> j == n:</span><br><span class="line">            mid2 = nums1[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid2 = <span class="built_in">min</span>(nums1[i], nums2[j])</span><br><span class="line">        <span class="keyword">return</span> (mid1 + mid2) / <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-Median-of-Two-Sorted-Arrays-hard&quot;&gt;&lt;a href=&quot;#4-Median-of-Two-Sorted-Arrays-hard&quot; class=&quot;headerlink&quot; title=&quot;4. Median of Two Sorted </summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="binary search" scheme="http://example.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>1832. Check if the Sentence Is Pangram(easy)</title>
    <link href="http://example.com/2022/10/17/1832/"/>
    <id>http://example.com/2022/10/17/1832/</id>
    <published>2022-10-17T19:15:49.000Z</published>
    <updated>2022-10-19T20:46:32.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1832-Check-if-the-Sentence-Is-Pangram-easy"><a href="#1832-Check-if-the-Sentence-Is-Pangram-easy" class="headerlink" title="1832. Check if the Sentence Is Pangram(easy)"></a>1832. Check if the Sentence Is Pangram(easy)</h1><h2 id="A-pangram-is-a-sentence-where-every-letter-of-the-English-alphabet-appears-at-least-once"><a href="#A-pangram-is-a-sentence-where-every-letter-of-the-English-alphabet-appears-at-least-once" class="headerlink" title="A pangram is a sentence where every letter of the English alphabet appears at least once."></a>A pangram is a sentence where every letter of the English alphabet appears at least once.</h2><h2 id="Given-a-string-sentence-containing-only-lowercase-English-letters-return-true-if-sentence-is-a-pangram-or-false-otherwise"><a href="#Given-a-string-sentence-containing-only-lowercase-English-letters-return-true-if-sentence-is-a-pangram-or-false-otherwise" class="headerlink" title="Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise."></a>Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.</h2><p>利用set的特性判断无重复后是否有26个字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPangram</span>(<span class="params">self, sentence: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sentence)&lt;=<span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(sentence))==<span class="number">26</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1832-Check-if-the-Sentence-Is-Pangram-easy&quot;&gt;&lt;a href=&quot;#1832-Check-if-the-Sentence-Is-Pangram-easy&quot; class=&quot;headerlink&quot; title=&quot;1832. Ch</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>7. Reverse Integer(medium)</title>
    <link href="http://example.com/2022/10/16/7/"/>
    <id>http://example.com/2022/10/16/7/</id>
    <published>2022-10-16T21:07:02.000Z</published>
    <updated>2022-10-19T20:43:39.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-Reverse-Integer-medium"><a href="#7-Reverse-Integer-medium" class="headerlink" title="7. Reverse Integer(medium)"></a>7. Reverse Integer(medium)</h1><h2 id="Given-a-signed-32-bit-integer-x-return-x-with-its-digits-reversed-If-reversing-x-causes-the-value-to-go-outside-the-signed-32-bit-integer-range-2-31-2-31-1-then-return-0"><a href="#Given-a-signed-32-bit-integer-x-return-x-with-its-digits-reversed-If-reversing-x-causes-the-value-to-go-outside-the-signed-32-bit-integer-range-2-31-2-31-1-then-return-0" class="headerlink" title="Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."></a>Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.</h2><h2 id="Assume-the-environment-does-not-allow-you-to-store-64-bit-integers-signed-or-unsigned"><a href="#Assume-the-environment-does-not-allow-you-to-store-64-bit-integers-signed-or-unsigned" class="headerlink" title="Assume the environment does not allow you to store 64-bit integers (signed or unsigned)."></a>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</h2><p><a href="https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/">leetcodde题解</a><br>初始解：将数组转换成字符串，从后往前输出字符串得到结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_force</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="keyword">if</span> -<span class="number">10</span> &lt; x &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    str_x = <span class="built_in">str</span>(x)</span><br><span class="line">    <span class="keyword">if</span> str_x[<span class="number">0</span>] != <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        str_x = str_x[::-<span class="number">1</span>]</span><br><span class="line">        x = <span class="built_in">int</span>(str_x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        str_x = str_x[:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">        x = <span class="built_in">int</span>(str_x)</span><br><span class="line">        x = -x</span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> -<span class="number">2147483648</span> &lt; x &lt; <span class="number">2147483647</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>优化解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        y, res = <span class="built_in">abs</span>(x), <span class="number">0</span></span><br><span class="line">        <span class="comment"># 则其数值范围为 [−2^31,  2^31 − 1]</span></span><br><span class="line">        boundry = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>) -<span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> y != <span class="number">0</span>:</span><br><span class="line">            res = res*<span class="number">10</span> +y%<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> res &gt; boundry :</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            y //=<span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> x &gt;<span class="number">0</span> <span class="keyword">else</span> -res</span><br></pre></td></tr></table></figure><p>这题没有考什么深的东西，不过可以复习一下 python 的字符运算语法：</p><p>复习一下 python 的位运算符：</p><p>(a &amp; b)<br>按位与运算符：参与运算的两个值，如果两个相应位都为 1，则该位的结果为 1，否则为 0 。<br>输出结果 12 ，二进制解释： 0000 1100</p><p>(a | b)<br>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。<br>输出结果 61 ，二进制解释： 0011 1101</p><p>(a ^ b)<br>按位异或运算符：当两对应的二进位相异时，结果为 1<br>输出结果 49 ，二进制解释： 0011 0001</p><p>(<del>a )<br>按位取反运算符：对数据的每个二进制位取反，即把 1 变为 0，把 0 变为 1 。</del>x 类似于 -x-1<br>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</p><p>a &lt;&lt; 2<br>左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补 0。<br>输出结果 240 ，二进制解释： 1111 0000</p><p>a &gt;&gt; 2<br>右移动运算符：把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数<br>输出结果 15 ，二进制解释： 0000 1111</p><p>python 赋值运算符：</p><p>*= 乘法赋值运算符 c *= a 等效于 c = c * a<br>/= 除法赋值运算符 c /= a 等效于 c = c / a<br>%= 取模赋值运算符 c %= a 等效于 c = c % a<br>**= 幂赋值运算符 c **= a 等效于 c = c ** a<br>//= 取整除赋值运算符 c //= a 等效于 c = c // a</p><p>作者：stray_camel<br>链接：<a href="https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/">https://leetcode.cn/problems/reverse-integer/solution/pythondan-chu-he-tui-ru-shu-zi-yi-chu-qian-jin-xin/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;7-Reverse-Integer-medium&quot;&gt;&lt;a href=&quot;#7-Reverse-Integer-medium&quot; class=&quot;headerlink&quot; title=&quot;7. Reverse Integer(medium)&quot;&gt;&lt;/a&gt;7. Reverse I</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="string" scheme="http://example.com/tags/string/"/>
    
    <category term="bitwise" scheme="http://example.com/tags/bitwise/"/>
    
  </entry>
  
  <entry>
    <title>2095. Delete the Middle Node of a Linked List(medium)</title>
    <link href="http://example.com/2022/10/14/2095/"/>
    <id>http://example.com/2022/10/14/2095/</id>
    <published>2022-10-14T21:03:19.000Z</published>
    <updated>2022-10-14T21:05:52.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2095-Delete-the-Middle-Node-of-a-Linked-List-medium"><a href="#2095-Delete-the-Middle-Node-of-a-Linked-List-medium" class="headerlink" title="2095. Delete the Middle Node of a Linked List(medium)"></a>2095. Delete the Middle Node of a Linked List(medium)</h1><p>You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.</p><p>The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.</p><p>For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.</p><p>思路：<br>先遍历一遍链表，判断链表总长度，然后算出一半的长度n在哪里<br>最后遍历到n-1的位置，跳过位置n直接连到n+1</p><pre><code class="python"># Definition for singly-linked list.# class ListNode:#     def __init__(self, val=0, next=None):#         self.val = val#         self.next = nextclass Solution:    def deleteMiddle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:        if head.next==None:            return None        n=0        p1=p2=head        while p1:            p1=p1.next            n+=1        k=n//2        for i in range(k-1):            p2=p2.next                #p2.next=p2.next.next        p2.next = p2.next.next        return head</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2095-Delete-the-Middle-Node-of-a-Linked-List-medium&quot;&gt;&lt;a href=&quot;#2095-Delete-the-Middle-Node-of-a-Linked-List-medium&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
    <category term="linked-list" scheme="http://example.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>401. Binary Watch(easy)</title>
    <link href="http://example.com/2022/10/12/401/"/>
    <id>http://example.com/2022/10/12/401/</id>
    <published>2022-10-13T02:42:37.000Z</published>
    <updated>2022-10-13T02:46:08.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="401-Binary-Watch-easy"><a href="#401-Binary-Watch-easy" class="headerlink" title="401. Binary Watch(easy)"></a>401. Binary Watch(easy)</h1><h2 id="A-binary-watch-has-4-LEDs-on-the-top-to-represent-the-hours-0-11-and-6-LEDs-on-the-bottom-to-represent-the-minutes-0-59-Each-LED-represents-a-zero-or-one-with-the-least-significant-bit-on-the-right"><a href="#A-binary-watch-has-4-LEDs-on-the-top-to-represent-the-hours-0-11-and-6-LEDs-on-the-bottom-to-represent-the-minutes-0-59-Each-LED-represents-a-zero-or-one-with-the-least-significant-bit-on-the-right" class="headerlink" title="A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right."></a>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</h2><p>For example, the below binary watch reads “4:51”.</p><p>一共十个灯，四个是二进制显示小时，六个是二进制显示分钟</p><h1 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a><a href="https://leetcode.cn/problems/binary-watch/solution/er-jin-zhi-shou-biao-by-leetcode-solutio-3559/">官方题解</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readBinaryWatch</span>(<span class="params">self, turnedOn: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span></span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">bin</span>(h).count(<span class="string">&quot;1&quot;</span>) + <span class="built_in">bin</span>(m).count(<span class="string">&quot;1&quot;</span>) == turnedOn:</span><br><span class="line">                    ans.append(<span class="string">f&quot;<span class="subst">&#123;h&#125;</span>:<span class="subst">&#123;m:02d&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>由题意可知，小时由 4 个比特表示，分钟由 6 个比特表示，比特位值为 0 表示灯灭，为 1 表示灯亮。</p><p>我们可以枚举小时的所有可能值 [0,11]，以及分钟的所有可能值 [0,59]，并计算二者的二进制中 1 的个数之和，若为 turnedOn，则将其加入到答案中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;401-Binary-Watch-easy&quot;&gt;&lt;a href=&quot;#401-Binary-Watch-easy&quot; class=&quot;headerlink&quot; title=&quot;401. Binary Watch(easy)&quot;&gt;&lt;/a&gt;401. Binary Watch(eas</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="array" scheme="http://example.com/tags/array/"/>
    
  </entry>
  
</feed>
