<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>八角书屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-12T02:01:39.884Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>leaf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>123. Best Time to Buy and Sell Stock III(hard)</title>
    <link href="http://example.com/2022/06/11/123/"/>
    <id>http://example.com/2022/06/11/123/</id>
    <published>2022-06-12T01:55:04.000Z</published>
    <updated>2022-06-12T02:01:39.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="123-Best-Time-to-Buy-and-Sell-Stock-III-hard"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III-hard" class="headerlink" title="123. Best Time to Buy and Sell Stock III(hard)"></a>123. Best Time to Buy and Sell Stock III(hard)</h1><h2 id="You-are-given-an-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day"><a href="#You-are-given-an-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day" class="headerlink" title="You are given an array prices where prices[i] is the price of a given stock on the ith day."></a>You are given an array prices where prices[i] is the price of a given stock on the ith day.</h2><h2 id="Find-the-maximum-profit-you-can-achieve-You-may-complete-at-most-two-transactions"><a href="#Find-the-maximum-profit-you-can-achieve-You-may-complete-at-most-two-transactions" class="headerlink" title="Find the maximum profit you can achieve. You may complete at most two transactions."></a>Find the maximum profit you can achieve. You may complete at most two transactions.</h2><h2 id="Note-You-may-not-engage-in-multiple-transactions-simultaneously-i-e-you-must-sell-the-stock-before-you-buy-again"><a href="#Note-You-may-not-engage-in-multiple-transactions-simultaneously-i-e-you-must-sell-the-stock-before-you-buy-again" class="headerlink" title="Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again)."></a>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [3,3,5,0,0,3,1,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.</span><br><span class="line">Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</span><br></pre></td></tr></table></figure><p>卖股票第三弹（hard题了）</p><p>卖股票一共六题，分别是<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">123</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714</a></p><p>和第二题差不多，但是限制了最多两次交易</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;123-Best-Time-to-Buy-and-Sell-Stock-III-hard&quot;&gt;&lt;a href=&quot;#123-Best-Time-to-Buy-and-Sell-Stock-III-hard&quot; class=&quot;headerlink&quot; title=&quot;123.</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>122. Best Time to Buy and Sell Stock II (Easy)</title>
    <link href="http://example.com/2022/06/11/122/"/>
    <id>http://example.com/2022/06/11/122/</id>
    <published>2022-06-12T01:33:44.000Z</published>
    <updated>2022-06-12T02:01:33.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="122-Best-Time-to-Buy-and-Sell-Stock-II-Easy"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II-Easy" class="headerlink" title="122. Best Time to Buy and Sell Stock II (Easy)"></a>122. Best Time to Buy and Sell Stock II (Easy)</h1><h2 id="You-are-given-an-integer-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day"><a href="#You-are-given-an-integer-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day" class="headerlink" title="You are given an integer array prices where prices[i] is the price of a given stock on the ith day."></a>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</h2><h2 id="On-each-day-you-may-decide-to-buy-and-or-sell-the-stock-You-can-only-hold-at-most-one-share-of-the-stock-at-any-time-However-you-can-buy-it-then-immediately-sell-it-on-the-same-day"><a href="#On-each-day-you-may-decide-to-buy-and-or-sell-the-stock-You-can-only-hold-at-most-one-share-of-the-stock-at-any-time-However-you-can-buy-it-then-immediately-sell-it-on-the-same-day" class="headerlink" title="On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day."></a>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</h2><h2 id="Find-and-return-the-maximum-profit-you-can-achieve"><a href="#Find-and-return-the-maximum-profit-you-can-achieve" class="headerlink" title="Find and return the maximum profit you can achieve."></a>Find and return the maximum profit you can achieve.</h2><p>卖股票第二弹</p><p>卖股票一共六题，分别是<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">123</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714</a></p><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p><p>返回 你能获得的 最大利润 。</p><p>这一题一样是可以用贪心算法或者动态规划写的，但是我在<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode-s/658886">官方题解评论区</a>发现一个极其简单的小技巧。在本题中买卖都是无限次的，所以只要把盈利（也就是上升段）全部加在一起就可以了，相当于每隔一天算一次盈利，盈利为正算在总利润里，盈利为负就丢掉。</p><p>简单来说就是只要把所有的盈利加在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(prices)):</span><br><span class="line">            <span class="keyword">if</span> prices[i]-prices[i-<span class="number">1</span>]&gt;<span class="number">0</span>:</span><br><span class="line">                res += prices[i]-prices[i-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;122-Best-Time-to-Buy-and-Sell-Stock-II-Easy&quot;&gt;&lt;a href=&quot;#122-Best-Time-to-Buy-and-Sell-Stock-II-Easy&quot; class=&quot;headerlink&quot; title=&quot;122. B</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>121. Best Time to Buy and Sell Stock (Easy)</title>
    <link href="http://example.com/2022/06/11/121/"/>
    <id>http://example.com/2022/06/11/121/</id>
    <published>2022-06-12T01:21:17.000Z</published>
    <updated>2022-06-12T02:01:30.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="121-Best-Time-to-Buy-and-Sell-Stock-Easy"><a href="#121-Best-Time-to-Buy-and-Sell-Stock-Easy" class="headerlink" title="121. Best Time to Buy and Sell Stock (Easy)"></a>121. Best Time to Buy and Sell Stock (Easy)</h1><h2 id="You-are-given-an-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day"><a href="#You-are-given-an-array-prices-where-prices-i-is-the-price-of-a-given-stock-on-the-ith-day" class="headerlink" title="You are given an array prices where prices[i] is the price of a given stock on the ith day."></a>You are given an array prices where prices[i] is the price of a given stock on the ith day.</h2><h2 id="You-want-to-maximize-your-profit-by-choosing-a-single-day-to-buy-one-stock-and-choosing-a-different-day-in-the-future-to-sell-that-stock"><a href="#You-want-to-maximize-your-profit-by-choosing-a-single-day-to-buy-one-stock-and-choosing-a-different-day-in-the-future-to-sell-that-stock" class="headerlink" title="You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock."></a>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</h2><h2 id="Return-the-maximum-profit-you-can-achieve-from-this-transaction-If-you-cannot-achieve-any-profit-return-0"><a href="#Return-the-maximum-profit-you-can-achieve-from-this-transaction-If-you-cannot-achieve-any-profit-return-0" class="headerlink" title="Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."></a>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.</h2><p>其实这题是动态规划的问题.卖股票一共六题，分别是<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">123</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/">188</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309</a>,<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714</a></p><p><img src="https://pic.leetcode-cn.com/4eaadab491f2bf88639d66c9d51bb0115e694ae08d637841ac18172b631cb21f-0121.gif" alt="图片"></p><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/solution/yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu-1-2/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        minprice = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment">#float(&#x27;inf&#x27;)表示正无穷大</span></span><br><span class="line">        maxprofit = <span class="number">0</span> <span class="comment">#保存当前最大的利润</span></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices: <span class="comment">#一次遍历</span></span><br><span class="line">            maxprofit = <span class="built_in">max</span>(price - minprice, maxprofit)<span class="comment">#当前利润与最大的利润相比</span></span><br><span class="line">            minprice = <span class="built_in">min</span>(price, minprice) <span class="comment">#保存当前最小的价格</span></span><br><span class="line">        <span class="keyword">return</span> maxprofit</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;121-Best-Time-to-Buy-and-Sell-Stock-Easy&quot;&gt;&lt;a href=&quot;#121-Best-Time-to-Buy-and-Sell-Stock-Easy&quot; class=&quot;headerlink&quot; title=&quot;121. Best Ti</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
    <category term="Dynamic Programming" scheme="http://example.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>406. Queue Reconstruction by Height(Medium)</title>
    <link href="http://example.com/2022/06/11/406/"/>
    <id>http://example.com/2022/06/11/406/</id>
    <published>2022-06-11T20:52:34.000Z</published>
    <updated>2022-06-12T02:01:24.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="406-Queue-Reconstruction-by-Height-Medium"><a href="#406-Queue-Reconstruction-by-Height-Medium" class="headerlink" title="406. Queue Reconstruction by Height(Medium)"></a>406. Queue Reconstruction by Height(Medium)</h1><h2 id="You-are-given-an-array-of-people-people-which-are-the-attributes-of-some-people-in-a-queue-not-necessarily-in-order-Each-people-i-hi-ki-represents-the-ith-person-of-height-hi-with-exactly-ki-other-people-in-front-who-have-a-height-greater-than-or-equal-to-hi"><a href="#You-are-given-an-array-of-people-people-which-are-the-attributes-of-some-people-in-a-queue-not-necessarily-in-order-Each-people-i-hi-ki-represents-the-ith-person-of-height-hi-with-exactly-ki-other-people-in-front-who-have-a-height-greater-than-or-equal-to-hi" class="headerlink" title="You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi."></a>You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.</h2><h2 id="Reconstruct-and-return-the-queue-that-is-represented-by-the-input-array-people-The-returned-queue-should-be-formatted-as-an-array-queue-where-queue-j-hj-kj-is-the-attributes-of-the-jth-person-in-the-queue-queue-0-is-the-person-at-the-front-of-the-queue"><a href="#Reconstruct-and-return-the-queue-that-is-represented-by-the-input-array-people-The-returned-queue-should-be-formatted-as-an-array-queue-where-queue-j-hj-kj-is-the-attributes-of-the-jth-person-in-the-queue-queue-0-is-the-person-at-the-front-of-the-queue" class="headerlink" title="Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue)."></a>Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).</h2><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目描述：整数对 (h, k) 表示，其中 h 是这个人的身高，k 是排在这个人前面且身高大于或等于 h 的人数。</p><p>渔（套路）：一般这种数对，还涉及排序的，根据第一个元素正向排序，根据第二个元素反向排序，或者根据第一个元素反向排序，根据第二个元素正向排序，往往能够简化解题过程。</p><p>在本题目中，首先对数对进行排序，按照数对的元素 1(身高) 降序排序，按照数对的元素 2 (人数)升序排序。原因是，按照元素 1 进行降序排序，对于每个元素，在其之前的元素的个数，就是大于等于他的元素的数量，而按照第二个元素正向排序，我们希望 k 大的尽量在后面，减少插入操作的次数。</p><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/solution/xian-pai-xu-zai-cha-dui-dong-hua-yan-shi-suan-fa-g/">leetcode题解</a></p><p>注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = lambda x: (-x[0], x[1]))</span><br></pre></td></tr></table></figure><p>第一个元素降序，第二个元素升序排列，以第一个元素的降序排列优先</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = [[1,4],[2,3],[3,4],[1,3],[1,2]]</span><br><span class="line"></span><br><span class="line">print(sorted(A,key=lambda x:x[1]))</span><br><span class="line"></span><br><span class="line">print(sorted(A,key = lambda x: (-x[0], x[1])))</span><br><span class="line"></span><br><span class="line">print(sorted(A,key = lambda x: (-x[0])))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2], [2, 3], [1, 3], [1, 4], [3, 4]]</span><br><span class="line">[[3, 4], [2, 3], [1, 2], [1, 3], [1, 4]]</span><br><span class="line">[[3, 4], [2, 3], [1, 4], [1, 3], [1, 2]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="本题例子"><a href="#本题例子" class="headerlink" title="本题例子"></a>本题例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br></pre></td></tr></table></figure><p>所以排序完：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span>(<span class="params">self, people: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        people = <span class="built_in">sorted</span>(people, key = <span class="keyword">lambda</span> x: (-x[<span class="number">0</span>], x[<span class="number">1</span>])) <span class="comment">#排序</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> people:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt;= p[<span class="number">1</span>]:  <span class="comment">#比较的变量是当前数组的长度</span></span><br><span class="line">                res.append(p)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(res) &gt; p[<span class="number">1</span>]:</span><br><span class="line">                res.insert(p[<span class="number">1</span>], p)  <span class="comment"># p is inserted at index p[1]（参与这次排序的P[1])</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span>(<span class="params">self, people: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> people:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>        </span><br><span class="line">        people.sort(key=<span class="keyword">lambda</span> balloon: balloon[<span class="number">1</span>])</span><br><span class="line">        pos = people[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> balloon <span class="keyword">in</span> people:</span><br><span class="line">            <span class="keyword">if</span> balloon[<span class="number">0</span>] &gt; pos:</span><br><span class="line">                pos = balloon[<span class="number">1</span>]</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;406-Queue-Reconstruction-by-Height-Medium&quot;&gt;&lt;a href=&quot;#406-Queue-Reconstruction-by-Height-Medium&quot; class=&quot;headerlink&quot; title=&quot;406. Queue</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>452. Minimum Number of Arrows to Burst Balloons (Medium)</title>
    <link href="http://example.com/2022/06/10/452/"/>
    <id>http://example.com/2022/06/10/452/</id>
    <published>2022-06-11T02:58:19.000Z</published>
    <updated>2022-06-11T20:52:51.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons-Medium"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons-Medium" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons (Medium)"></a>452. Minimum Number of Arrows to Burst Balloons (Medium)</h1><h2 id="There-are-some-spherical-balloons-taped-onto-a-flat-wall-that-represents-the-XY-plane-The-balloons-are-represented-as-a-2D-integer-array-points-where-points-i-xstart-xend-denotes-a-balloon-whose-horizontal-diameter-stretches-between-xstart-and-xend-You-do-not-know-the-exact-y-coordinates-of-the-balloons"><a href="#There-are-some-spherical-balloons-taped-onto-a-flat-wall-that-represents-the-XY-plane-The-balloons-are-represented-as-a-2D-integer-array-points-where-points-i-xstart-xend-denotes-a-balloon-whose-horizontal-diameter-stretches-between-xstart-and-xend-You-do-not-know-the-exact-y-coordinates-of-the-balloons" class="headerlink" title="There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons."></a>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.</h2><h2 id="Arrows-can-be-shot-up-directly-vertically-in-the-positive-y-direction-from-different-points-along-the-x-axis-A-balloon-with-xstart-and-xend-is-burst-by-an-arrow-shot-at-x-if-xstart-lt-x-lt-xend-There-is-no-limit-to-the-number-of-arrows-that-can-be-shot-A-shot-arrow-keeps-traveling-up-infinitely-bursting-any-balloons-in-its-path"><a href="#Arrows-can-be-shot-up-directly-vertically-in-the-positive-y-direction-from-different-points-along-the-x-axis-A-balloon-with-xstart-and-xend-is-burst-by-an-arrow-shot-at-x-if-xstart-lt-x-lt-xend-There-is-no-limit-to-the-number-of-arrows-that-can-be-shot-A-shot-arrow-keeps-traveling-up-infinitely-bursting-any-balloons-in-its-path" class="headerlink" title="Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart &lt;= x &lt;= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path."></a>Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart &lt;= x &lt;= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</h2><h2 id="Given-the-array-points-return-the-minimum-number-of-arrows-that-must-be-shot-to-burst-all-balloons"><a href="#Given-the-array-points-return-the-minimum-number-of-arrows-that-must-be-shot-to-burst-all-balloons" class="headerlink" title="Given the array points, return the minimum number of arrows that must be shot to burst all balloons."></a>Given the array points, return the minimum number of arrows that must be shot to burst all balloons.</h2><p>题目描述：气球在一个水平数轴上摆放，可以重叠，飞镖垂直投向坐标轴，使得路径上的气球都被刺破。求解最小的投飞镖次数使所有气球都被刺破。</p><p>也是计算不重叠的区间个数，不过和 Non-overlapping points 的区别在于，[1, 2] 和 [2, 3] 在本题中算是重叠区间。</p><p><img src="https://assets.leetcode-cn.com/solution-static/452/1.png" alt="射箭"></p><p>Example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="排序-贪心"><a href="#排序-贪心" class="headerlink" title="排序 + 贪心"></a>排序 + 贪心</h2><p>这道题和 435. Non-overlapping Intervals (Medium) 有些类似，都是寻找重合区间</p><p>贪心：<br>既然每个气球都需要被引爆，那么在满足引爆对箭限制最大的那个气球（因为它一定要被引爆，而箭和其它同时被引爆的气球 都可以迁就它，所以满足它是必须的） 的同时，引爆尽可能多其他的气球。</p><p>在付出不变的的前提下，获得尽可能多。</p><p>简单来说就是先按照区间右边边界从小到大排序，为了尽可能的多引爆气球，第一支箭射在第一个区间的最右边，根据后面区间的左端点判断一共引爆了哪些区间，并从剩下未被引爆的气球中，再选择右边界位置最靠左的那一个，确定下一支箭，直到所有的气球都被引爆。</p><p>有个问题是这 nn 个气球对应的区间互不重叠，while 循环需要执行 n 次。所以当遇到x(j) ≤ y(i)时 我们可以直接跳出循环，y(j)就是下一个箭的位置。</p><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/solution/yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu-1-2/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span>(<span class="params">self, points: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> points:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>        </span><br><span class="line">        points.sort(key=<span class="keyword">lambda</span> balloon: balloon[<span class="number">1</span>])</span><br><span class="line">        pos = points[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> balloon <span class="keyword">in</span> points:</span><br><span class="line">            <span class="keyword">if</span> balloon[<span class="number">0</span>] &gt; pos:</span><br><span class="line">                pos = balloon[<span class="number">1</span>]</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;452-Minimum-Number-of-Arrows-to-Burst-Balloons-Medium&quot;&gt;&lt;a href=&quot;#452-Minimum-Number-of-Arrows-to-Burst-Balloons-Medium&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>435. Non-overlapping Intervals (Medium)</title>
    <link href="http://example.com/2022/06/09/435/"/>
    <id>http://example.com/2022/06/09/435/</id>
    <published>2022-06-10T02:40:59.000Z</published>
    <updated>2022-06-12T01:29:36.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="435-Non-overlapping-Intervals-Medium"><a href="#435-Non-overlapping-Intervals-Medium" class="headerlink" title="435. Non-overlapping Intervals (Medium)"></a>435. Non-overlapping Intervals (Medium)</h1><h2 id="Given-an-array-of-intervals-intervals-where-intervals-i-starti-endi-return-the-minimum-number-of-intervals-you-need-to-remove-to-make-the-rest-of-the-intervals-non-overlapping"><a href="#Given-an-array-of-intervals-intervals-where-intervals-i-starti-endi-return-the-minimum-number-of-intervals-you-need-to-remove-to-make-the-rest-of-the-intervals-non-overlapping" class="headerlink" title="Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping."></a>Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</h2><p>给定一个区间的集合 intervals ，其中 intervals[i] = [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p><p>输入: intervals = [[1,2],[2,3],[3,4],[1,3]]<br>输出: 1<br>解释: 移除 [1,3] 后，剩下的区间没有重叠。</p><p>题目描述：计算让一组区间不重叠所需要移除的区间个数。</p><p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。</p><p>在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</p><p>按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。</p><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode-solutio-cpsb/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eraseOverlapIntervals</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> intervals:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        intervals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        n = <span class="built_in">len</span>(intervals)</span><br><span class="line">        right = intervals[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>] &gt;= right:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">                right = intervals[i][<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> n - ans</span><br></pre></td></tr></table></figure><p>注释：<br>key=lambda 元素: 元素[字段索引]</p><p>比如   print(sorted(C, key=lambda x: x[2]))   </p><p>x:x[]字母可以随意修改，排序方式按照中括号[]里面的维度进行排序，[0]按照第一维排序，[2]按照第三维排序</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C = [(<span class="string">&#x27;e&#x27;</span>, <span class="number">4</span>, <span class="number">2</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">5</span>, <span class="number">4</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>, <span class="number">3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(C, key=<span class="keyword">lambda</span> y: y[<span class="number">0</span>]))</span><br><span class="line"><span class="comment">#输出[(&#x27;a&#x27;, 2, 1), (&#x27;b&#x27;, 3, 3), (&#x27;c&#x27;, 5, 4), (&#x27;d&#x27;, 1, 5), (&#x27;e&#x27;, 4, 2)]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(C, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"><span class="comment">#[(&#x27;a&#x27;, 2, 1), (&#x27;b&#x27;, 3, 3), (&#x27;c&#x27;, 5, 4), (&#x27;d&#x27;, 1, 5), (&#x27;e&#x27;, 4, 2)]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(C, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>]))</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="number">4</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>, <span class="number">3</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">5</span>, <span class="number">4</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;435-Non-overlapping-Intervals-Medium&quot;&gt;&lt;a href=&quot;#435-Non-overlapping-Intervals-Medium&quot; class=&quot;headerlink&quot; title=&quot;435. Non-overlapping</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>455. Assign Cookies (Easy)</title>
    <link href="http://example.com/2022/06/09/455/"/>
    <id>http://example.com/2022/06/09/455/</id>
    <published>2022-06-10T02:05:23.000Z</published>
    <updated>2022-06-11T02:58:54.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="455-Assign-Cookies-Easy"><a href="#455-Assign-Cookies-Easy" class="headerlink" title="455. Assign Cookies (Easy)"></a>455. Assign Cookies (Easy)</h1><h2 id="Assume-you-are-an-awesome-parent-and-want-to-give-your-children-some-cookies-But-you-should-give-each-child-at-most-one-cookie"><a href="#Assume-you-are-an-awesome-parent-and-want-to-give-your-children-some-cookies-But-you-should-give-each-child-at-most-one-cookie" class="headerlink" title="Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie."></a>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</h2><h2 id="Each-child-i-has-a-greed-factor-g-i-which-is-the-minimum-size-of-a-cookie-that-the-child-will-be-content-with-and-each-cookie-j-has-a-size-s-j-If-s-j-gt-g-i-we-can-assign-the-cookie-j-to-the-child-i-and-the-child-i-will-be-content-Your-goal-is-to-maximize-the-number-of-your-content-children-and-output-the-maximum-number"><a href="#Each-child-i-has-a-greed-factor-g-i-which-is-the-minimum-size-of-a-cookie-that-the-child-will-be-content-with-and-each-cookie-j-has-a-size-s-j-If-s-j-gt-g-i-we-can-assign-the-cookie-j-to-the-child-i-and-the-child-i-will-be-content-Your-goal-is-to-maximize-the-number-of-your-content-children-and-output-the-maximum-number" class="headerlink" title="Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] &gt;= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number."></a>Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] &gt;= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.</h2><p>题目描述：每个孩子都有一个满足度 grid，每个饼干都有一个大小 size，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。</p><p>给一个孩子的饼干应当尽量小并且又能满足该孩子，这样大饼干才能拿来给满足度比较大的孩子。<br>因为满足度最小的孩子最容易得到满足，所以先满足满足度最小的孩子。<br>在以上的解法中，我们只在每次分配时饼干时选择一种看起来是当前最优的分配方法，但无法保证这种局部最优的分配方法最后能得到全局最优解。我们假设能得到全局最优解，并使用反证法进行证明，即假设存在一种比我们使用的贪心策略更优的最优策略。如果不存在这种最优策略，表示贪心策略就是最优策略，得到的解也就是全局最优解。</p><p>证明：假设在某次选择中，贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。假设存在一种最优策略，可以给该孩子分配第 n 个饼干，并且 m &lt; n。我们可以发现，经过这一轮分配，贪心策略分配后剩下的饼干一定有一个比最优策略来得大。因此在后续的分配中，贪心策略一定能满足更多的孩子。也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。 </p><p>个人理解就是尽力把小的孩子喂饱，每轮都按照这样喂饱就是最优解</p><p>自己写的，按照题目逻辑s[j]&gt;=g[i]判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">self, g: <span class="type">List</span>[<span class="built_in">int</span>], s: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        g.sort()</span><br><span class="line">        s.sort()</span><br><span class="line">        n, m = <span class="built_in">len</span>(g), <span class="built_in">len</span>(s)</span><br><span class="line">        i = j = count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># greed factor g[i]</span></span><br><span class="line">        <span class="comment"># cookie size s[j]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> j &lt; m:</span><br><span class="line">            <span class="keyword">if</span> s[j]&gt;=g[i]:</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">                i +=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/assign-cookies/solution/fen-fa-bing-gan-by-leetcode-solution-50se/">官方题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">self, g: <span class="type">List</span>[<span class="built_in">int</span>], s: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        g.sort()</span><br><span class="line">        s.sort()</span><br><span class="line">        n, m = <span class="built_in">len</span>(g), <span class="built_in">len</span>(s)</span><br><span class="line">        i = j = count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># greed factor g[i]</span></span><br><span class="line">        <span class="comment"># cookie size s[j]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> j &lt; m:</span><br><span class="line">            <span class="keyword">while</span> j &lt; m <span class="keyword">and</span> g[i] &gt; s[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; m:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;455-Assign-Cookies-Easy&quot;&gt;&lt;a href=&quot;#455-Assign-Cookies-Easy&quot; class=&quot;headerlink&quot; title=&quot;455. Assign Cookies (Easy)&quot;&gt;&lt;/a&gt;455. Assign Co</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="greedy algorithm" scheme="http://example.com/tags/greedy-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode04贪心思想</title>
    <link href="http://example.com/2022/06/09/LeetCode04/"/>
    <id>http://example.com/2022/06/09/LeetCode04/</id>
    <published>2022-06-10T02:00:26.000Z</published>
    <updated>2022-06-10T02:49:29.217Z</updated>
    
    <content type="html"><![CDATA[<h6 id="具体学习链接-Leetcode-题解-目录-md"><a href="#具体学习链接-Leetcode-题解-目录-md" class="headerlink" title="具体学习链接:Leetcode 题解 - 目录.md"></a>具体学习链接:<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3.md">Leetcode 题解 - 目录.md</a></h6><h1 id="Leetcode-题解-贪心思想"><a href="#Leetcode-题解-贪心思想" class="headerlink" title="Leetcode 题解 - 贪心思想"></a>Leetcode 题解 - 贪心思想</h1><h2 id="1-分配饼干"><a href="#1-分配饼干" class="headerlink" title="1. 分配饼干"></a>1. 分配饼干</h2><h2 id="2-不重叠的区间个数"><a href="#2-不重叠的区间个数" class="headerlink" title="2. 不重叠的区间个数"></a>2. 不重叠的区间个数</h2><h2 id="3-投飞镖刺破气球"><a href="#3-投飞镖刺破气球" class="headerlink" title="3. 投飞镖刺破气球"></a>3. 投飞镖刺破气球</h2><h2 id="4-根据身高和序号重组队列"><a href="#4-根据身高和序号重组队列" class="headerlink" title="4. 根据身高和序号重组队列"></a>4. 根据身高和序号重组队列</h2><h2 id="5-买卖股票最大的收益"><a href="#5-买卖股票最大的收益" class="headerlink" title="5. 买卖股票最大的收益"></a>5. 买卖股票最大的收益</h2><h2 id="6-买卖股票的最大收益-II"><a href="#6-买卖股票的最大收益-II" class="headerlink" title="6. 买卖股票的最大收益 II"></a>6. 买卖股票的最大收益 II</h2><h2 id="7-种植花朵"><a href="#7-种植花朵" class="headerlink" title="7. 种植花朵"></a>7. 种植花朵</h2><h2 id="8-判断是否为子序列"><a href="#8-判断是否为子序列" class="headerlink" title="8. 判断是否为子序列"></a>8. 判断是否为子序列</h2><h2 id="9-修改一个数成为非递减数组"><a href="#9-修改一个数成为非递减数组" class="headerlink" title="9. 修改一个数成为非递减数组"></a>9. 修改一个数成为非递减数组</h2><h2 id="10-子数组最大的和"><a href="#10-子数组最大的和" class="headerlink" title="10. 子数组最大的和"></a>10. 子数组最大的和</h2><h2 id="11-分隔字符串使同种字符出现在一起"><a href="#11-分隔字符串使同种字符出现在一起" class="headerlink" title="11. 分隔字符串使同种字符出现在一起"></a>11. 分隔字符串使同种字符出现在一起</h2><p>保证每次操作都是局部最优的，并且最后得到的结果是全局最优的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;具体学习链接-Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#具体学习链接-Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;具体学习链接:Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;具体学习链接:&lt;a hr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>75. Sort Colors (Medium)</title>
    <link href="http://example.com/2022/06/09/75/"/>
    <id>http://example.com/2022/06/09/75/</id>
    <published>2022-06-10T01:53:10.000Z</published>
    <updated>2022-06-10T13:41:09.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="75-Sort-Colors-Medium"><a href="#75-Sort-Colors-Medium" class="headerlink" title="75. Sort Colors (Medium)"></a>75. Sort Colors (Medium)</h1><h2 id="Given-an-array-nums-with-n-objects-colored-red-white-or-blue-sort-them-in-place-so-that-objects-of-the-same-color-are-adjacent-with-the-colors-in-the-order-red-white-and-blue"><a href="#Given-an-array-nums-with-n-objects-colored-red-white-or-blue-sort-them-in-place-so-that-objects-of-the-same-color-are-adjacent-with-the-colors-in-the-order-red-white-and-blue" class="headerlink" title="Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue."></a>Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</h2><h2 id="We-will-use-the-integers-0-1-and-2-to-represent-the-color-red-white-and-blue-respectively"><a href="#We-will-use-the-integers-0-1-and-2-to-represent-the-color-red-white-and-blue-respectively" class="headerlink" title="We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively."></a>We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.</h2><h2 id="You-must-solve-this-problem-without-using-the-library’s-sort-function"><a href="#You-must-solve-this-problem-without-using-the-library’s-sort-function" class="headerlink" title="You must solve this problem without using the library’s sort function."></a>You must solve this problem without using the library’s sort function.</h2><h2 id="有三种颜色的球，算法的目标是将这三种球按颜色顺序正确地排列。它其实是三向切分快速排序的一种变种，在三向切分快速排序中，每次切分都将数组分成三个区间：小于切分元素、等于切分元素、大于切分元素，而该算法是将数组分成三个区间：等于红色、等于白色、等于蓝色。"><a href="#有三种颜色的球，算法的目标是将这三种球按颜色顺序正确地排列。它其实是三向切分快速排序的一种变种，在三向切分快速排序中，每次切分都将数组分成三个区间：小于切分元素、等于切分元素、大于切分元素，而该算法是将数组分成三个区间：等于红色、等于白色、等于蓝色。" class="headerlink" title="有三种颜色的球，算法的目标是将这三种球按颜色顺序正确地排列。它其实是三向切分快速排序的一种变种，在三向切分快速排序中，每次切分都将数组分成三个区间：小于切分元素、等于切分元素、大于切分元素，而该算法是将数组分成三个区间：等于红色、等于白色、等于蓝色。"></a>有三种颜色的球，算法的目标是将这三种球按颜色顺序正确地排列。它其实是三向切分快速排序的一种变种，在三向切分快速排序中，每次切分都将数组分成三个区间：小于切分元素、等于切分元素、大于切分元素，而该算法是将数组分成三个区间：等于红色、等于白色、等于蓝色。</h2><p>个人理解就是三指针，跟之前的双指针差不多，和之前不同的是因为有三个区间所以要三个指针<br><a href="https://cloud.tencent.com/developer/article/1624933#:~:text=%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E9%97%AE%E9%A2%98%EF%BC%9A%E7%8E%B0%E5%9C%A8%E6%9C%89,%E5%90%8E%E6%AD%A3%E5%A5%BD%E7%BB%84%E6%88%90%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E3%80%82&text=%E8%BF%99%E9%81%93%E9%A2%98%E5%BE%88%E7%BB%8F%E5%85%B8%EF%BC%8C%E5%BE%88%E9%AB%98%E9%A2%91%E3%80%82">荷兰国旗问题参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortColors</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        a = c = <span class="number">0</span></span><br><span class="line">        b = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> c &lt;= b:</span><br><span class="line">            <span class="keyword">if</span> nums[c] == <span class="number">0</span>:</span><br><span class="line">                nums[a], nums[c] = nums[c], nums[a]</span><br><span class="line">                a += <span class="number">1</span></span><br><span class="line">                c += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[c] == <span class="number">2</span>:</span><br><span class="line">                nums[c], nums[b] = nums[b], nums[c]</span><br><span class="line">                b -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;75-Sort-Colors-Medium&quot;&gt;&lt;a href=&quot;#75-Sort-Colors-Medium&quot; class=&quot;headerlink&quot; title=&quot;75. Sort Colors (Medium)&quot;&gt;&lt;/a&gt;75. Sort Colors (Med</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>451. Sort Characters By Frequency (Medium)</title>
    <link href="http://example.com/2022/06/09/451/"/>
    <id>http://example.com/2022/06/09/451/</id>
    <published>2022-06-09T21:39:17.000Z</published>
    <updated>2022-06-10T13:41:19.470Z</updated>
    
    <content type="html"><![CDATA[<ol start="451"><li>Sort Characters By Frequency (Medium)</li></ol><h2 id="Given-a-string-s-sort-it-in-decreasing-order-based-on-the-frequency-of-the-characters-The-frequency-of-a-character-is-the-number-of-times-it-appears-in-the-string"><a href="#Given-a-string-s-sort-it-in-decreasing-order-based-on-the-frequency-of-the-characters-The-frequency-of-a-character-is-the-number-of-times-it-appears-in-the-string" class="headerlink" title="Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string."></a>Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.</h2><h2 id="Return-the-sorted-string-If-there-are-multiple-answers-return-any-of-them"><a href="#Return-the-sorted-string-If-there-are-multiple-answers-return-any-of-them" class="headerlink" title="Return the sorted string. If there are multiple answers, return any of them."></a>Return the sorted string. If there are multiple answers, return any of them.</h2><p><a href="https://leetcode.cn/problems/sort-characters-by-frequency/solution/python3-shuang-90-by-key-wu-xbod/">Leetcode 题解</a></p><p>这道题和 347. Top K Frequent Elements (Medium) 几乎一样，一个是数字一个是字符串，方法也类似</p><p>1.建哈希表，将字符串s中的每个字符计数<br>2.根据哈希表中的值进行降序排序即可<br>3.直接字符乘以数目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">frequencySort</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> ans <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ans <span class="keyword">not</span> <span class="keyword">in</span> hashmap:</span><br><span class="line">                hashmap[ans] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashmap[ans] += <span class="number">1</span></span><br><span class="line">        result = <span class="built_in">sorted</span>(hashmap.items(),key=<span class="keyword">lambda</span> hashmap:hashmap[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">            res = result[i][<span class="number">0</span>] * result[i][<span class="number">1</span>]</span><br><span class="line">            s += res</span><br><span class="line">        <span class="keyword">return</span> s </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol start=&quot;451&quot;&gt;
&lt;li&gt;Sort Characters By Frequency (Medium)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Given-a-string-s-sort-it-in-decreasing-order-based-on-the-freq</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Quick Sort" scheme="http://example.com/tags/Quick-Sort/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>347. Top K Frequent Elements (Medium)</title>
    <link href="http://example.com/2022/06/09/347/"/>
    <id>http://example.com/2022/06/09/347/</id>
    <published>2022-06-09T21:30:39.000Z</published>
    <updated>2022-06-10T13:42:24.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="347-Top-K-Frequent-Elements-Medium"><a href="#347-Top-K-Frequent-Elements-Medium" class="headerlink" title="347. Top K Frequent Elements (Medium)"></a>347. Top K Frequent Elements (Medium)</h1><h2 id="Given-an-integer-array-nums-and-an-integer-k-return-the-k-most-frequent-elements-You-may-return-the-answer-in-any-order"><a href="#Given-an-integer-array-nums-and-an-integer-k-return-the-k-most-frequent-elements-You-may-return-the-answer-in-any-order" class="headerlink" title="Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order."></a>Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.</h2><p>hashmap<br>1.建哈希表，将数组中的每个数字计数<br>2.根据哈希表中的值进行降序排序即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span>(<span class="params">self, nums, k</span>):</span> </span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> ans <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> ans <span class="keyword">not</span> <span class="keyword">in</span> hashmap:</span><br><span class="line">                hashmap[ans] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashmap[ans] += <span class="number">1</span></span><br><span class="line">        result = <span class="built_in">sorted</span>(hashmap.items(),key=<span class="keyword">lambda</span> hashmap:hashmap[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">        res=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            res.extend(result[i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">           </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/bi-guan-fang-ti-jie-geng-kuai-de-fang-fa-lgsc/">题解评论</a></p><p>用字典去代替数组会不会好一些；<br>倒序遍历频次时，最大不超过 n-k+1 ；<br>python3版本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        hashMap = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            hashMap[num] = hashMap.get(num, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        bucket = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> x, v <span class="keyword">in</span> hashMap.items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> bucket:</span><br><span class="line">                bucket[v] = [x]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bucket[v].append(x)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - k + <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) &gt;= k:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> bucket:</span><br><span class="line">                res.extend(bucket[v])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/python-dui-pai-xu-by-xxinjiee/">leetcode题解</a></p><p>对于 topk 问题：最大堆求topk小，最小堆求 topk 大。</p><p>topk小：构建一个 k 个数的最大堆，当读取的数小于根节点时，替换根节点，重新塑造最大堆<br>topk大：构建一个 k 个数的最小堆，当读取的数大于根节点时，替换根节点，重新塑造最小堆<br>这一题的总体思路 总体时间复杂度 O(nlogk)O(nlogk)</p><p>遍历统计元素出现频率 O(n)O(n)<br>前k个数构造 规模为 k+1 的最小堆 minheap， O(k)O(k)， 注意 +1 是因为占位节点。<br>遍历规模k之外的数据，大于堆顶则入堆，下沉维护规模为k的最小堆 minheap. O(nlogk)O(nlogk)<br>(如需按频率输出，对规模为k的堆进行排序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sift_down</span>(<span class="params">arr, root, k</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;下沉log(k),如果新的根节点&gt;子节点就一直下沉&quot;&quot;&quot;</span></span><br><span class="line">            val = arr[root] <span class="comment"># 用类似插入排序的赋值交换</span></span><br><span class="line">            <span class="keyword">while</span> root&lt;&lt;<span class="number">1</span> &lt; k:</span><br><span class="line">                child = root &lt;&lt; <span class="number">1</span></span><br><span class="line">                <span class="comment"># 选取左右孩子中小的与父节点交换</span></span><br><span class="line">                <span class="keyword">if</span> child|<span class="number">1</span> &lt; k <span class="keyword">and</span> arr[child|<span class="number">1</span>][<span class="number">1</span>] &lt; arr[child][<span class="number">1</span>]:</span><br><span class="line">                    child |= <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果子节点&lt;新节点,交换,如果已经有序break</span></span><br><span class="line">                <span class="keyword">if</span> arr[child][<span class="number">1</span>] &lt; val[<span class="number">1</span>]:</span><br><span class="line">                    arr[root] = arr[child]</span><br><span class="line">                    root = child</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            arr[root] = val</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sift_up</span>(<span class="params">arr, child</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;上浮log(k),如果新加入的节点&lt;父节点就一直上浮&quot;&quot;&quot;</span></span><br><span class="line">            val = arr[child]</span><br><span class="line">            <span class="keyword">while</span> child&gt;&gt;<span class="number">1</span> &gt; <span class="number">0</span> <span class="keyword">and</span> val[<span class="number">1</span>] &lt; arr[child&gt;&gt;<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                arr[child] = arr[child&gt;&gt;<span class="number">1</span>]</span><br><span class="line">                child &gt;&gt;= <span class="number">1</span></span><br><span class="line">            arr[child] = val</span><br><span class="line"></span><br><span class="line">        stat = collections.Counter(nums)</span><br><span class="line">        stat = <span class="built_in">list</span>(stat.items())</span><br><span class="line">        heap = [(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建规模为k+1的堆,新元素加入堆尾,上浮</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            heap.append(stat[i])</span><br><span class="line">            sift_up(heap, <span class="built_in">len</span>(heap)-<span class="number">1</span>) </span><br><span class="line">        <span class="comment"># 维护规模为k+1的堆,如果新元素大于堆顶,入堆,并下沉</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="built_in">len</span>(stat)):</span><br><span class="line">            <span class="keyword">if</span> stat[i][<span class="number">1</span>] &gt; heap[<span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">                heap[<span class="number">1</span>] = stat[i]</span><br><span class="line">                sift_down(heap, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> heap[<span class="number">1</span>:]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;347-Top-K-Frequent-Elements-Medium&quot;&gt;&lt;a href=&quot;#347-Top-K-Frequent-Elements-Medium&quot; class=&quot;headerlink&quot; title=&quot;347. Top K Frequent Elem</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
    <category term="hashmap" scheme="http://example.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>215. Kth Largest Element in an Array (Medium)</title>
    <link href="http://example.com/2022/06/09/215/"/>
    <id>http://example.com/2022/06/09/215/</id>
    <published>2022-06-09T20:59:13.000Z</published>
    <updated>2022-06-11T02:59:01.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="215-Kth-Largest-Element-in-an-Array-Medium"><a href="#215-Kth-Largest-Element-in-an-Array-Medium" class="headerlink" title="215. Kth Largest Element in an Array (Medium)"></a>215. Kth Largest Element in an Array (Medium)</h1><h2 id="Given-an-integer-array-nums-and-an-integer-k-return-the-kth-largest-element-in-the-array"><a href="#Given-an-integer-array-nums-and-an-integer-k-return-the-kth-largest-element-in-the-array" class="headerlink" title="Given an integer array nums and an integer k, return the kth largest element in the array."></a>Given an integer array nums and an integer k, return the kth largest element in the array.</h2><h2 id="Note-that-it-is-the-kth-largest-element-in-the-sorted-order-not-the-kth-distinct-element"><a href="#Note-that-it-is-the-kth-largest-element-in-the-sorted-order-not-the-kth-distinct-element" class="headerlink" title="Note that it is the kth largest element in the sorted order, not the kth distinct element."></a>Note that it is the kth largest element in the sorted order, not the kth distinct element.</h2><h2 id="方法一-快速排序（Quick-Sort）"><a href="#方法一-快速排序（Quick-Sort）" class="headerlink" title="方法一. 快速排序（Quick Sort）"></a>方法一. 快速排序（Quick Sort）</h2><p>快速排序（英语：Quicksort），又称分区交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔（Tony Hoare ）提出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">arr: <span class="type">List</span>[<span class="built_in">int</span>], low: <span class="built_in">int</span>, high: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">            pivot = arr[low]                                        <span class="comment"># 选取最左边为pivot</span></span><br><span class="line"></span><br><span class="line">            left, right = low, high     <span class="comment"># 双指针</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[right] &gt;= pivot:          <span class="comment"># 找到右边第一个&lt;pivot的元素</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                arr[left] = arr[right]                             <span class="comment"># 并将其移动到left处</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span> left&lt;right <span class="keyword">and</span> arr[left] &lt;= pivot:           <span class="comment"># 找到左边第一个&gt;pivot的元素</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                arr[right] = arr[left]                             <span class="comment"># 并将其移动到right处</span></span><br><span class="line">            </span><br><span class="line">            arr[left] = pivot           <span class="comment"># pivot放置到中间left=right处</span></span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">randomPartition</span>(<span class="params">arr: <span class="type">List</span>[<span class="built_in">int</span>], low: <span class="built_in">int</span>, high: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">            pivot_idx = random.randint(low, high)                   <span class="comment"># 随机选择pivot</span></span><br><span class="line">            arr[low], arr[pivot_idx] = arr[pivot_idx], arr[low]     <span class="comment"># pivot放置到最左边</span></span><br><span class="line">            <span class="keyword">return</span> partition(arr, low, high)                        <span class="comment"># 调用partition函数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">topKSplit</span>(<span class="params">arr: <span class="type">List</span>[<span class="built_in">int</span>], low: <span class="built_in">int</span>, high: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">            <span class="comment"># mid = partition(arr, low, high)                   # 以mid为分割点【非随机选择pivot】</span></span><br><span class="line">            mid = randomPartition(arr, low, high)               <span class="comment"># 以mid为分割点【随机选择pivot】</span></span><br><span class="line">            <span class="keyword">if</span> mid == k-<span class="number">1</span>:                                      <span class="comment"># 第k小元素的下标为k-1</span></span><br><span class="line">                <span class="keyword">return</span> arr[mid]                                 <span class="comment">#【找到即返回】</span></span><br><span class="line">            <span class="keyword">elif</span> mid &lt; k-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> topKSplit(arr, mid+<span class="number">1</span>, high, k)           <span class="comment"># 递归对mid右侧元素进行排序</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> topKSplit(arr, low, mid-<span class="number">1</span>, k)            <span class="comment"># 递归对mid左侧元素进行排序</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">return</span> topKSplit(nums, <span class="number">0</span>, n-<span class="number">1</span>, n-k+<span class="number">1</span>)                   <span class="comment"># 第k大元素即为第n-k+1小元素</span></span><br></pre></td></tr></table></figure><h2 id="方法二-堆排序（Heap-Sort）"><a href="#方法二-堆排序（Heap-Sort）" class="headerlink" title="方法二. 堆排序（Heap Sort）"></a>方法二. 堆排序（Heap Sort）</h2><p>堆排序（英语：Heapsort）是指利用堆（heap）这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。[摘自@维基百科]</p><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/by-flix-amc8/">leetcode题解</a></p><p>堆与排序：</p><p>对于一个待排序的包含 nn 个元素的数组 numsnums，堆排序 通常包含以下几个基本步骤：</p><ol><li>建堆：将待排序的数组初始化为大根堆（小根堆）。此时，堆顶的元素（即根节点）即为整个数组中的最大值（最小值）。</li><li>交换和调整：将堆顶元素与末尾元素进行交换，此时末尾即为最大值（最小值）。除去末尾元素后，将其他 n-1n−1 个元素重新构造成一个大根堆（小根堆），如此便可得到原数组 nn 个元素中的次大值（次小值）。</li><li>重复步骤二，直至堆中仅剩一个元素，如此便可得到一个有序序列了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxHeapify</span>(<span class="params">arr, i, end</span>):</span></span><br><span class="line">            j = <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= end:</span><br><span class="line">                <span class="keyword">if</span> j+<span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[j+<span class="number">1</span>] &gt; arr[j]:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> arr[i] &lt; arr[j]:</span><br><span class="line">                    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">                    i = j</span><br><span class="line">                    j = <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxHepify</span>(<span class="params">arr, i, end</span>):</span>     <span class="comment"># 大顶堆</span></span><br><span class="line">            j = <span class="number">2</span>*i + <span class="number">1</span>                 <span class="comment"># j为i的左子节点【建堆时下标0表示堆顶】</span></span><br><span class="line">            <span class="keyword">while</span> j &lt;= end:             <span class="comment"># 自上而下进行调整</span></span><br><span class="line">                <span class="keyword">if</span> j+<span class="number">1</span> &lt;= end <span class="keyword">and</span> arr[j+<span class="number">1</span>] &gt; arr[j]:    <span class="comment"># i的左右子节点分别为j和j+1</span></span><br><span class="line">                    j += <span class="number">1</span>                              <span class="comment"># 取两者之间的较大者</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> arr[i] &lt; arr[j]:             <span class="comment"># 若i指示的元素小于其子节点中的较大者</span></span><br><span class="line">                    arr[i], arr[j] = arr[j], arr[i]     <span class="comment"># 交换i和j的元素，并继续往下判断</span></span><br><span class="line">                    i = j                       <span class="comment"># 往下走：i调整为其子节点j</span></span><br><span class="line">                    j = <span class="number">2</span>*i + <span class="number">1</span>                 <span class="comment"># j调整为i的左子节点</span></span><br><span class="line">                <span class="keyword">else</span>:                           <span class="comment"># 否则，结束调整</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建堆【大顶堆】</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n//<span class="number">2</span>-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):         <span class="comment"># 从第一个非叶子节点n//2-1开始依次往上进行建堆的调整</span></span><br><span class="line">            maxHepify(nums, i, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 排序：依次将堆顶元素（当前最大值）放置到尾部，并调整堆</span></span><br><span class="line">        <span class="comment"># k-1次重建堆（堆顶元素），或 k次交换到尾部（倒数第k个元素）</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, n-k-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            nums[<span class="number">0</span>], nums[j] = nums[j], nums[<span class="number">0</span>]     <span class="comment"># 堆顶元素（当前最大值）放置到尾部j</span></span><br><span class="line">            maxHepify(nums, <span class="number">0</span>, j-<span class="number">1</span>)                 <span class="comment"># j-1变成尾部，并从堆顶0开始调整堆</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums[-k]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;215-Kth-Largest-Element-in-an-Array-Medium&quot;&gt;&lt;a href=&quot;#215-Kth-Largest-Element-in-an-Array-Medium&quot; class=&quot;headerlink&quot; title=&quot;215. Kth</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="Heap Sort" scheme="http://example.com/tags/Heap-Sort/"/>
    
    <category term="Quick Sort" scheme="http://example.com/tags/Quick-Sort/"/>
    
    <category term="topk" scheme="http://example.com/tags/topk/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode03排序</title>
    <link href="http://example.com/2022/06/03/LeetCode03/"/>
    <id>http://example.com/2022/06/03/LeetCode03/</id>
    <published>2022-06-03T21:23:46.000Z</published>
    <updated>2022-06-10T02:00:42.082Z</updated>
    
    <content type="html"><![CDATA[<h6 id="具体学习链接-Leetcode-题解-目录-md"><a href="#具体学习链接-Leetcode-题解-目录-md" class="headerlink" title="具体学习链接:Leetcode 题解 - 目录.md"></a>具体学习链接:<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md">Leetcode 题解 - 目录.md</a></h6><h1 id="Leetcode-题解-排序"><a href="#Leetcode-题解-排序" class="headerlink" title="Leetcode 题解 - 排序"></a>Leetcode 题解 - 排序</h1><h2 id="1-快速选择"><a href="#1-快速选择" class="headerlink" title="1. 快速选择"></a>1. 快速选择</h2><h2 id="2-堆-Kth-Element"><a href="#2-堆-Kth-Element" class="headerlink" title="2. 堆-Kth Element"></a>2. 堆-Kth Element</h2><h2 id="3-桶排序"><a href="#3-桶排序" class="headerlink" title="3. 桶排序"></a>3. 桶排序</h2><h2 id="4-荷兰国旗问题"><a href="#4-荷兰国旗问题" class="headerlink" title="4. 荷兰国旗问题"></a>4. 荷兰国旗问题</h2><ol><li>快速选择（快速排序）</li></ol><p>用于求解 Kth Element 问题，也就是第 K 个元素的问题。</p><p>快速选择算法是基于快速排序算法思想的用于解决Top K 问题的算法</p><p>可以使用快速排序的 partition() 进行实现。需要先打乱数组，否则最坏情况下时间复杂度为 O(N2)。</p><p>步骤：<br>a. 从数列中挑出一个元素，称为 “基准”（pivot）;</p><p>b. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p><p>c. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><ol start="2"><li>堆排序</li></ol><p>用于求解 TopK Elements 问题，也就是 K 个最小元素的问题。使用最小堆来实现 TopK 问题，最小堆使用大顶堆来实现，大顶堆的堆顶元素为当前堆的最大元素。实现过程：不断地往大顶堆中插入新元素，当堆中元素的数量大于 k 时，移除堆顶元素，也就是当前堆中最大的元素，剩下的元素都为当前添加过的元素中最小的 K 个元素。插入和移除堆顶元素的时间复杂度都为 log2N。</p><p>堆也可以用于求解 Kth Element 问题，得到了大小为 K 的最小堆之后，因为使用了大顶堆来实现，因此堆顶元素就是第 K 大的元素。</p><p>快速选择也可以求解 TopK Elements 问题，因为找到 Kth Element 之后，再遍历一次数组，所有小于等于 Kth Element 的元素都是 TopK Elements。</p><p>可以看到，快速选择和堆排序都可以求解 Kth Element 和 TopK Elements 问题。</p><ol start="3"><li>桶排序<br>桶排序，简单来说就是将待排序序列，按照序列值的大小划分成几个桶，分别对每组进行排序，排完序之后再按照一定的顺序合并所有的桶，即排序完成。</li></ol><p>对这道题而言，设置若干个桶，每个桶存储出现频率相同的数。桶的下标表示数出现的频率，即第 i 个桶中存储的数出现的频率为 i。</p><p>把数都放到桶之后，从后向前遍历桶，最先得到的 k 个数就是出现频率最多的的 k 个数。</p><ol start="4"><li>荷兰国旗问题</li></ol><p>“荷兰国旗问题” 是计算机科学中的一个经典题目，它是由Edsger Dijkstra提出的。荷兰国旗由红、白、蓝三色组成。</p><p>荷兰国旗问题：现在有若干个红、白、蓝三种颜色的球随机排列成一条直线。现在我们的任务是把这些球按照红、白、蓝排序。</p><p>这个问题之所以叫荷兰国旗，是因为我们可以将红白蓝三色小球想象成条状物，有序排列后正好组成荷兰国旗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;具体学习链接-Leetcode-题解-目录-md&quot;&gt;&lt;a href=&quot;#具体学习链接-Leetcode-题解-目录-md&quot; class=&quot;headerlink&quot; title=&quot;具体学习链接:Leetcode 题解 - 目录.md&quot;&gt;&lt;/a&gt;具体学习链接:&lt;a hr</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>524. Longest Word in Dictionary through Deleting (Medium)</title>
    <link href="http://example.com/2022/05/31/524/"/>
    <id>http://example.com/2022/05/31/524/</id>
    <published>2022-06-01T02:57:45.000Z</published>
    <updated>2022-06-01T04:23:01.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="524-Longest-Word-in-Dictionary-through-Deleting-Medium"><a href="#524-Longest-Word-in-Dictionary-through-Deleting-Medium" class="headerlink" title="524. Longest Word in Dictionary through Deleting (Medium)"></a>524. Longest Word in Dictionary through Deleting (Medium)</h1><h2 id="Given-a-string-s-and-a-string-array-dictionary-return-the-longest-string-in-the-dictionary-that-can-be-formed-by-deleting-some-of-the-given-string-characters-If-there-is-more-than-one-possible-result-return-the-longest-word-with-the-smallest-lexicographical-order-If-there-is-no-possible-result-return-the-empty-string"><a href="#Given-a-string-s-and-a-string-array-dictionary-return-the-longest-string-in-the-dictionary-that-can-be-formed-by-deleting-some-of-the-given-string-characters-If-there-is-more-than-one-possible-result-return-the-longest-word-with-the-smallest-lexicographical-order-If-there-is-no-possible-result-return-the-empty-string" class="headerlink" title="Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string."></a>Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</h2><h2 id="题目描述：删除-s-中的一些字符，使得它构成字符串列表-d-中的一个字符串，找出能构成的最长字符串。如果有多个相同长度的结果，返回字典序的最小字符串。"><a href="#题目描述：删除-s-中的一些字符，使得它构成字符串列表-d-中的一个字符串，找出能构成的最长字符串。如果有多个相同长度的结果，返回字典序的最小字符串。" class="headerlink" title="题目描述：删除 s 中的一些字符，使得它构成字符串列表 d 中的一个字符串，找出能构成的最长字符串。如果有多个相同长度的结果，返回字典序的最小字符串。"></a>题目描述：删除 s 中的一些字符，使得它构成字符串列表 d 中的一个字符串，找出能构成的最长字符串。如果有多个相同长度的结果，返回字典序的最小字符串。</h2><p>通过删除字符串 s 中的一个字符能得到字符串 t，可以认为 t 是 s 的子序列，我们可以使用双指针来判断一个字符串是否为另一个字符串的子序列。</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><h4 id="1-只有双指针"><a href="#1-只有双指针" class="headerlink" title="1.只有双指针"></a>1.只有双指针</h4><p>这题还真有些难度，主要是有些问题不能一眼看到逻辑和结果。</p><p>根据题意，我们需要解决三个问题：</p><ol><li><p>给定字符串s删除一些字符后能得到数组的字符串</p></li><li><p>找最长的字符串</p></li><li><p>如果长度相同，选字典顺序最小的字符串<br>官方例子：<br>Input: s = “abpcplea”, dictionary = [“ale”,”apple”,”monkey”,”plea”]<br>Output: “apple”</p></li><li><p>第一点很好理解，就是在s这个字符串里找到子串。就像在一个集合里找到子集一样，可以发现[“ale”,”apple”,”plea”]符合</p></li><li><p>最长的字符串就是比较子串长度了，[“apple”] 就比 [“ale”] 和 [“plea”]长度要长</p></li><li><p>字典顺序最小，这个就是比较在字母表上的顺序了，以 a、b、c……z 的顺序排列，a最小，假如还有个新单词 [“appla”],那和[“apple”]比较，虽然长度一样，但是a的字典顺序在e前，所以我们得选择[“appla”]</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLongestWord</span>(<span class="params">self, s: <span class="built_in">str</span>, dictionary: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> dictionary:</span><br><span class="line">            i = j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(t) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(s):</span><br><span class="line">                <span class="keyword">if</span> t[i] == s[j]:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(t):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="built_in">len</span>(res) <span class="keyword">or</span> (<span class="built_in">len</span>(t) == <span class="built_in">len</span>(res) <span class="keyword">and</span> t &lt; res):</span><br><span class="line">                    res = t</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>排序+双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLongestWord</span>(<span class="params">self, s: <span class="built_in">str</span>, dictionary: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        m = <span class="built_in">len</span>(s)</span><br><span class="line">        f = [[<span class="number">0</span>] * <span class="number">26</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        f.append([m] * <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">ord</span>(s[i]) == j + <span class="number">97</span>:</span><br><span class="line">                    f[i][j] = i</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f[i][j] = f[i + <span class="number">1</span>][j]</span><br><span class="line"></span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> dictionary:</span><br><span class="line">            match = <span class="literal">True</span></span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">                <span class="keyword">if</span> f[j][<span class="built_in">ord</span>(t[i]) - <span class="number">97</span>] == m:</span><br><span class="line">                    match = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                j = f[j][<span class="built_in">ord</span>(t[i]) - <span class="number">97</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> match:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="built_in">len</span>(res) <span class="keyword">or</span> (<span class="built_in">len</span>(t) == <span class="built_in">len</span>(res) <span class="keyword">and</span> t &lt; res):</span><br><span class="line">                    res = t</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;524-Longest-Word-in-Dictionary-through-Deleting-Medium&quot;&gt;&lt;a href=&quot;#524-Longest-Word-in-Dictionary-through-Deleting-Medium&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>141. Linked List Cycle (Easy)</title>
    <link href="http://example.com/2022/05/31/141/"/>
    <id>http://example.com/2022/05/31/141/</id>
    <published>2022-05-31T22:20:08.000Z</published>
    <updated>2022-06-01T03:02:40.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a>141. Linked List Cycle</h1><h2 id="Given-head-the-head-of-a-linked-list-determine-if-the-linked-list-has-a-cycle-in-it"><a href="#Given-head-the-head-of-a-linked-list-determine-if-the-linked-list-has-a-cycle-in-it" class="headerlink" title="Given head, the head of a linked list, determine if the linked list has a cycle in it."></a>Given head, the head of a linked list, determine if the linked list has a cycle in it.</h2><h2 id="There-is-a-cycle-in-a-linked-list-if-there-is-some-node-in-the-list-that-can-be-reached-again-by-continuously-following-the-next-pointer-Internally-pos-is-used-to-denote-the-index-of-the-node-that-tail’s-next-pointer-is-connected-to-Note-that-pos-is-not-passed-as-a-parameter"><a href="#There-is-a-cycle-in-a-linked-list-if-there-is-some-node-in-the-list-that-can-be-reached-again-by-continuously-following-the-next-pointer-Internally-pos-is-used-to-denote-the-index-of-the-node-that-tail’s-next-pointer-is-connected-to-Note-that-pos-is-not-passed-as-a-parameter" class="headerlink" title="There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter."></a>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter.</h2><h2 id="Return-true-if-there-is-a-cycle-in-the-linked-list-Otherwise-return-false"><a href="#Return-true-if-there-is-a-cycle-in-the-linked-list-Otherwise-return-false" class="headerlink" title="Return true if there is a cycle in the linked list. Otherwise, return false."></a>Return true if there is a cycle in the linked list. Otherwise, return false.</h2><p>快慢指针</p><p>官方题解：<br>「Floyd 判圈算法」（又称龟兔赛跑算法）<br>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>我们可以根据上述思路来解决本题。具体地，我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p><p>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</p><p>官方解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.<span class="built_in">next</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>leetcode discussion（速度更快，但逻辑是类似的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            slow = head</span><br><span class="line">            fast = head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">while</span> slow <span class="keyword">is</span> <span class="keyword">not</span> fast:</span><br><span class="line">                slow = slow.<span class="built_in">next</span></span><br><span class="line">                fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这里有一点小不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> slow <span class="keyword">is</span> <span class="keyword">not</span> fast:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> slow != fast:</span><br></pre></td></tr></table></figure><p>这两个的编译速度在我多次尝试后发现没什么不同，应该没有什么影响</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;141-Linked-List-Cycle&quot;&gt;&lt;a href=&quot;#141-Linked-List-Cycle&quot; class=&quot;headerlink&quot; title=&quot;141. Linked List Cycle&quot;&gt;&lt;/a&gt;141. Linked List Cycle</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>88. Merge Sorted Array (Easy)</title>
    <link href="http://example.com/2022/05/29/88/"/>
    <id>http://example.com/2022/05/29/88/</id>
    <published>2022-05-29T20:24:30.000Z</published>
    <updated>2022-05-31T22:17:00.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="88-Merge-Sorted-Array-Easy"><a href="#88-Merge-Sorted-Array-Easy" class="headerlink" title="88. Merge Sorted Array (Easy)"></a>88. Merge Sorted Array (Easy)</h1><h2 id="You-are-given-two-integer-arrays-nums1-and-nums2-sorted-in-non-decreasing-order-and-two-integers-m-and-n-representing-the-number-of-elements-in-nums1-and-nums2-respectively"><a href="#You-are-given-two-integer-arrays-nums1-and-nums2-sorted-in-non-decreasing-order-and-two-integers-m-and-n-representing-the-number-of-elements-in-nums1-and-nums2-respectively" class="headerlink" title="You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively."></a>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</h2><h2 id="Merge-nums1-and-nums2-into-a-single-array-sorted-in-non-decreasing-order"><a href="#Merge-nums1-and-nums2-into-a-single-array-sorted-in-non-decreasing-order" class="headerlink" title="Merge nums1 and nums2 into a single array sorted in non-decreasing order."></a>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</h2><h2 id="The-final-sorted-array-should-not-be-returned-by-the-function-but-instead-be-stored-inside-the-array-nums1-To-accommodate-this-nums1-has-a-length-of-m-n-where-the-first-m-elements-denote-the-elements-that-should-be-merged-and-the-last-n-elements-are-set-to-0-and-should-be-ignored-nums2-has-a-length-of-n"><a href="#The-final-sorted-array-should-not-be-returned-by-the-function-but-instead-be-stored-inside-the-array-nums1-To-accommodate-this-nums1-has-a-length-of-m-n-where-the-first-m-elements-denote-the-elements-that-should-be-merged-and-the-last-n-elements-are-set-to-0-and-should-be-ignored-nums2-has-a-length-of-n" class="headerlink" title="The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n."></a>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</h2><p>python 数组技巧<br>array[n:]：打印从第n个元素（下标为n-1）到最后一个元素(包括第n个元素)<br>array[:n]：打印从第一个元素到第n个元素（下标为n-1）（包括第n个元素）</p><p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br>Output: [1,2,2,3,5,6]<br>Explanation: The arrays we are merging are [1,2,3] and [2,5,6].<br>The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums1, m, nums2, n</span>):</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[m-<span class="number">1</span>] &gt;= nums2[n-<span class="number">1</span>]:</span><br><span class="line">                nums1[m+n-<span class="number">1</span>] = nums1[m-<span class="number">1</span>]</span><br><span class="line">                m -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[m+n-<span class="number">1</span>] = nums2[n-<span class="number">1</span>]</span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            nums1[:n] = nums2[:n]</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums1, m, nums2, n</span>):</span></span><br><span class="line">        <span class="keyword">while</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[m-<span class="number">1</span>] &gt;= nums2[n-<span class="number">1</span>]:</span><br><span class="line">                nums1[m+n-<span class="number">1</span>] = nums1[m-<span class="number">1</span>]</span><br><span class="line">                m -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[m+n-<span class="number">1</span>] = nums2[n-<span class="number">1</span>]</span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            nums1[:n] = nums2[:n]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;88-Merge-Sorted-Array-Easy&quot;&gt;&lt;a href=&quot;#88-Merge-Sorted-Array-Easy&quot; class=&quot;headerlink&quot; title=&quot;88. Merge Sorted Array (Easy)&quot;&gt;&lt;/a&gt;88. M</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>680. Valid Palindrome II (Easy)</title>
    <link href="http://example.com/2022/05/28/680/"/>
    <id>http://example.com/2022/05/28/680/</id>
    <published>2022-05-29T02:58:54.000Z</published>
    <updated>2022-06-10T01:19:40.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="680-Valid-Palindrome-II-Easy"><a href="#680-Valid-Palindrome-II-Easy" class="headerlink" title="680. Valid Palindrome II(Easy)"></a>680. Valid Palindrome II(Easy)</h1><h2 id="Given-a-string-s-return-true-if-the-s-can-be-palindrome-after-deleting-at-most-one-character-from-it"><a href="#Given-a-string-s-return-true-if-the-s-can-be-palindrome-after-deleting-at-most-one-character-from-it" class="headerlink" title="Given a string s, return true if the s can be palindrome after deleting at most one character from it."></a>Given a string s, return true if the s can be palindrome after deleting at most one character from it.</h2><h2 id="官方题解：list-双指针"><a href="#官方题解：list-双指针" class="headerlink" title="官方题解：list+双指针"></a>官方题解：list+双指针</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        isPalindrome = <span class="keyword">lambda</span> s: s == s[::-<span class="number">1</span>]</span><br><span class="line">        strPart = <span class="keyword">lambda</span> s, x: s[:x] + s[x + <span class="number">1</span>:]</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> s[left] != s[right]:</span><br><span class="line">                <span class="keyword">return</span> isPalindrome(strPart(s, left)) <span class="keyword">or</span> isPalindrome(strPart(s, right))</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Time: O(n)</span></span><br><span class="line">        <span class="comment"># Space: O(n)</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">if</span> s[left] != s[right]:</span><br><span class="line">                one, two = s[left:right], s[left + <span class="number">1</span>:right + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">return</span> one == one[::-<span class="number">1</span>] <span class="keyword">or</span> two == two[::-<span class="number">1</span>]</span><br><span class="line">            left, right = left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="built_in">len</span>(s)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> s[i] != s[j]:</span><br><span class="line">                delete_i = s[i+<span class="number">1</span>:j+<span class="number">1</span>]</span><br><span class="line">                delete_j = s[i:j]</span><br><span class="line">                <span class="keyword">return</span> self._isPalindrome(delete_i) <span class="keyword">or</span> self._isPalindrome(delete_j)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_isPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="keyword">return</span> s == s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;680-Valid-Palindrome-II-Easy&quot;&gt;&lt;a href=&quot;#680-Valid-Palindrome-II-Easy&quot; class=&quot;headerlink&quot; title=&quot;680. Valid Palindrome II(Easy)&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>345. Reverse Vowels of a String (Easy)</title>
    <link href="http://example.com/2022/05/28/345/"/>
    <id>http://example.com/2022/05/28/345/</id>
    <published>2022-05-28T23:50:01.000Z</published>
    <updated>2022-05-29T03:08:55.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="345-Reverse-Vowels-of-a-String"><a href="#345-Reverse-Vowels-of-a-String" class="headerlink" title="345. Reverse Vowels of a String"></a>345. Reverse Vowels of a String</h1><h2 id="Given-a-string-s-reverse-only-all-the-vowels-in-the-string-and-return-it"><a href="#Given-a-string-s-reverse-only-all-the-vowels-in-the-string-and-return-it" class="headerlink" title="Given a string s, reverse only all the vowels in the string and return it."></a>Given a string s, reverse only all the vowels in the string and return it.</h2><h2 id="The-vowels-are-‘a’-‘e’-‘i’-‘o’-and-‘u’-and-they-can-appear-in-both-cases"><a href="#The-vowels-are-‘a’-‘e’-‘i’-‘o’-and-‘u’-and-they-can-appear-in-both-cases" class="headerlink" title="The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’, and they can appear in both cases."></a>The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’, and they can appear in both cases.</h2><h2 id="官方题解：list-双指针"><a href="#官方题解：list-双指针" class="headerlink" title="官方题解：list+双指针"></a>官方题解：list+双指针</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isVowel</span>(<span class="params">ch: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">            <span class="keyword">return</span> ch <span class="keyword">in</span> <span class="string">&quot;aeiouAEIOU&quot;</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        s = <span class="built_in">list</span>(s)</span><br><span class="line">        left, right = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="keyword">while</span> left &lt; n <span class="keyword">and</span> <span class="keyword">not</span> isVowel(s[i]):</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> right &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> isVowel(s[j]):</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; right:</span><br><span class="line">                s[left], s[right] = s[right], s[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        temp=[]<span class="comment">#存储遇到的元音</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;U&#x27;</span>]:</span><br><span class="line">                temp.append(s[i])</span><br><span class="line">        k=<span class="built_in">len</span>(temp)</span><br><span class="line">        s=<span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;U&#x27;</span>]:</span><br><span class="line">                s[i]=temp[k-<span class="number">1</span>]<span class="comment">#temp从后往前取值去覆盖</span></span><br><span class="line">                k-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br></pre></td></tr></table></figure><p>list+双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        vowels = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>]     <span class="comment"># 元音字母列表</span></span><br><span class="line">        s = <span class="built_in">list</span>(s)                                                     <span class="comment"># 列表化输入字符串</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">1</span>                                     <span class="comment"># 初始化左右指针位置</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:                                             <span class="comment"># 如果指针位置合法</span></span><br><span class="line">            <span class="keyword">if</span> s[left] <span class="keyword">not</span> <span class="keyword">in</span> vowels:                                   <span class="comment"># 如果左指针处字符不是元音字母</span></span><br><span class="line">                left += <span class="number">1</span>                                               <span class="comment"># 左指针右移</span></span><br><span class="line">            <span class="keyword">elif</span> s[right] <span class="keyword">not</span> <span class="keyword">in</span> vowels:                                <span class="comment"># 如果右指针处字符不是元音字母</span></span><br><span class="line">                right -= <span class="number">1</span>                                              <span class="comment"># 右指针左移</span></span><br><span class="line">            <span class="keyword">else</span>:                                                       <span class="comment"># 如果左右指针处字符都是元音字母</span></span><br><span class="line">                s[left], s[right] = s[right], s[left]                   <span class="comment"># 交换位置</span></span><br><span class="line">                left += <span class="number">1</span>                                               <span class="comment"># 左指针右移</span></span><br><span class="line">                right -= <span class="number">1</span>                                              <span class="comment"># 右指针左移</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(s)                                               <span class="comment"># 将列表中的字符连接起来</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;345-Reverse-Vowels-of-a-String&quot;&gt;&lt;a href=&quot;#345-Reverse-Vowels-of-a-String&quot; class=&quot;headerlink&quot; title=&quot;345. Reverse Vowels of a String&quot;</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="list" scheme="http://example.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>633. Sum of Square Numbers (Medium)</title>
    <link href="http://example.com/2022/05/28/633-Sum%20of%20Square%20Numbers/"/>
    <id>http://example.com/2022/05/28/633-Sum%20of%20Square%20Numbers/</id>
    <published>2022-05-28T23:31:13.000Z</published>
    <updated>2022-05-29T03:06:30.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="633-Sum-of-Square-Numbers"><a href="#633-Sum-of-Square-Numbers" class="headerlink" title="633. Sum of Square Numbers"></a>633. Sum of Square Numbers</h1><h2 id="Given-a-non-negative-integer-c-decide-whether-there’re-two-integers-a-and-b-such-that-a2-b2-c"><a href="#Given-a-non-negative-integer-c-decide-whether-there’re-two-integers-a-and-b-such-that-a2-b2-c" class="headerlink" title="Given a non-negative integer c, decide whether there’re two integers a and b such that a2 + b2 = c."></a>Given a non-negative integer c, decide whether there’re two integers a and b such that a2 + b2 = c.</h2><p>同样是双指针</p><p>本题的关键是右指针的初始化，实现剪枝，从而降低时间复杂度。设右指针为 x，左指针固定为 0，为了使 02 + x2 的值尽可能接近 target，我们可以将 x 取为 sqrt(target)。</p><p>因为最多只需要遍历一次 0~sqrt(target)，所以时间复杂度为 O(sqrt(target))。又因为只使用了两个额外的变量，因此空间复杂度为 O(1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judgeSquareSum</span>(<span class="params">self, c</span>):</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">int</span>(c**<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            <span class="built_in">sum</span> = l*l+r*r</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span> &lt; c:</span><br><span class="line">                l +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">sum</span>&gt;c:</span><br><span class="line">                r -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;633-Sum-of-Square-Numbers&quot;&gt;&lt;a href=&quot;#633-Sum-of-Square-Numbers&quot; class=&quot;headerlink&quot; title=&quot;633. Sum of Square Numbers&quot;&gt;&lt;/a&gt;633. Sum o</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>167. Two Sum II - Input array is sorted (Easy)</title>
    <link href="http://example.com/2022/05/28/167-twosum-sorted/"/>
    <id>http://example.com/2022/05/28/167-twosum-sorted/</id>
    <published>2022-05-28T23:13:37.000Z</published>
    <updated>2022-05-29T03:06:43.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="167-Two-Sum-II-Input-Array-Is-Sorted"><a href="#167-Two-Sum-II-Input-Array-Is-Sorted" class="headerlink" title="167. Two Sum II - Input Array Is Sorted"></a>167. Two Sum II - Input Array Is Sorted</h1><h2 id="Given-a-1-indexed-array-of-integers-numbers-that-is-already-sorted-in-non-decreasing-order-find-two-numbers-such-that-they-add-up-to-a-specific-target-number-Let-these-two-numbers-be-numbers-index1-and-numbers-index2-where-1-lt-index1-lt-index2-lt-numbers-length"><a href="#Given-a-1-indexed-array-of-integers-numbers-that-is-already-sorted-in-non-decreasing-order-find-two-numbers-such-that-they-add-up-to-a-specific-target-number-Let-these-two-numbers-be-numbers-index1-and-numbers-index2-where-1-lt-index1-lt-index2-lt-numbers-length" class="headerlink" title="Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 &lt;= index1 &lt; index2 &lt;= numbers.length."></a>Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 &lt;= index1 &lt; index2 &lt;= numbers.length.</h2><h2 id="Return-the-indices-of-the-two-numbers-index1-and-index2-added-by-one-as-an-integer-array-index1-index2-of-length-2"><a href="#Return-the-indices-of-the-two-numbers-index1-and-index2-added-by-one-as-an-integer-array-index1-index2-of-length-2" class="headerlink" title="Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2."></a>Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.</h2><h2 id="The-tests-are-generated-such-that-there-is-exactly-one-solution-You-may-not-use-the-same-element-twice"><a href="#The-tests-are-generated-such-that-there-is-exactly-one-solution-You-may-not-use-the-same-element-twice" class="headerlink" title="The tests are generated such that there is exactly one solution. You may not use the same element twice."></a>The tests are generated such that there is exactly one solution. You may not use the same element twice.</h2><h2 id="Your-solution-must-use-only-constant-extra-space"><a href="#Your-solution-must-use-only-constant-extra-space" class="headerlink" title="Your solution must use only constant extra space."></a>Your solution must use only constant extra space.</h2><p>和第一题几乎可以用同样的思路，只不过这里的index从1开始，而且有序数组比第一题更简单</p><h3 id="根据第一题改的hashmap"><a href="#根据第一题改的hashmap" class="headerlink" title="根据第一题改的hashmap"></a>根据第一题改的hashmap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        Hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(numbers):</span><br><span class="line">            key = target - value</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> Hashmap:</span><br><span class="line">                <span class="keyword">return</span> [Hashmap[key]+<span class="number">1</span>, index+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Hashmap[value] = index</span><br></pre></td></tr></table></figure><p>Two pointers: O(n) time and O(1) space<br>Dictionary: O(n) time and O(n) space<br>Binary search: O(nlogn) time and O(1) space</p><h3 id="two-pointer"><a href="#two-pointer" class="headerlink" title="two-pointer"></a>two-pointer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">len</span>(numbers)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            s = numbers[l] + numbers[r]</span><br><span class="line">            <span class="keyword">if</span> s == target:</span><br><span class="line">                <span class="keyword">return</span> [l+<span class="number">1</span>, r+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> s &lt; target:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(numbers):</span><br><span class="line">            <span class="keyword">if</span> target-num <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> [dic[target-num]+<span class="number">1</span>, i+<span class="number">1</span>]</span><br><span class="line">            dic[num] = i</span><br><span class="line">```           </span><br><span class="line"></span><br><span class="line"><span class="comment">### binary search        </span></span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(numbers)):</span><br><span class="line">        l, r = i+<span class="number">1</span>, <span class="built_in">len</span>(numbers)-<span class="number">1</span></span><br><span class="line">        tmp = target - numbers[i]</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = l + (r-l)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> numbers[mid] == tmp:</span><br><span class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>, mid+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> numbers[mid] &lt; tmp:</span><br><span class="line">                l = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r = mid-<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="binary-search-改进版"><a href="#binary-search-改进版" class="headerlink" title="binary search   改进版"></a>binary search   改进版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, numbers, target</span>):</span></span><br><span class="line">        investigatedSoFar = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> numbers[i] <span class="keyword">in</span> investigatedSoFar:</span><br><span class="line">                investigatedSoFar.append(numbers[i])</span><br><span class="line">                l, r = i + <span class="number">1</span>, <span class="built_in">len</span>(numbers) - <span class="number">1</span></span><br><span class="line">                tmp = target - numbers[i]</span><br><span class="line">                <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                    mid = l + (r-l) // <span class="number">2</span></span><br><span class="line">                    <span class="keyword">if</span> numbers[mid] == tmp:</span><br><span class="line">                        <span class="keyword">return</span>([i + <span class="number">1</span>, mid + <span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">elif</span> numbers[mid] &lt; tmp:</span><br><span class="line">                        l = mid + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        r = mid - <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;167-Two-Sum-II-Input-Array-Is-Sorted&quot;&gt;&lt;a href=&quot;#167-Two-Sum-II-Input-Array-Is-Sorted&quot; class=&quot;headerlink&quot; title=&quot;167. Two Sum II - In</summary>
      
    
    
    
    <category term="study" scheme="http://example.com/categories/study/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
